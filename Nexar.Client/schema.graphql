schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  "Search for workspaces associated with this account."
  desWorkspaces(where: DesWorkspaceFilterInput): [DesWorkspace!]!
  "Search a specific workspace by its unique identifier."
  desWorkspaceById("The node identifier for a workspace." id: ID!): DesWorkspace
  "Get a list of workspace locations."
  desWorkspaceLocations: [DesWorkspaceLocation!]!
  "Gets the specified settings."
  desSettings(workspaceUrl: String! names: [String!]!): [String]!
  "Gets life cycle definitions."
  desLifeCycleDefinitions(workspaceUrl: String!): [DesLifeCycleDefinition!]!
  "Gets the first allowed life cycle by the content kind."
  desLifeCycleDefinitionByContentTypeKind(workspaceUrl: String! kind: DesContentTypeKind!): DesLifeCycleDefinition!
  "Gets revision naming schemes."
  desRevisionNamingSchemes(workspaceUrl: String!): [DesRevisionNamingScheme!]!
  "Gets the first allowed naming scheme by the content kind."
  desRevisionNamingSchemeByContentTypeKind(workspaceUrl: String! kind: DesContentTypeKind!): DesRevisionNamingScheme!
  "Gets the specified workspace team."
  desTeam(workspaceUrl: String!): DesTeam!
  "Gets the specified workspace users by IDs."
  desUsers(workspaceUrl: String! ids: [String!]!): [DesUser]!
  "Gets the authorized user."
  desUserByAuth: DesUser!
  "Gets a user by the specified global ID."
  desUserByGlobalId(id: String!): DesUser
  "Search projects within a workspace with results in paged groups."
  desProjects("The web address of a workspace." workspaceUrl: String! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: DesProjectFilterInput): DesProjectConnection
  "Search a specific project by its unique identifier."
  desProjectById("The node identifier for a project." id: ID!): DesProject
  "Gets the unique identifier for a project from its internal identifier."
  desProjectIdFromAfsId(workspaceUrl: String! afsId: String! "If the project is known to be shared or internal, this parameter can be provided to make the query faster." isSharedProject: Boolean): DesProjectIdPayload!
  desDesignItemById(id: ID!): DesDesignItem
  desLibrary(workspaceUrl: String!): DesLibrary!
  desComponentById(id: ID!): DesComponent
  desRevisionDetailsById(id: ID!): DesRevisionDetails
  desComponentTemplateById(id: ID!): DesComponentTemplate
  "Search for comment threads associated with a project."
  desCommentThreads("The node identifier for a project (This is the project field named \"id\")." projectId: ID!): [DesCommentThread!]!
  "Search for a specific comment thread associated with a project."
  desCommentThread("The node identifier for a project (This is the project field named \"id\")." projectId: ID! "The reference identifier for a comment thread." threadId: String!): DesCommentThread
  desReleaseById(id: ID!): DesRelease
  "Gets the BOM by its identifier."
  desBomById("The BOM identifier." id: ID!): DesBom
  desManufacturePackages: [DesManufacturePackage!]!
  desManufacturePackageById(id: ID!): DesManufacturePackage
  desManufacturePackageCreationJob(id: ID!): DesManufacturePackageCreationJob
  "Find a specific reuse block by its unique identifier."
  desReuseBlockById("The node identifier for a reuse block." id: ID!): DesReuseBlock
  "Find a specific reuse block revision by its unique identifier."
  desReuseBlockRevisionById("The node identifier for a reuse block revision." id: ID!): DesReuseBlockRevision
  "The list of project tasks."
  desProjectTasks(projectId: ID! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): DesTaskConnection
  "The list of workspace tasks."
  desWorkspaceTasks(workspaceUrl: String! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): DesTaskConnection
  "*** PROTOTYPE, SUBJECT TO CHANGE ***"
  desProjectCollaborationSimulationRevisions(projectId: ID! domainName: String! "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): DesCollaborationSimulationRevisionConnection
  "*** PROTOTYPE, SUBJECT TO CHANGE ***"
  desProjectCollaborationSimulationLatestRevision(projectId: ID! domainName: String! projectTypeName: String!): DesCollaborationSimulationRevision!
  desSharedWithMe: DesSharedWithMe!
  supOctopartIdFromCiivaId(workspaceUrl: String! ciivaId: String!): String @deprecated(reason: "Use `supPartIdFromCiivaId`.")
  "Nexar infrastructure, subject to change."
  supPartIdFromCiivaId(ciivaId: String!): String
  "Nexar infrastructure, subject to change."
  supPartIdsFromCiivaIds(ciivaIds: [String!]!): [String]!
  "Nexar infrastructure, subject to change."
  supCiivaIdFromPartId(partId: String!): String
  "Nexar supply part data for internal use only."
  supPartExtrasByPartId(partId: String!): SupPartExtras
}

type Mutation {
  desCreateComment(input: DesCreateCommentInput!): DesCreateCommentPayload!
  desDeleteComment(input: DesDeleteCommentInput!): DesDeleteCommentPayload!
  desUpdateComment(input: DesUpdateCommentInput!): DesUpdateCommentPayload!
  desCreateCommentThread(input: DesCreateCommentThreadInput!): DesCreateCommentThreadPayload!
  desDeleteCommentThread(input: DesDeleteCommentThreadInput!): DesDeleteCommentThreadPayload!
  "Releases the specified component."
  desReleaseComponent(input: DesReleaseComponentInput!): DesReleaseComponentPayload!
  "Creates and releases the specified component template."
  desReleaseComponentTemplate(input: DesReleaseComponentTemplateInput!): DesReleaseComponentTemplatePayload!
  "Updates parameters for the specified component (creates a new revision)."
  desUpdateComponentRevisionParameters(input: DesUpdateComponentRevisionParametersInput!): DesUpdateComponentRevisionParametersPayload!
  "Uploads the project zip file."
  desUploadProject(input: DesUploadProjectInput!): DesUploadProjectPayload!
  "*** PROTOTYPE, SUBJECT TO CHANGE ***"
  desUploadCollaborationSimulation(input: DesUploadCollaborationSimulationInput!): DesUploadCollaborationSimulationPayload!
  "Updates a specific result block."
  desUpdateReuseBlock(input: DesUpdateReuseBlockInput!): DesUpdateReuseBlockPayload!
  "Creates a user."
  desCreateUser(input: DesCreateUserInput!): DesCreateUserPayload!
  "Deletes the specified user."
  desDeleteUser(input: DesDeleteUserInput!): DesDeleteUserPayload!
  "Updates the specified user properties."
  desUpdateUser(input: DesUpdateUserInput!): DesUpdateUserPayload!
  "Creates a new user group."
  desCreateUserGroup(input: DesCreateUserGroupInput!): DesCreateUserGroupPayload!
  "Deletes the specified user group."
  desDeleteUserGroup(input: DesDeleteUserGroupInput!): DesDeleteUserGroupPayload!
  "Updates the specified user group."
  desUpdateUserGroup(input: DesUpdateUserGroupInput!): DesUpdateUserGroupPayload!
  "Adds users to the specified group."
  desAddUsersToGroup(input: DesAddUsersToGroupInput!): DesAddUsersToGroupPayload!
  "Removes users from the specified group."
  desRemoveUsersFromGroup(input: DesRemoveUsersFromGroupInput!): DesRemoveUsersFromGroupPayload!
  desLaunchWorkflow(input: DesLaunchWorkflowInput!): DesLaunchWorkflowPayload!
  desTerminateWorkflows(input: DesTerminateWorkflowsInput!): DesTerminateWorkflowsPayload!
  "Creates a project task."
  desCreateProjectTask(input: DesCreateProjectTaskInput!): DesCreateTaskPayload!
  "Creates a workspace task."
  desCreateWorkspaceTask(input: DesCreateWorkspaceTaskInput!): DesCreateTaskPayload!
  "Deletes the task specified by its node ID."
  desDeleteTask(input: DesDeleteTaskInput!): DesDeleteTaskPayload!
  "Updates the specified task."
  desUpdateTask(input: DesUpdateTaskInput!): DesUpdateTaskPayload!
  "Creates a new comment for the specified task."
  desCreateTaskComment(input: DesCreateTaskCommentInput!): DesCreateTaskCommentPayload!
  "Deletes the specified task comment."
  desDeleteTaskComment(input: DesDeleteTaskCommentInput!): DesDeleteTaskCommentPayload!
  "Updates the specified task comment."
  desUpdateTaskComment(input: DesUpdateTaskCommentInput!): DesUpdateTaskCommentPayload!
  "Creates a manufacture package."
  desCreateManufacturePackage(input: DesCreateManufacturePackageInput!): DesCreateManufacturePackagePayload!
}

type Subscription {
  desOnCommentUpdated(input: DesOnCommentUpdatedInput!): DesCommentNotification!
}

"A workspace provides a flexible and secure method for managing design, manufacturing and supply content."
type DesWorkspace implements Node {
  "The node identifier for the workspace (used by `DesWorkspaceById`)."
  id: ID!
  "The location of this workspace."
  location: DesWorkspaceLocation!
  "The resource managing components for this workspace."
  library: DesLibrary!
  "The list of members authorized for this workspace."
  team: DesTeam!
  "The list of projects managed in this workspace."
  projects(where: DesProjectFilterInput): [DesProject!]!
  "The list of workflow definitions in this workspace."
  workflowDefinitions(where: DesWorkflowDefinitionFilterInput): [DesWorkflowDefinition!]
  "The list of workflows in this workspace."
  workflows(where: DesWorkflowFilterInput): [DesWorkflow!]
  "The descriptive label for this workspace."
  name: String!
  "The web address of this workspace."
  url: String!
  "The summary of this workspace content or purpose."
  description: String
  "Tells if the workspace is the current user default."
  isDefault: Boolean!
}

"A project manages all development stages of the PCB\/PCA product lifecycle."
type DesProject implements Node {
  "The node identifier for this project (used by `desProjectById`)."
  id: ID!
  "The account information for who created this project."
  createdBy: DesUser
  "The account information for who last modified this project."
  updatedBy: DesUser
  "The list of the parameters describing this project."
  parameters("An optional list of parameter names to search." names: [String!]): [DesProjectParameter!]!
  "The web address to download a preview image for this project."
  previewUrl: String!
  "The list of workflows associated with this project."
  workflows("An option to search workflows that have been completed." isClosed: Boolean! = false "An option to search workflows that have been modified after a specific `DateTime`." modifiedAfter: DateTime where: DesWorkflowFilterInput): [DesWorkflow!]
  "The latest VCS revision."
  latestRevision: DesVcsRevision!
  "The list of VCS revisions."
  revisions("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): DesVcsRevisionConnection
  "The Altium 365 web address."
  url: String!
  "The Altium 365 workspace URL."
  workspaceUrl: String!
  "The reference identifier for this project."
  projectId: String!
  "The assigned name for this project."
  name: String
  "The summary of this project content or purpose."
  description: String
  "The `DateTime` when this project was created."
  createdAt: DateTime
  "The `DateTime` when this project was last modified."
  updatedAt: DateTime
  "The detailed design information for this project."
  design: DesDesign!
}

"A release is a published version of a design with additional generated files for manufacturing."
type DesRelease implements Node {
  "The node identifier for this release (used by `desReleaseById`)."
  id: ID!
  "The list of variations contained in this release."
  variants(where: DesReleaseVariantFilterInput): [DesReleaseVariant!]!
  manufacturePackages: [DesManufacturePackage!]!
  "The `DateTime` when this release was created."
  createdAt: DateTime!
  "The summary of this release content or purpose."
  description: String!
  "The reference identifier for this release."
  releaseId: String!
}

"A design item is a specific instance of a part used in the design."
type DesDesignItem implements Node {
  "The node identifier for this project (used by `DesDesignItemById`)."
  id: ID!
  "The detailed component information for this design item."
  component: DesComponent
  "The list of all comment threads related to this design item."
  commentThreads: [DesCommentThread!]
  "The unique label for this design item."
  designator: String!
  "The summary of function or other performance details for this design item."
  description: String!
  "The additional information for this design item."
  comment: String!
  "The layer(side) placement for this design item."
  layer: DesLayer
  "The planar location for this design item."
  position: DesPosition2D!
  "The planar boundary for this design item."
  area: DesRectangle
  footprintName: String!
  "The rotation in degrees."
  rotation: Decimal
  "The list of connection targets for this design item."
  pads: [DesPad!]!
  "The list of multiple layer connections for this design item."
  vias: [DesVia!]!
  "The list of conductor segments for this design item."
  tracks(where: DesTrackFilterInput): [DesTrack!]!
}

"A component contains the parametric details of a PCB part."
type DesComponent implements Node {
  "The node identifier for this component (used by `desComponentById`)."
  id: ID!
  "The component folder."
  folder: DesFolder
  "The list of the part choices associated with this component."
  manufacturerParts: [DesManufacturerPart!]!
  "More component data, relatively expensive, recommended for individual components with `desComponentById`."
  details: DesComponentDetails!
  "The library label for this component."
  name: String!
  "The additional information for this component."
  comment: String!
  "The summary of function or other performance details for this component."
  description: String!
  "The component revision."
  revision: DesRevision!
  model3D: DesModel3D
}

"A user group information."
type DesUserGroup implements Node {
  "The node ID."
  id: ID!
  "The group name."
  name: String!
}

type DesManufacturePackage implements Node {
  "The node identifier for this project (used by `desManufacturePackageById`)."
  id: ID!
  name: String!
  downloadUrl: String!
}

"A Bill of Materials (BOM) contains a list of all of the parts needed for the assembly of a PCB."
type DesBom implements Node {
  "The node identifier for this BOM (used by `desBomById`)."
  id: ID!
  "The list of each unique part within the BOM."
  bomItems: [DesBomItem!]!
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

"A project manages all development stages of the PCB\/PCA product lifecycle."
input DesProjectFilterInput {
  and: [DesProjectFilterInput!]
  or: [DesProjectFilterInput!]
  "The Altium 365 web address."
  url: StringOperationFilterInput
  "The Altium 365 workspace URL."
  workspaceUrl: StringOperationFilterInput
  "The reference identifier for this project."
  projectId: StringOperationFilterInput
  "The assigned name for this project."
  name: StringOperationFilterInput
  "The summary of this project content or purpose."
  description: StringOperationFilterInput
  "The `DateTime` when this project was created."
  createdAt: ComparableNullableOfDateTimeOperationFilterInput
  "The `DateTime` when this project was last modified."
  updatedAt: ComparableNullableOfDateTimeOperationFilterInput
}

"A workflow definition contains a logical sequence of tasks."
input DesWorkflowDefinitionFilterInput {
  and: [DesWorkflowDefinitionFilterInput!]
  or: [DesWorkflowDefinitionFilterInput!]
  "The reference identifier for this workflow definition."
  workflowDefinitionId: StringOperationFilterInput
  "The label for this workflow definition."
  name: StringOperationFilterInput
  "The account information for who created this workflow definition."
  createdBy: StringOperationFilterInput
  "The `DateTime` for the creation of this workflow definition."
  createdAt: ComparableDateTimeOperationFilterInput
}

"A workflow manages the execution of a logical sequence of tasks."
input DesWorkflowFilterInput {
  and: [DesWorkflowFilterInput!]
  or: [DesWorkflowFilterInput!]
  "The reference identifier for this workflow."
  workflowId: StringOperationFilterInput
  "The name of the active task(s) for this workflow."
  state: StringOperationFilterInput
  "The account information for the owner of any action or response needed for this workflow."
  assignee: StringOperationFilterInput
  "The account information for who created this workflow."
  createdBy: StringOperationFilterInput
  "The `DateTime` for the creation of this workflow."
  createdAt: ComparableDateTimeOperationFilterInput
  "The `DateTime` for the completion of this workflow."
  endedAt: ComparableNullableOfDateTimeOperationFilterInput
  "The label for this workflow."
  name: StringOperationFilterInput
  "The reference identifier for definition of this workflow."
  processDefinitionId: StringOperationFilterInput
  "The label for the definition of this workflow."
  processDefinitionName: StringOperationFilterInput
  "The current condition of this workflow."
  status: StringOperationFilterInput
}

"A connection to a list of items."
type DesVcsRevisionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DesVcsRevisionEdge!]
  "A flattened list of the nodes."
  nodes: [DesVcsRevision!]
  totalCount: Int!
}

"A variant contains a specific configuration of a base design."
input DesReleaseVariantFilterInput {
  and: [DesReleaseVariantFilterInput!]
  or: [DesReleaseVariantFilterInput!]
  "The descriptive label for this design variant."
  name: StringOperationFilterInput
  "The list of schematic documents for this design variant."
  schematics: ListFilterInputTypeOfDesSchematicFilterInput
}

input DesTrackFilterInput {
  and: [DesTrackFilterInput!]
  or: [DesTrackFilterInput!]
  layer: DesLayerFilterInput
}

enum ApplyPolicy {
  BEFORE_RESOLVER
  AFTER_RESOLVER
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input ComparableNullableOfDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableDateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime!]
  nin: [DateTime!]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"VCS revision\/commit information."
type DesVcsRevision {
  revisionId: String!
  message: String!
  author: String!
  createdAt: DateTime!
  files: [DesVcsRevisionFileChange!]!
}

"An edge in a connection."
type DesVcsRevisionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesVcsRevision!
}

input ListFilterInputTypeOfDesSchematicFilterInput {
  all: DesSchematicFilterInput
  none: DesSchematicFilterInput
  some: DesSchematicFilterInput
  any: Boolean
}

input DesLayerFilterInput {
  and: [DesLayerFilterInput!]
  or: [DesLayerFilterInput!]
  name: StringOperationFilterInput
}

"A schematic contains the design parts and logical connections."
input DesSchematicFilterInput {
  and: [DesSchematicFilterInput!]
  or: [DesSchematicFilterInput!]
  "The reference identifier for this schematic."
  documentId: StringOperationFilterInput
  parentIds: ListStringOperationFilterInput
  units: ComparableInt32OperationFilterInput
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput
  none: StringOperationFilterInput
  some: StringOperationFilterInput
  any: Boolean
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

"A variant contains a specific configuration of a base design."
type DesReleaseVariant {
  "The data needed for assembly of this published design variant."
  pcbAssembly: DesPcbAssembly
  "The data needed for fabrication of this published design variant."
  pcbFabrication: DesPcbFabrication
  "The Bill of Materials (BOM) for this published design variant."
  bom: DesBom
  "The PCB document for this design variant."
  pcb: DesPcb
  "The descriptive label for this design variant."
  name: String!
  "The list of schematic documents for this design variant."
  schematics: [DesSchematic!]!
}

"A variant contains a specific configuration of a base design."
type DesWipVariant {
  designExchange: DesDesignExchange
  "The Bill of Materials (BOM) for this design variant."
  bom: DesBom
  "The PCB document for this design variant."
  pcb: DesPcb
  "The descriptive label for this design variant."
  name: String!
  "The list of schematic documents for this design variant."
  schematics: [DesSchematic!]!
}

"Revision details."
type DesRevisionDetails {
  lifeCycleState: DesLifeCycleState!
  childCount: Int!
  references: [DesDownloadableFile!]!
  parentCount: Int!
  "The node ID."
  id: ID!
  description: String
  comment: String
}

type DesWorkspaceLocation {
  "The name of the location."
  name: String!
  "The preferred Nexar API URL to use for this location."
  apiServiceUrl: String!
  "The preferred files service URL to use for this location."
  filesServiceUrl: String!
}

type DesLibrary {
  "Gets library components."
  components("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: DesComponentFilterInput): DesComponentConnection
  "Gets library component templates."
  componentTemplates("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): DesComponentTemplateConnection
  "Gets library reuse blocks."
  reuseBlocks("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): DesReuseBlockConnection
}

type DesTeam {
  users: [DesUser!]!
  groups: [DesUserGroup!]!
}

"A workflow definition contains a logical sequence of tasks."
type DesWorkflowDefinition {
  "The list of variables need to launch this workflow definition."
  variables: [DesWorkflowVariable!]!
  "The reference identifier for this workflow definition."
  workflowDefinitionId: String!
  "The label for this workflow definition."
  name: String!
  "The account information for who created this workflow definition."
  createdBy: String!
  "The `DateTime` for the creation of this workflow definition."
  createdAt: DateTime!
}

"A workflow manages the execution of a logical sequence of tasks."
type DesWorkflow {
  "The list of variables defined for this workflow."
  variables("An optional list of parameter names to search." names: [String!]): [DesWorkflowVariable!]!
  "The `DateTime` for the most recent changes for this workflow."
  modifiedAt: DateTime!
  "The reference identifier for this workflow."
  workflowId: String!
  "The name of the active task(s) for this workflow."
  state: String
  "The account information for the owner of any action or response needed for this workflow."
  assignee: String!
  "The account information for who created this workflow."
  createdBy: String!
  "The `DateTime` for the creation of this workflow."
  createdAt: DateTime!
  "The `DateTime` for the completion of this workflow."
  endedAt: DateTime
  "The label for this workflow."
  name: String!
  "The reference identifier for definition of this workflow."
  processDefinitionId: String!
  "The label for the definition of this workflow."
  processDefinitionName: String!
  "The current condition of this workflow."
  status: String!
}

"User details with the identifier and nullable extra fields."
type DesUser {
  "Null if the user no longer exists."
  pictureUrl(size: DesUserPictureSize): String
  "Null if the user no longer exists."
  groups: [DesUserGroup!]
  "The internal user ID."
  userId: String!
  "Null if the user no longer exists."
  userName: String
  "Null if the user no longer exists."
  email: String
  "Null if the user no longer exists."
  firstName: String
  "Null if the user no longer exists."
  lastName: String
}

type DesProjectParameter {
  name: String!
  value: String!
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"Describes the file affected by a VCS revision."
type DesVcsRevisionFileChange {
  kind: DesVcsChangeKind!
  path: String!
}

"A design manages all of the schematic, PCB, and BOM content for a project."
type DesDesign {
  "The list of published versions of the design grouped into pages."
  releases("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: DesReleaseFilterInput): DesReleaseConnection
  "The most recent version of the design."
  workInProgress: DesWorkInProgress!
}

"A comment thread contains an initial remark associated with the design and a collection of replies."
type DesCommentThread {
  "The account information for the owner of any action or response to this comment thread."
  assignedTo: DesUser
  "The account information for who created this comment thread."
  createdBy: DesUser!
  "The account information for who most recently modified this comment thread."
  modifiedBy: DesUser!
  "The list of replies associated with this comment thread."
  comments: [DesComment!]!
  "The reference identifier for this comment thread (used by `desCreateComment`, `desDeleteComment`, `desUpdateComment`)."
  commentThreadId: String!
  status: Int!
  "The `DateTime` for the creation of this comment thread."
  createdAt: DateTime!
  "The `DateTime` for the most recent modification of this comment thread."
  modifiedAt: DateTime!
  "The web address to download the screenshot associated with the creation of this comment thread."
  originalStateScreenshotUrl: String
  "The sequence number of this comment thread."
  threadNumber: Int!
  "The information about properties related to this comment thread."
  context: DesCommentContext!
}

type DesLayer {
  name: String!
  thickness: DesSize
  dielectricConstant: Decimal
  copperWeight: DesWeight
  "The copper area."
  copperArea: DesArea
  "The ratio of copper area to PCB area."
  copperRatio: Decimal
  material: String
  nets: [DesNet!]!
  layerType: DesLayerType!
  layerProperties: [DesLayerProperty!]!
}

type DesPosition2D {
  xMm: Decimal!
  yMm: Decimal!
  xMils: Decimal!
  yMils: Decimal!
  x: Int!
  y: Int!
}

type DesRectangle {
  pos1: DesPosition2D!
  pos2: DesPosition2D!
}

"The built-in `Decimal` scalar type."
scalar Decimal

type DesPad {
  padType: DesPadType!
  layer: DesLayer
  net: DesNet
  designator: String
  globalDesignator: String
  radius: Int
  rotation: Decimal
  isPlated: Boolean
  holeSize: DesSize!
  size: DesSize2D!
  shape: DesPrimitiveShape
  position: DesPosition2D!
}

type DesVia {
  layer: DesLayer
  net: DesNet
  beginLayer: DesLayer
  endLayer: DesLayer
  name: String
  holeDiameter: DesSize!
  padDiameter: DesSize!
  shape: DesPrimitiveShape
  position: DesPosition2D!
}

type DesTrack {
  layer: DesLayer
  net: DesNet
  width: DesSize!
  begin: DesPosition2D!
  end: DesPosition2D!
}

type DesFolder {
  name: String!
  description: String!
}

type DesManufacturerPart {
  supplierParts: [DesSupplierPart!]!
  "The Octopart ID."
  octopartId: String
  "The manufacturer company name."
  companyName: String!
  "The part number (MPN)."
  partNumber: String!
  priority: Int!
}

type DesComponentDetails {
  "The list of the parameters describing this component."
  parameters: [DesComponentParameter!]!
  "The list of the symbols used for this component."
  symbols: [DesSymbol!]!
  "The list of the footprints used this component."
  footprints: [DesFootprint!]!
}

"Revision details ID for later use or full details."
type DesRevision {
  "The full revision details."
  details: DesRevisionDetails!
  "The revision details node ID for later use."
  id: ID!
}

type DesModel3D {
  parasolidFile: DesDownloadableFile
}

"A Bill of Materials (BOM) item contains usage information for a unique component on the PCB."
type DesBomItem {
  "The detailed component information for this BOM item."
  component: DesComponent
  "The total number of times this item is used."
  quantity: Decimal!
  "The list of each instance of this BOM item."
  bomItemInstances: [DesBomItemInstance!]!
}

"A workspace provides a flexible and secure method for managing design, manufacturing and supply content."
input DesWorkspaceFilterInput {
  and: [DesWorkspaceFilterInput!]
  or: [DesWorkspaceFilterInput!]
  "The node identifier for the workspace (used by `DesWorkspaceById`)."
  id: StringOperationFilterInput
  "The descriptive label for this workspace."
  name: StringOperationFilterInput
  "The web address of this workspace."
  url: StringOperationFilterInput
  "The summary of this workspace content or purpose."
  description: StringOperationFilterInput
  "Tells if the workspace is the current user default."
  isDefault: BooleanOperationFilterInput
}

"A connection to a list of items."
type DesProjectConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DesProjectEdge!]
  "A flattened list of the nodes."
  nodes: [DesProject!]
  totalCount: Int!
}

"A connection to a list of items."
type DesTaskConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DesTaskEdge!]
  "A flattened list of the nodes."
  nodes: [DesTask!]
  totalCount: Int!
}

"A connection to a list of items."
type DesCollaborationSimulationRevisionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DesCollaborationSimulationRevisionEdge!]
  "A flattened list of the nodes."
  nodes: [DesCollaborationSimulationRevision!]
  totalCount: Int!
}

"A component contains the parametric details of a PCB part."
input DesComponentFilterInput {
  and: [DesComponentFilterInput!]
  or: [DesComponentFilterInput!]
  "The library label for this component."
  name: StringOperationFilterInput
  "The additional information for this component."
  comment: StringOperationFilterInput
  "The summary of function or other performance details for this component."
  description: StringOperationFilterInput
  "The component revision."
  revision: DesRevisionFilterInput
}

"A connection to a list of items."
type DesComponentConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DesComponentEdge!]
  "A flattened list of the nodes."
  nodes: [DesComponent!]
  totalCount: Int!
}

"A connection to a list of items."
type DesComponentTemplateConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DesComponentTemplateEdge!]
  "A flattened list of the nodes."
  nodes: [DesComponentTemplate!]
  totalCount: Int!
}

"A connection to a list of items."
type DesReuseBlockConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DesReuseBlockEdge!]
  "A flattened list of the nodes."
  nodes: [DesReuseBlock!]
  totalCount: Int!
}

"A release is a published version of a design with additional generated files for manufacturing."
input DesReleaseFilterInput {
  and: [DesReleaseFilterInput!]
  or: [DesReleaseFilterInput!]
  "The node identifier for this release (used by `desReleaseById`)."
  id: StringOperationFilterInput
  "The `DateTime` when this release was created."
  createdAt: ComparableDateTimeOperationFilterInput
  "The summary of this release content or purpose."
  description: StringOperationFilterInput
  "The reference identifier for this release."
  releaseId: StringOperationFilterInput
}

"A connection to a list of items."
type DesReleaseConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DesReleaseEdge!]
  "A flattened list of the nodes."
  nodes: [DesRelease!]
  totalCount: Int!
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

"An edge in a connection."
type DesProjectEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesProject!
}

type DesTask implements Node {
  "The assigned user."
  assignee: DesUser!
  "The user who created the task."
  createdBy: DesUser!
  "The user who modified the task."
  modifiedBy: DesUser!
  "The list of task comments."
  comments: [DesComment!]!
  "The node ID."
  id: ID!
  "The task ID shown in Altium 365."
  refId: String!
  "The task name."
  name: String!
  "The task description."
  description: String!
  "The task priority."
  priority: DesTaskPriority!
  "The task status."
  status: DesTaskStatus!
  "The creation date."
  createdAt: DateTime!
  "The last modification date."
  modifiedAt: DateTime!
}

"An edge in a connection."
type DesTaskEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesTask!
}

"*** PROTOTYPE, SUBJECT TO CHANGE ***"
type DesCollaborationSimulationRevision {
  files: [DesCollaborationSimulationFile!]!
  createdBy: DesUser!
  metadata: String!
  createdAt: DateTime!
}

"An edge in a connection."
type DesCollaborationSimulationRevisionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesCollaborationSimulationRevision!
}

"Revision details ID for later use or full details."
input DesRevisionFilterInput {
  and: [DesRevisionFilterInput!]
  or: [DesRevisionFilterInput!]
  "The revision details node ID for later use."
  id: IdOperationFilterInput
}

"An edge in a connection."
type DesComponentEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesComponent!
}

type DesComponentTemplate implements Node {
  "The node ID (used by `desComponentTemplateById`)."
  id: ID!
  name: String!
  description: String!
  folder: DesFolder
  latestRevision: DesComponentTemplateRevision!
}

"An edge in a connection."
type DesComponentTemplateEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesComponentTemplate!
}

type DesReuseBlock implements Node {
  latestRevision: DesReuseBlockRevision!
  revisions: [DesReuseBlockRevision!]!
  "The node identifier for this reuse block (used by `desReuseBlockById`)."
  id: ID!
  name: String!
  description: String!
}

"An edge in a connection."
type DesReuseBlockEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesReuseBlock!
}

"An edge in a connection."
type DesReleaseEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesRelease!
}

input IdOperationFilterInput {
  eq: ID
  neq: ID
  in: [ID]
  nin: [ID]
}

input DesTerminateWorkflowsInput {
  workspaceUrl: String!
  workflowIds: [String!]!
}

type DesTerminateWorkflowsPayload {
  errors: [DesTerminateWorkflowsError!]!
}

input DesLaunchWorkflowInput {
  workspaceUrl: String!
  workflowDefinitionId: String!
  name: String
  "The string variables."
  variables: [DesWorkflowVariableInput!]!
  "The attachment variables."
  attachments: [DesWorkflowAttachmentVariableInput!]
}

type DesLaunchWorkflowPayload {
  id: String!
  status: Int!
}

input DesRemoveUsersFromGroupInput {
  "The group node ID."
  id: ID!
  "User IDs."
  userIds: [String!]!
}

type DesRemoveUsersFromGroupPayload {
  errors: [DesPayloadError!]!
}

input DesAddUsersToGroupInput {
  "The group node ID."
  id: ID!
  "User IDs."
  userIds: [String!]!
}

type DesAddUsersToGroupPayload {
  errors: [DesPayloadError!]!
}

input DesUpdateUserGroupInput {
  "The group node ID."
  id: ID!
  "The group name."
  name: String!
}

type DesUpdateUserGroupPayload {
  errors: [DesPayloadError!]!
}

input DesDeleteUserGroupInput {
  "The group node ID."
  id: ID!
}

type DesDeleteUserGroupPayload {
  errors: [DesPayloadError!]!
}

input DesCreateUserGroupInput {
  workspaceUrl: String!
  name: String!
}

type DesCreateUserGroupPayload {
  id: ID!
}

input DesUpdateUserInput {
  workspaceUrl: String!
  userId: String!
  firstName: String
  lastName: String
}

type DesUpdateUserPayload {
  errors: [DesPayloadError!]!
}

input DesDeleteUserInput {
  workspaceUrl: String!
  userId: String!
}

type DesDeleteUserPayload {
  errors: [DesPayloadError!]!
}

input DesCreateUserInput {
  workspaceUrl: String!
  userName: String!
  password: String!
  firstName: String!
  lastName: String!
  email: String!
}

type DesCreateUserPayload {
  userId: String!
}

input DesUpdateReuseBlockInput {
  id: ID!
  name: String
  description: String
}

type DesUpdateReuseBlockPayload {
  errors: [DesPayloadError!]!
}

input DesUploadCollaborationSimulationInput {
  projectId: ID!
  domain: String!
  projectType: String!
  revision: String!
  comment: String!
  files: [DesCollaborationSimulationFileInput!]!
}

type DesUploadCollaborationSimulationPayload {
  errors: [DesPayloadError!]!
}

input DesUploadProjectInput {
  "The workspace URL."
  workspaceUrl: String!
  "The uploaded zip file ID."
  fileId: String!
  "The project name."
  name: String!
  "The project description."
  description: String
  "The project target folder path."
  folderPath: String
}

type DesUploadProjectPayload {
  "The project ID."
  projectId: ID!
  errors: [DesPayloadError!]!
}

input DesUpdateComponentRevisionParametersInput {
  componentId: ID!
  componentRevisionNamingSchemeId: String
  releaseNote: String
  "Tells to replace all existing parameters. By default parameters are added to existing."
  replaceExisting: Boolean
  parameters: [DesRevisionParameterInput!]!
}

type DesUpdateComponentRevisionParametersPayload {
  componentId: ID!
  errors: [DesPayloadError!]!
}

"Input parameters for `desReleaseComponentTemplate`."
input DesReleaseComponentTemplateInput {
  "The target workspace URL."
  workspaceUrl: String!
  "The target folder path, existing or to be created."
  folder: String!
  "The component template name."
  name: String!
  "The component template content (CMPT format JSON string)."
  contentAsText: String!
  "Optional naming scheme ID."
  revisionNamingSchemeId: String
  "Optional life cycle ID."
  lifeCycleDefinitionId: String
  "Optional comment."
  comment: String
  "Optional description."
  description: String
  "Optional parameters."
  parameters: [DesRevisionParameterInput!]
}

type DesReleaseComponentTemplatePayload {
  componentTemplateId: ID!
  errors: [DesPayloadError!]!
}

input DesReleaseComponentInput {
  workspaceUrl: String!
  componentReleaseFolder: String!
  componentItemName: String!
  componentRevisionNamingSchemeId: String
  componentLifeCycleDefinitionId: String
  componentComment: String
  componentDescription: String
  parameters: [DesRevisionParameterInput!]!
  "The symbol folder path, existing or to be created."
  symbolReleaseFolder: String!
  "The symbol name. Use null to be generated."
  symbolItemName: String
  symbolFiles: [DesReleaseComponentFileInput!]!
  symbolRevisionNamingSchemeId: String
  symbolLifeCycleDefinitionId: String
  "The footprint folder path, existing or to be created."
  footprintReleaseFolder: String!
  "The footprint name. Use null to be generated."
  footprintItemName: String
  footprintFiles: [DesReleaseComponentFileInput!]!
  footprintRevisionNamingSchemeId: String
  footprintLifeCycleDefinitionId: String
}

type DesReleaseComponentPayload {
  errors: [DesPayloadError!]!
}

input DesDeleteCommentThreadInput {
  entityId: ID!
  commentThreadId: String!
}

type DesDeleteCommentThreadPayload {
  errors: [DesPayloadError!]!
}

input DesCreateCommentThreadInput {
  entityId: ID!
  documentId: String!
  text: String!
  objectId: String
  area: DesRectangleInput
  releaseId: String
  documentType: DocumentType!
  associationType: AssociationType!
}

type DesCreateCommentThreadPayload {
  commentThreadId: String!
  commentId: String!
  errors: [DesPayloadError!]!
}

input DesUpdateCommentInput {
  entityId: ID!
  commentThreadId: String!
  commentId: String!
  text: String!
}

type DesUpdateCommentPayload {
  errors: [DesPayloadError!]!
}

input DesDeleteCommentInput {
  entityId: ID!
  commentThreadId: String!
  commentId: String!
}

type DesDeleteCommentPayload {
  errors: [DesPayloadError!]!
}

input DesCreateCommentInput {
  entityId: ID!
  commentThreadId: String!
  text: String!
}

type DesCreateCommentPayload {
  commentId: String!
  errors: [DesPayloadError!]!
}

"*** PROTOTYPE, SUBJECT TO CHANGE ***"
type DesCollaborationSimulationFile {
  fileTypeName: String!
  downloadUrl: String!
}

type DesReuseBlockRevision implements Node {
  pcbSnippet: DesDownloadableFile!
  schematicSnippet: DesDownloadableFile!
  "The node identifier for this reuse block (used by `desReuseBlockRevisionById`)."
  id: ID!
  name: String!
  comment: String!
  description: String!
}

enum DesTaskPriority {
  UNDEFINED
  LOW
  MEDIUM
  HIGH
  HIGHEST
}

type DesManufacturePackageCreationJob {
  id: String!
  createdAt: DateTime!
  payload: DesManufacturePackageCreationJobPayload!
  status: DesJobStatus!
}

enum DesTaskStatus {
  UNDEFINED
  TO_DO
  IN_PROGRESS
  RESOLVED
}

type DesProjectIdPayload {
  id: ID!
}

"Revision naming scheme details obtained by `desLibrary\/revisionNamingSchemes`."
type DesRevisionNamingScheme {
  revisionNamingSchemeId: String!
  name: String!
}

enum DesContentTypeKind {
  COMPONENT
  EMBEDDED_DESIGN
  FPGA_DESIGN
  OPEN_BUS
  PART_CHOICE_LIST
  PCB_COMPONENT
  PCB_DESIGN
  PCB_DOCUMENT
  PCB_BLANK
  PCB_ASSEMBLY
  PCB_MODEL3D
  SCHEMATIC_SHEET
  SCHEMATIC_TEMPLATE
  SIMULATION_MODEL
  SI_MODEL
  SYMBOL
  OUTPUT_JOB
  MORFIK_PACKAGE
  MORFIK_WEB_RESOURCE
  MORFIK_X_APP_DESIGN
  MORFIK_X_APP_IMAGE
  MORFIK_X_APP_SET
  WEB_ITEM
  DXP_ADDON
  DATA_CLASS
  DEVICE_CLASS
  RICH_TEXT
  PREFERENCES
  MODEL3D
  COMPONENT_TEMPLATE
  LAYER_STACK
  BOM_TEMPLATE
  SCRIPT
  PROJECT
  PROJECT_TEMPLATE
  DATA_SHEET
  DRAFTSMAN_DOCUMENT_TEMPLATE
  DRAFTSMAN_SHEET_TEMPLATE
  PROJECT_REVIEW_PACKAGE
  PLM_INSTANCE
  PLM_PUBLISH_TEMPLATE
  PCB_BLOCK
  BINARY_FILE
  DXP_PLATFORM
  DXP_SDK
  DXP_PLUGIN
  BMS_AUTO_GENERATED_COMPONENTS
}

"Revision naming scheme details obtained by `desLibrary\/lifeCycleDefinitions`."
type DesLifeCycleDefinition {
  lifeCycleDefinitionId: String!
  name: String!
}

type DesCreateTaskPayload {
  "The created task."
  task: DesTask!
  errors: [DesPayloadError!]!
}

input DesCreateProjectTaskInput {
  "The project node ID."
  projectId: ID!
  "The new task data."
  task: DesCreateTaskInput!
}

input DesCreateWorkspaceTaskInput {
  "The workspace URL."
  workspaceUrl: String!
  "The new task data."
  task: DesCreateTaskInput!
}

type DesDeleteTaskPayload {
  errors: [DesPayloadError!]!
}

input DesDeleteTaskInput {
  "The task node ID."
  taskId: ID!
}

type DesUpdateTaskPayload {
  errors: [DesPayloadError!]!
}

input DesUpdateTaskInput {
  "The task node ID."
  taskId: ID!
  "New task name or null to keep old."
  name: String
  "New task description or null to keep old."
  description: String
  "New task priority or null to keep old."
  priority: DesTaskPriority
  "New task status or null to keep old."
  status: DesTaskStatus
}

type DesCreateTaskCommentPayload {
  comment: DesComment
  errors: [DesPayloadError!]!
}

input DesCreateTaskCommentInput {
  "The task node ID."
  taskId: ID!
  "The comment text."
  text: String!
}

type DesDeleteTaskCommentPayload {
  errors: [DesPayloadError!]!
}

input DesDeleteTaskCommentInput {
  "The task node ID."
  taskId: ID!
  "The comment ID."
  commentId: String!
}

type DesUpdateTaskCommentPayload {
  errors: [DesPayloadError!]!
}

input DesUpdateTaskCommentInput {
  "The task node ID."
  taskId: ID!
  "The comment ID."
  commentId: String!
  "New comment text."
  text: String!
}

type DesCommentNotification {
  action: String!
  data: DesCommentNotificationData!
}

input DesOnCommentUpdatedInput {
  workspaceUrl: String!
  token: String!
}

type DesPcbAssembly {
  packageName: String!
  pickAndPlace: DesPickAndPlace!
  assemblyDrawings: DesAssemblyDrawings!
  downloadUrl: String!
}

type DesPcbFabrication {
  packageName: String!
  odb: DesOdb!
  ipc2581: DesIpc2581!
  gerber: DesGerber!
  gerberX2: DesGerberX2!
  ncDrill: DesNcDrill!
  testPoints: DesTestPoints!
  downloadUrl: String!
}

"A PCB contains design details of the physical product."
type DesPcb {
  "The details of the layer structure of this PCB."
  layerStack: DesStackup
  "The outline of this PCB."
  outline: DesPolygon!
  "The list of all part instances used in this PCB grouped into pages."
  designItems("An optional array of designators to search." designators: [String!] "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): DesDesignItemConnection
  "The list of all electrically connected regions in this PCB."
  nets("An optional array of names to search." names: [String!]): [DesNet!]!
  "The list of all part connection targets in this PCB."
  pads: [DesPad!]!
  "The list of all conductor segments in this PCB."
  tracks(where: DesTrackFilterInput): [DesTrack!]!
  "The list of all multiple layer connections in this PCB."
  vias: [DesVia!]!
  "The list of all comment threads related to this PCB."
  commentThreads: [DesCommentThread!]!
  "The reference identifier for this PCB."
  documentId: String!
  "The dimensions of the PCB outline."
  size: DesSize2D!
  "The total area contained by the PCB outline."
  area: DesArea!
  "The location of the coordinate system origin."
  origin: DesPosition2D!
}

"A schematic contains the design parts and logical connections."
type DesSchematic {
  "The list of all part instances used in this schematic grouped into pages."
  designItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): DesDesignItemConnection
  "The list of all logical part connections in this schematic."
  nets("An optional array of names to search." names: [String!]): [DesNet!]!
  "The list of all comment threads related to this schematic."
  commentThreads: [DesCommentThread!]!
  "The reference identifier for this schematic."
  documentId: String!
  parentIds: [String!]!
  units: Int!
}

type DesDesignExchange {
  models3D: [DesModel3D!]!
  downloadableFile: DesDownloadableFile!
}

type DesLifeCycleState {
  name: String!
}

type DesDownloadableFile {
  fileName: String!
  relativePath: String!
  downloadUrl: String!
}

type DesSharedWithMe {
  projects: [DesProject!]!
  manufacturePackages: [DesManufacturePackage!]!
  commentThreads: [DesCommentThread!]!
}

"Nexar supply part data for internal use only."
type SupPartExtras {
  alternatives(first: Int! = 100): [SupPartExtras!]!
  partId: String!
  description: String
  isRohsCompliant: Boolean
  confidence: Float
  datasheetUrls: [String!]
  lifeCycle: SupPartLifeCycle!
  parameters: [SupPartExtrasParameter!]
  technicalDetails: [SupPartExtrasTechnicalDetail!]
}

type DesCreateManufacturePackagePayload {
  jobId: ID!
  errors: [DesPayloadError!]!
}

input DesCreateManufacturePackageInput {
  "The ID of the project to create a manufacture package from."
  projectId: ID!
  "The Git commit which determines the version of the project to use. If not provided, the latest version is used."
  vcsRevisionId: String
  "The name for the package."
  name: String!
  "A description for the package."
  description: String
  "The email addresses of the manufacturers to share the package with."
  shareWith: [String!]!
  "The project variant to use when creating the package. If not provided, the default variant is used."
  variantName: String
  "A webhook URL that will receive a POST request when the manufacture package has been created and shared."
  callbackUrl: String
}

type DesWorkflowVariable {
  valueType: String
  constraint: String
  name: String!
  value: String!
}

enum DesUserPictureSize {
  SIZE48X48
  SIZE70X70
  SIZE128X128
  ORIGINAL
}

"Describes VCS item change kind."
enum DesVcsChangeKind {
  NONE
  ADDED
  DELETED
  MODIFIED
}

"The most recent version of a design."
type DesWorkInProgress {
  "The list of variations contained in this design."
  variants(where: DesWipVariantFilterInput): [DesWipVariant!]!
}

"A comment is one of remarks associated with a comment thread or task."
type DesComment {
  "The user who created the comment."
  createdBy: DesUser!
  "The user who modified the comment."
  modifiedBy: DesUser!
  "The users mentioned by this comment."
  mentions: [DesMention!]!
  "The comment reference ID."
  commentId: String!
  "The comment text."
  text: String!
  "The creation date."
  createdAt: DateTime!
  "The last modification date."
  modifiedAt: DateTime!
}

"A comment context provides additional information about associations for a comment thread."
type DesCommentContext {
  "The reference identifier for the document associated with a comment thread."
  documentId: String
  "The reference identifier for an object associated with a comment thread."
  objectId: String
  "The area associated with a comment thread."
  area: DesRectangle!
  "The release identifier associated with a comment thread."
  releaseId: String
}

type DesSize {
  x: Decimal!
  xMm: Decimal!
  xMils: Decimal!
}

type DesWeight {
  x: Decimal!
  gram: Decimal!
  ounce: Decimal!
}

type DesArea {
  x: Float!
  xMm2: Decimal!
  xMils2: Decimal!
}

type DesNet {
  name: String!
  cumulativeLength: DesSize!
  layers: [DesLayer!]!
  pads: [DesPad!]!
  vias: [DesVia!]!
  tracks(where: DesTrackFilterInput): [DesTrack!]!
}

enum DesLayerType {
  ABSTRACT
  UNKNOWN
  PHYSICAL
  DIELECTRIC
  OVERLAY
  SOLDER_MASK
  BIKINI_COVERLAY
  PASTE_MASK
  MECHANICAL
  FOIL
  PLANE
  SIGNAL
  SURFACE_FINISH
  CORE
  PREPREG
  PLATING
  ADHESIVE
  STIFFENER
  MISC
  PE_LAYER
  CONDUCTIVE
  NON_CONDUCTIVE
}

type DesLayerProperty {
  name: String!
  text: String!
  size: DesSize
}

enum DesPadType {
  SMD
  FREE
}

type DesSize2D {
  x: Int!
  y: Int!
  xMm: Decimal!
  xMils: Decimal!
  yMm: Decimal!
  yMils: Decimal!
}

enum DesPrimitiveShape {
  ROUND
  RECTANGLE
  ROUNDED_RECTANGLE
}

type DesSupplierPart {
  "The supplier company name."
  companyName: String!
  "The part number (SKU)."
  partNumber: String!
  "Available for library components."
  prices: [DesSupplierPrice!]
  "Available for library components."
  stocks: [DesSupplierStock!]
}

type DesComponentParameter {
  type: DesParameterType!
  name: String!
  value: String!
}

type DesSymbol {
  "The list of pins."
  pins: [DesPin!]!
  imageFullSizeUrl: String!
  imageThumbnailUrl: String!
  dataDownloadUrl: String!
  folder: DesFolder
  guid: String!
  name: String!
  comment: String!
  description: String!
}

type DesFootprint {
  pins: [DesPin!]! @deprecated(reason: "Not implemented and may be removed.")
  imageFullSizeUrl: String!
  imageThumbnailUrl: String!
  dataDownloadUrl: String!
  folder: DesFolder
  guid: String!
  name: String!
  comment: String!
  description: String!
}

"A Bill of Materials (BOM) item instance contains information for one specific use case of the item."
type DesBomItemInstance {
  "The unique label for this item."
  designator: String!
  "The variant use status for this item."
  isFitted: Boolean!
}

type DesComponentTemplateRevision {
  name: String!
  createdAt: DateTime!
  comment: String!
  description: String!
  downloadableFile: DesDownloadableFile!
}

"A connection to a list of items."
type DesDesignItemConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [DesDesignItemEdge!]
  "A flattened list of the nodes."
  nodes: [DesDesignItem!]
  totalCount: Int!
}

"A variant contains a specific configuration of a base design."
input DesWipVariantFilterInput {
  and: [DesWipVariantFilterInput!]
  or: [DesWipVariantFilterInput!]
  "The descriptive label for this design variant."
  name: StringOperationFilterInput
  "The list of schematic documents for this design variant."
  schematics: ListFilterInputTypeOfDesSchematicFilterInput
}

"An edge in a connection."
type DesDesignItemEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: DesDesignItem!
}

type DesPin {
  name: String!
  description: String!
  designator: String!
  electricalType: DesPinElectricalType!
}

enum DesParameterType {
  NONE
  TEXT
  VOLTAGE
  CURRENT
  RESISTANCE
  CONDUCTANCE
  CAPACITANCE
  CHARGE
  INDUCTANCE
  POWER
  IMPEDANCE
  FREQUENCY
  TEMPERATURE
  DECIBELS
  PERCENT
  LENGTH
  MASS
  TIME
}

type DesSupplierStock {
  locationName: String!
  quantity: Decimal!
}

type DesSupplierPrice {
  currency: String!
  price: Decimal!
  breakQuantity: Int!
}

"A reference to a user in a comment."
type DesMention {
  "The mentioned user."
  user: DesUser!
}

type SupPartExtrasTechnicalDetail {
  name: String!
  value: String!
}

type SupPartExtrasParameter {
  name: String!
  unit: String
  value: [String!]
}

enum SupPartLifeCycle {
  UNKNOWN
  NEW
  ACTIVE
  NRFND
  EOL
  DISCONTINUED
  ACTIVE_UNCONFIRMED
  DISCONTINUED_UNCONFIRMED
  CONTACT_MFR
  TRANSFERRED
}

type DesPolygon {
  vertices: [DesPosition2D!]!
}

type DesStackup {
  stackupType: String!
  layerTypes: [DesLayerType!]!
  roughnessType: String!
  roughnessFactorSR: String!
  roughnessFactorRF: String!
  stacks: [DesStack!]!
}

type DesTestPoints {
  testPointFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesNcDrill {
  ncDrillFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesGerberX2 {
  gerberX2Files: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesGerber {
  gerberFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesIpc2581 {
  ipc2581Files: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesOdb {
  odbFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesAssemblyDrawings {
  assemblyDrawingFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesPickAndPlace {
  pickAndPlaceFiles: [DesDownloadableFile!]!
  packageName: String
  downloadUrl: String
}

type DesCommentNotificationData {
  projectId: String!
  documentId: String
  documentName: String
  commentThreadId: String!
  threadDate: String!
  threadData: String
  threadStatus: String
  commentId: String!
  commentAuthor: String
  commentDate: String!
  commentText: String
}

input DesCreateTaskInput {
  "New task name."
  name: String!
  "New task description."
  description: String!
  "Optional task priority."
  priority: DesTaskPriority
  "Optional task status."
  status: DesTaskStatus
}

enum DesJobStatus {
  PENDING
  PROCESSING
  DONE
  ERROR
}

type DesManufacturePackageCreationJobPayload {
  packageId: ID
  errors: [DesPayloadError!]!
}

enum AssociationType {
  COMPONENT
  TRACK
  VIA
  AREA
}

enum DocumentType {
  SCHEMATIC
  PCB
}

input DesRectangleInput {
  pos1: DesPosition2DInput!
  pos2: DesPosition2DInput!
}

input DesReleaseComponentFileInput {
  "Uploaded file ID."
  fileId: String!
  "Relative path of the source file."
  relativePath: String!
}

input DesRevisionParameterInput {
  name: String!
  value: String!
}

input DesCollaborationSimulationFileInput {
  fileId: String!
  fileType: String!
  fileName: String!
}

type DesPayloadError {
  message: String!
}

input DesWorkflowAttachmentVariableInput {
  "The variable name."
  name: String!
  "Uploaded file references."
  files: [String!]!
}

input DesWorkflowVariableInput {
  valueType: String
  constraint: String
  name: String!
  value: String!
}

type DesTerminateWorkflowsError {
  id: String!
  message: String!
}

input DesPosition2DInput {
  x: Int!
  y: Int!
}

type DesStack {
  name: String!
  layers: [DesLayer!]!
}

enum DesPinElectricalType {
  INPUT
  IO
  OUTPUT
  OPEN_COLLECTOR
  PASSIVE
  HI_Z
  OPEN_EMITTER
  POWER
}

directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the resolver shall be executed.By default the resolver is executed after the policy has determined that the current user is allowed to access the field." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on SCHEMA | OBJECT | FIELD_DEFINITION