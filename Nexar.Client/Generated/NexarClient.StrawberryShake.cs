// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public static partial class NexarClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::Nexar.Client.State.NexarClientStoreAccessor> AddNexarClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::Nexar.Client.State.NexarClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.CreateCommentThreadMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.DeleteCommentThreadMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.CreateCommentMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.DeleteCommentMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.UpdateCommentMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetWorkspacesQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetProjectInfoQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetProjectsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetDesignItemsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetPcbModelQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetPcbCommentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.NexarClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.INexarClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::Nexar.Client.State.NexarClientStoreAccessor>("NexarClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("NexarClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesWorkspaceEntity, global::Nexar.Client.GetWorkspaces_DesWorkspaces_DesWorkspace>, global::Nexar.Client.State.GetWorkspaces_DesWorkspaces_DesWorkspaceFromDesWorkspaceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, global::Nexar.Client.GetProjects_DesProjects_Nodes_DesProject>, global::Nexar.Client.State.GetProjects_DesProjects_Nodes_DesProjectFromDesProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, global::Nexar.Client.GetDesignItems_DesProjectById_DesProject>, global::Nexar.Client.State.GetDesignItems_DesProjectById_DesProjectFromDesProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesDesignItemEntity, global::Nexar.Client.GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem>, global::Nexar.Client.State.GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItemFromDesDesignItemEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, global::Nexar.Client.GetPcbModel_DesProjectById_DesProject>, global::Nexar.Client.State.GetPcbModel_DesProjectById_DesProjectFromDesProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, global::Nexar.Client.GetPcbComments_DesProjectById_DesProject>, global::Nexar.Client.State.GetPcbComments_DesProjectById_DesProjectFromDesProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesDocumentTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesCommentContextTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesLayerTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesPadTypeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesPrimitiveShapeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesCreateCommentThreadInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesRectangleInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesPosition2DInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesDeleteCommentThreadInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesCreateCommentInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesDeleteCommentInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::Nexar.Client.DesUpdateCommentInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.ICreateCommentThreadResult>, global::Nexar.Client.State.CreateCommentThreadResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.ICreateCommentThreadResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.ICreateCommentThreadMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.ICreateCommentThreadResult>, global::Nexar.Client.State.CreateCommentThreadBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.ICreateCommentThreadResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.ICreateCommentThreadResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.ICreateCommentThreadResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.CreateCommentThreadMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.ICreateCommentThreadMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.CreateCommentThreadMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IDeleteCommentThreadResult>, global::Nexar.Client.State.DeleteCommentThreadResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IDeleteCommentThreadResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.IDeleteCommentThreadMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IDeleteCommentThreadResult>, global::Nexar.Client.State.DeleteCommentThreadBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.IDeleteCommentThreadResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.IDeleteCommentThreadResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IDeleteCommentThreadResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.DeleteCommentThreadMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.IDeleteCommentThreadMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.DeleteCommentThreadMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.ICreateCommentResult>, global::Nexar.Client.State.CreateCommentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.ICreateCommentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.ICreateCommentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.ICreateCommentResult>, global::Nexar.Client.State.CreateCommentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.ICreateCommentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.ICreateCommentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.ICreateCommentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.CreateCommentMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.ICreateCommentMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.CreateCommentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IDeleteCommentResult>, global::Nexar.Client.State.DeleteCommentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IDeleteCommentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.IDeleteCommentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IDeleteCommentResult>, global::Nexar.Client.State.DeleteCommentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.IDeleteCommentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.IDeleteCommentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IDeleteCommentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.DeleteCommentMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.IDeleteCommentMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.DeleteCommentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IUpdateCommentResult>, global::Nexar.Client.State.UpdateCommentResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IUpdateCommentResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.IUpdateCommentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IUpdateCommentResult>, global::Nexar.Client.State.UpdateCommentBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.IUpdateCommentResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.IUpdateCommentResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IUpdateCommentResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.UpdateCommentMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.IUpdateCommentMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.UpdateCommentMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetWorkspacesResult>, global::Nexar.Client.State.GetWorkspacesResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetWorkspacesResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.IGetWorkspacesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetWorkspacesResult>, global::Nexar.Client.State.GetWorkspacesBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.IGetWorkspacesResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetWorkspacesResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetWorkspacesResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.GetWorkspacesQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.IGetWorkspacesQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetWorkspacesQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetProjectInfoResult>, global::Nexar.Client.State.GetProjectInfoResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetProjectInfoResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.IGetProjectInfoQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetProjectInfoResult>, global::Nexar.Client.State.GetProjectInfoBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.IGetProjectInfoResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetProjectInfoResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetProjectInfoResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.GetProjectInfoQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.IGetProjectInfoQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetProjectInfoQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetProjectsResult>, global::Nexar.Client.State.GetProjectsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetProjectsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.IGetProjectsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetProjectsResult>, global::Nexar.Client.State.GetProjectsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.IGetProjectsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetProjectsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetProjectsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.GetProjectsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.IGetProjectsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetProjectsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetDesignItemsResult>, global::Nexar.Client.State.GetDesignItemsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetDesignItemsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.IGetDesignItemsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetDesignItemsResult>, global::Nexar.Client.State.GetDesignItemsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.IGetDesignItemsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetDesignItemsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetDesignItemsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.GetDesignItemsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.IGetDesignItemsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetDesignItemsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetPcbModelResult>, global::Nexar.Client.State.GetPcbModelResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetPcbModelResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.IGetPcbModelQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetPcbModelResult>, global::Nexar.Client.State.GetPcbModelBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.IGetPcbModelResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetPcbModelResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetPcbModelResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.GetPcbModelQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.IGetPcbModelQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetPcbModelQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetPcbCommentsResult>, global::Nexar.Client.State.GetPcbCommentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetPcbCommentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.IGetPcbCommentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetPcbCommentsResult>, global::Nexar.Client.State.GetPcbCommentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::Nexar.Client.IGetPcbCommentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetPcbCommentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetPcbCommentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.GetPcbCommentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.IGetPcbCommentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.GetPcbCommentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::Nexar.Client.State.NexarClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.NexarClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::Nexar.Client.INexarClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::Nexar.Client.NexarClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace Nexar.Client
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentThreadResult : global::System.IEquatable<CreateCommentThreadResult>, ICreateCommentThreadResult
    {
        public CreateCommentThreadResult(global::Nexar.Client.ICreateCommentThread_DesCreateCommentThread desCreateCommentThread)
        {
            DesCreateCommentThread = desCreateCommentThread;
        }

        public global::Nexar.Client.ICreateCommentThread_DesCreateCommentThread DesCreateCommentThread { get; }

        public virtual global::System.Boolean Equals(CreateCommentThreadResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DesCreateCommentThread.Equals(other.DesCreateCommentThread));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCommentThreadResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DesCreateCommentThread.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentThread_DesCreateCommentThread_DesCreateCommentThreadPayload : global::System.IEquatable<CreateCommentThread_DesCreateCommentThread_DesCreateCommentThreadPayload>, ICreateCommentThread_DesCreateCommentThread_DesCreateCommentThreadPayload
    {
        public CreateCommentThread_DesCreateCommentThread_DesCreateCommentThreadPayload(global::System.String commentThreadId, global::System.String commentId, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.ICreateCommentThread_DesCreateCommentThread_Errors> errors)
        {
            CommentThreadId = commentThreadId;
            CommentId = commentId;
            Errors = errors;
        }

        public global::System.String CommentThreadId { get; }

        public global::System.String CommentId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.ICreateCommentThread_DesCreateCommentThread_Errors> Errors { get; }

        public virtual global::System.Boolean Equals(CreateCommentThread_DesCreateCommentThread_DesCreateCommentThreadPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CommentThreadId.Equals(other.CommentThreadId)) && CommentId.Equals(other.CommentId) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCommentThread_DesCreateCommentThread_DesCreateCommentThreadPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CommentThreadId.GetHashCode();
                hash ^= 397 * CommentId.GetHashCode();
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentThread_DesCreateCommentThread_Errors_DesPayloadError : global::System.IEquatable<CreateCommentThread_DesCreateCommentThread_Errors_DesPayloadError>, ICreateCommentThread_DesCreateCommentThread_Errors_DesPayloadError
    {
        public CreateCommentThread_DesCreateCommentThread_Errors_DesPayloadError(global::System.String message)
        {
            Message = message;
        }

        public global::System.String Message { get; }

        public virtual global::System.Boolean Equals(CreateCommentThread_DesCreateCommentThread_Errors_DesPayloadError? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Message.Equals(other.Message));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCommentThread_DesCreateCommentThread_Errors_DesPayloadError)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Message.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateCommentThreadResult
    {
        public global::Nexar.Client.ICreateCommentThread_DesCreateCommentThread DesCreateCommentThread { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateCommentThread_DesCreateCommentThread
    {
        public global::System.String CommentThreadId { get; }

        public global::System.String CommentId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.ICreateCommentThread_DesCreateCommentThread_Errors> Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateCommentThread_DesCreateCommentThread_DesCreateCommentThreadPayload : ICreateCommentThread_DesCreateCommentThread
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateCommentThread_DesCreateCommentThread_Errors
    {
        public global::System.String Message { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateCommentThread_DesCreateCommentThread_Errors_DesPayloadError : ICreateCommentThread_DesCreateCommentThread_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentThreadResult : global::System.IEquatable<DeleteCommentThreadResult>, IDeleteCommentThreadResult
    {
        public DeleteCommentThreadResult(global::Nexar.Client.IDeleteCommentThread_DesDeleteCommentThread desDeleteCommentThread)
        {
            DesDeleteCommentThread = desDeleteCommentThread;
        }

        public global::Nexar.Client.IDeleteCommentThread_DesDeleteCommentThread DesDeleteCommentThread { get; }

        public virtual global::System.Boolean Equals(DeleteCommentThreadResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DesDeleteCommentThread.Equals(other.DesDeleteCommentThread));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteCommentThreadResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DesDeleteCommentThread.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentThread_DesDeleteCommentThread_DesDeleteCommentThreadPayload : global::System.IEquatable<DeleteCommentThread_DesDeleteCommentThread_DesDeleteCommentThreadPayload>, IDeleteCommentThread_DesDeleteCommentThread_DesDeleteCommentThreadPayload
    {
        public DeleteCommentThread_DesDeleteCommentThread_DesDeleteCommentThreadPayload(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IDeleteCommentThread_DesDeleteCommentThread_Errors> errors)
        {
            Errors = errors;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IDeleteCommentThread_DesDeleteCommentThread_Errors> Errors { get; }

        public virtual global::System.Boolean Equals(DeleteCommentThread_DesDeleteCommentThread_DesDeleteCommentThreadPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteCommentThread_DesDeleteCommentThread_DesDeleteCommentThreadPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentThread_DesDeleteCommentThread_Errors_DesPayloadError : global::System.IEquatable<DeleteCommentThread_DesDeleteCommentThread_Errors_DesPayloadError>, IDeleteCommentThread_DesDeleteCommentThread_Errors_DesPayloadError
    {
        public DeleteCommentThread_DesDeleteCommentThread_Errors_DesPayloadError(global::System.String message)
        {
            Message = message;
        }

        public global::System.String Message { get; }

        public virtual global::System.Boolean Equals(DeleteCommentThread_DesDeleteCommentThread_Errors_DesPayloadError? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Message.Equals(other.Message));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteCommentThread_DesDeleteCommentThread_Errors_DesPayloadError)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Message.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteCommentThreadResult
    {
        public global::Nexar.Client.IDeleteCommentThread_DesDeleteCommentThread DesDeleteCommentThread { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteCommentThread_DesDeleteCommentThread
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IDeleteCommentThread_DesDeleteCommentThread_Errors> Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteCommentThread_DesDeleteCommentThread_DesDeleteCommentThreadPayload : IDeleteCommentThread_DesDeleteCommentThread
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteCommentThread_DesDeleteCommentThread_Errors
    {
        public global::System.String Message { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteCommentThread_DesDeleteCommentThread_Errors_DesPayloadError : IDeleteCommentThread_DesDeleteCommentThread_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentResult : global::System.IEquatable<CreateCommentResult>, ICreateCommentResult
    {
        public CreateCommentResult(global::Nexar.Client.ICreateComment_DesCreateComment desCreateComment)
        {
            DesCreateComment = desCreateComment;
        }

        public global::Nexar.Client.ICreateComment_DesCreateComment DesCreateComment { get; }

        public virtual global::System.Boolean Equals(CreateCommentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DesCreateComment.Equals(other.DesCreateComment));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateCommentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DesCreateComment.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateComment_DesCreateComment_DesCreateCommentPayload : global::System.IEquatable<CreateComment_DesCreateComment_DesCreateCommentPayload>, ICreateComment_DesCreateComment_DesCreateCommentPayload
    {
        public CreateComment_DesCreateComment_DesCreateCommentPayload(global::System.String commentId, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.ICreateComment_DesCreateComment_Errors> errors)
        {
            CommentId = commentId;
            Errors = errors;
        }

        public global::System.String CommentId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.ICreateComment_DesCreateComment_Errors> Errors { get; }

        public virtual global::System.Boolean Equals(CreateComment_DesCreateComment_DesCreateCommentPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CommentId.Equals(other.CommentId)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateComment_DesCreateComment_DesCreateCommentPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CommentId.GetHashCode();
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateComment_DesCreateComment_Errors_DesPayloadError : global::System.IEquatable<CreateComment_DesCreateComment_Errors_DesPayloadError>, ICreateComment_DesCreateComment_Errors_DesPayloadError
    {
        public CreateComment_DesCreateComment_Errors_DesPayloadError(global::System.String message)
        {
            Message = message;
        }

        public global::System.String Message { get; }

        public virtual global::System.Boolean Equals(CreateComment_DesCreateComment_Errors_DesPayloadError? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Message.Equals(other.Message));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CreateComment_DesCreateComment_Errors_DesPayloadError)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Message.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateCommentResult
    {
        public global::Nexar.Client.ICreateComment_DesCreateComment DesCreateComment { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateComment_DesCreateComment
    {
        public global::System.String CommentId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.ICreateComment_DesCreateComment_Errors> Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateComment_DesCreateComment_DesCreateCommentPayload : ICreateComment_DesCreateComment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateComment_DesCreateComment_Errors
    {
        public global::System.String Message { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateComment_DesCreateComment_Errors_DesPayloadError : ICreateComment_DesCreateComment_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentResult : global::System.IEquatable<DeleteCommentResult>, IDeleteCommentResult
    {
        public DeleteCommentResult(global::Nexar.Client.IDeleteComment_DesDeleteComment desDeleteComment)
        {
            DesDeleteComment = desDeleteComment;
        }

        public global::Nexar.Client.IDeleteComment_DesDeleteComment DesDeleteComment { get; }

        public virtual global::System.Boolean Equals(DeleteCommentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DesDeleteComment.Equals(other.DesDeleteComment));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteCommentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DesDeleteComment.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteComment_DesDeleteComment_DesDeleteCommentPayload : global::System.IEquatable<DeleteComment_DesDeleteComment_DesDeleteCommentPayload>, IDeleteComment_DesDeleteComment_DesDeleteCommentPayload
    {
        public DeleteComment_DesDeleteComment_DesDeleteCommentPayload(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IDeleteComment_DesDeleteComment_Errors> errors)
        {
            Errors = errors;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IDeleteComment_DesDeleteComment_Errors> Errors { get; }

        public virtual global::System.Boolean Equals(DeleteComment_DesDeleteComment_DesDeleteCommentPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteComment_DesDeleteComment_DesDeleteCommentPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteComment_DesDeleteComment_Errors_DesPayloadError : global::System.IEquatable<DeleteComment_DesDeleteComment_Errors_DesPayloadError>, IDeleteComment_DesDeleteComment_Errors_DesPayloadError
    {
        public DeleteComment_DesDeleteComment_Errors_DesPayloadError(global::System.String message)
        {
            Message = message;
        }

        public global::System.String Message { get; }

        public virtual global::System.Boolean Equals(DeleteComment_DesDeleteComment_Errors_DesPayloadError? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Message.Equals(other.Message));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeleteComment_DesDeleteComment_Errors_DesPayloadError)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Message.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteCommentResult
    {
        public global::Nexar.Client.IDeleteComment_DesDeleteComment DesDeleteComment { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteComment_DesDeleteComment
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IDeleteComment_DesDeleteComment_Errors> Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteComment_DesDeleteComment_DesDeleteCommentPayload : IDeleteComment_DesDeleteComment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteComment_DesDeleteComment_Errors
    {
        public global::System.String Message { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteComment_DesDeleteComment_Errors_DesPayloadError : IDeleteComment_DesDeleteComment_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class UpdateCommentResult : global::System.IEquatable<UpdateCommentResult>, IUpdateCommentResult
    {
        public UpdateCommentResult(global::Nexar.Client.IUpdateComment_DesUpdateComment desUpdateComment)
        {
            DesUpdateComment = desUpdateComment;
        }

        public global::Nexar.Client.IUpdateComment_DesUpdateComment DesUpdateComment { get; }

        public virtual global::System.Boolean Equals(UpdateCommentResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DesUpdateComment.Equals(other.DesUpdateComment));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateCommentResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DesUpdateComment.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class UpdateComment_DesUpdateComment_DesUpdateCommentPayload : global::System.IEquatable<UpdateComment_DesUpdateComment_DesUpdateCommentPayload>, IUpdateComment_DesUpdateComment_DesUpdateCommentPayload
    {
        public UpdateComment_DesUpdateComment_DesUpdateCommentPayload(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IUpdateComment_DesUpdateComment_Errors> errors)
        {
            Errors = errors;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IUpdateComment_DesUpdateComment_Errors> Errors { get; }

        public virtual global::System.Boolean Equals(UpdateComment_DesUpdateComment_DesUpdateCommentPayload? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateComment_DesUpdateComment_DesUpdateCommentPayload)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class UpdateComment_DesUpdateComment_Errors_DesPayloadError : global::System.IEquatable<UpdateComment_DesUpdateComment_Errors_DesPayloadError>, IUpdateComment_DesUpdateComment_Errors_DesPayloadError
    {
        public UpdateComment_DesUpdateComment_Errors_DesPayloadError(global::System.String message)
        {
            Message = message;
        }

        public global::System.String Message { get; }

        public virtual global::System.Boolean Equals(UpdateComment_DesUpdateComment_Errors_DesPayloadError? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Message.Equals(other.Message));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((UpdateComment_DesUpdateComment_Errors_DesPayloadError)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Message.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IUpdateCommentResult
    {
        public global::Nexar.Client.IUpdateComment_DesUpdateComment DesUpdateComment { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IUpdateComment_DesUpdateComment
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IUpdateComment_DesUpdateComment_Errors> Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IUpdateComment_DesUpdateComment_DesUpdateCommentPayload : IUpdateComment_DesUpdateComment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IUpdateComment_DesUpdateComment_Errors
    {
        public global::System.String Message { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IUpdateComment_DesUpdateComment_Errors_DesPayloadError : IUpdateComment_DesUpdateComment_Errors
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetWorkspacesResult : global::System.IEquatable<GetWorkspacesResult>, IGetWorkspacesResult
    {
        public GetWorkspacesResult(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetWorkspaces_DesWorkspaces> desWorkspaces)
        {
            DesWorkspaces = desWorkspaces;
        }

        /// <summary>
        /// Search for workspaces associated with this account.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetWorkspaces_DesWorkspaces> DesWorkspaces { get; }

        public virtual global::System.Boolean Equals(GetWorkspacesResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(DesWorkspaces, other.DesWorkspaces));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWorkspacesResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var DesWorkspaces_elm in DesWorkspaces)
                {
                    hash ^= 397 * DesWorkspaces_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A workspace provides a flexible and secure method for managing design, manufacturing and supply content.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetWorkspaces_DesWorkspaces_DesWorkspace : global::System.IEquatable<GetWorkspaces_DesWorkspaces_DesWorkspace>, IGetWorkspaces_DesWorkspaces_DesWorkspace
    {
        public GetWorkspaces_DesWorkspaces_DesWorkspace(global::System.String id, global::System.String url, global::System.String name, global::System.String? description, global::System.Boolean isDefault, global::Nexar.Client.IGetWorkspaces_DesWorkspaces_Location location)
        {
            Id = id;
            Url = url;
            Name = name;
            Description = description;
            IsDefault = isDefault;
            Location = location;
        }

        /// <summary>
        /// The node identifier for the workspace (used by `DesWorkspaceById`).
        /// </summary>
        public global::System.String Id { get; }

        /// <summary>
        /// The web address of this workspace.
        /// </summary>
        public global::System.String Url { get; }

        /// <summary>
        /// The descriptive label for this workspace.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The summary of this workspace content or purpose.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// Tells if the workspace is the current user default.
        /// </summary>
        public global::System.Boolean IsDefault { get; }

        /// <summary>
        /// The location of this workspace.
        /// </summary>
        public global::Nexar.Client.IGetWorkspaces_DesWorkspaces_Location Location { get; }

        public virtual global::System.Boolean Equals(GetWorkspaces_DesWorkspaces_DesWorkspace? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Url.Equals(other.Url) && Name.Equals(other.Name) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && IsDefault == other.IsDefault && Location.Equals(other.Location);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWorkspaces_DesWorkspaces_DesWorkspace)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Url.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * IsDefault.GetHashCode();
                hash ^= 397 * Location.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetWorkspaces_DesWorkspaces_Location_DesWorkspaceLocation : global::System.IEquatable<GetWorkspaces_DesWorkspaces_Location_DesWorkspaceLocation>, IGetWorkspaces_DesWorkspaces_Location_DesWorkspaceLocation
    {
        public GetWorkspaces_DesWorkspaces_Location_DesWorkspaceLocation(global::System.String name, global::System.String apiServiceUrl, global::System.String filesServiceUrl)
        {
            Name = name;
            ApiServiceUrl = apiServiceUrl;
            FilesServiceUrl = filesServiceUrl;
        }

        /// <summary>
        /// The name of the location.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The preferred Nexar API URL to use for this location.
        /// </summary>
        public global::System.String ApiServiceUrl { get; }

        /// <summary>
        /// The preferred files service URL to use for this location.
        /// </summary>
        public global::System.String FilesServiceUrl { get; }

        public virtual global::System.Boolean Equals(GetWorkspaces_DesWorkspaces_Location_DesWorkspaceLocation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && ApiServiceUrl.Equals(other.ApiServiceUrl) && FilesServiceUrl.Equals(other.FilesServiceUrl);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetWorkspaces_DesWorkspaces_Location_DesWorkspaceLocation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * ApiServiceUrl.GetHashCode();
                hash ^= 397 * FilesServiceUrl.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetWorkspacesResult
    {
        /// <summary>
        /// Search for workspaces associated with this account.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetWorkspaces_DesWorkspaces> DesWorkspaces { get; }
    }

    /// <summary>
    /// A workspace provides a flexible and secure method for managing design, manufacturing and supply content.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetWorkspaces_DesWorkspaces
    {
        /// <summary>
        /// The node identifier for the workspace (used by `DesWorkspaceById`).
        /// </summary>
        public global::System.String Id { get; }

        /// <summary>
        /// The web address of this workspace.
        /// </summary>
        public global::System.String Url { get; }

        /// <summary>
        /// The descriptive label for this workspace.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The summary of this workspace content or purpose.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// Tells if the workspace is the current user default.
        /// </summary>
        public global::System.Boolean IsDefault { get; }

        /// <summary>
        /// The location of this workspace.
        /// </summary>
        public global::Nexar.Client.IGetWorkspaces_DesWorkspaces_Location Location { get; }
    }

    /// <summary>
    /// A workspace provides a flexible and secure method for managing design, manufacturing and supply content.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetWorkspaces_DesWorkspaces_DesWorkspace : IGetWorkspaces_DesWorkspaces
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetWorkspaces_DesWorkspaces_Location
    {
        /// <summary>
        /// The name of the location.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The preferred Nexar API URL to use for this location.
        /// </summary>
        public global::System.String ApiServiceUrl { get; }

        /// <summary>
        /// The preferred files service URL to use for this location.
        /// </summary>
        public global::System.String FilesServiceUrl { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetWorkspaces_DesWorkspaces_Location_DesWorkspaceLocation : IGetWorkspaces_DesWorkspaces_Location
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectInfoResult : global::System.IEquatable<GetProjectInfoResult>, IGetProjectInfoResult
    {
        public GetProjectInfoResult(global::Nexar.Client.IGetProjectInfo_DesProjects? desProjects)
        {
            DesProjects = desProjects;
        }

        /// <summary>
        /// Search projects within a workspace with results in paged groups.
        /// </summary>
        public global::Nexar.Client.IGetProjectInfo_DesProjects? DesProjects { get; }

        public virtual global::System.Boolean Equals(GetProjectInfoResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DesProjects is null && other.DesProjects is null) || DesProjects != null && DesProjects.Equals(other.DesProjects)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjectInfoResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DesProjects != null)
                {
                    hash ^= 397 * DesProjects.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectInfo_DesProjects_DesProjectConnection : global::System.IEquatable<GetProjectInfo_DesProjects_DesProjectConnection>, IGetProjectInfo_DesProjects_DesProjectConnection
    {
        public GetProjectInfo_DesProjects_DesProjectConnection(global::System.Int32 totalCount, global::Nexar.Client.IGetProjectInfo_DesProjects_PageInfo pageInfo)
        {
            TotalCount = totalCount;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Nexar.Client.IGetProjectInfo_DesProjects_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetProjectInfo_DesProjects_DesProjectConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjectInfo_DesProjects_DesProjectConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectInfo_DesProjects_PageInfo_PageInfo : global::System.IEquatable<GetProjectInfo_DesProjects_PageInfo_PageInfo>, IGetProjectInfo_DesProjects_PageInfo_PageInfo
    {
        public GetProjectInfo_DesProjects_PageInfo_PageInfo(global::System.String? endCursor, global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage, global::System.String? startCursor)
        {
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
            StartCursor = startCursor;
        }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        public virtual global::System.Boolean Equals(GetProjectInfo_DesProjects_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor))) && HasNextPage == other.HasNextPage && HasPreviousPage == other.HasPreviousPage && ((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjectInfo_DesProjects_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjectInfoResult
    {
        /// <summary>
        /// Search projects within a workspace with results in paged groups.
        /// </summary>
        public global::Nexar.Client.IGetProjectInfo_DesProjects? DesProjects { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjectInfo_DesProjects
    {
        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Nexar.Client.IGetProjectInfo_DesProjects_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjectInfo_DesProjects_DesProjectConnection : IGetProjectInfo_DesProjects
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjectInfo_DesProjects_PageInfo
    {
        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjectInfo_DesProjects_PageInfo_PageInfo : IGetProjectInfo_DesProjects_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectsResult : global::System.IEquatable<GetProjectsResult>, IGetProjectsResult
    {
        public GetProjectsResult(global::Nexar.Client.IGetProjects_DesProjects? desProjects)
        {
            DesProjects = desProjects;
        }

        /// <summary>
        /// Search projects within a workspace with results in paged groups.
        /// </summary>
        public global::Nexar.Client.IGetProjects_DesProjects? DesProjects { get; }

        public virtual global::System.Boolean Equals(GetProjectsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DesProjects is null && other.DesProjects is null) || DesProjects != null && DesProjects.Equals(other.DesProjects)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjectsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DesProjects != null)
                {
                    hash ^= 397 * DesProjects.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjects_DesProjects_DesProjectConnection : global::System.IEquatable<GetProjects_DesProjects_DesProjectConnection>, IGetProjects_DesProjects_DesProjectConnection
    {
        public GetProjects_DesProjects_DesProjectConnection(global::System.Int32 totalCount, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetProjects_DesProjects_Nodes>? nodes, global::Nexar.Client.IGetProjects_DesProjects_PageInfo pageInfo)
        {
            TotalCount = totalCount;
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetProjects_DesProjects_Nodes>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Nexar.Client.IGetProjects_DesProjects_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetProjects_DesProjects_DesProjectConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_DesProjects_DesProjectConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjects_DesProjects_Nodes_DesProject : global::System.IEquatable<GetProjects_DesProjects_Nodes_DesProject>, IGetProjects_DesProjects_Nodes_DesProject
    {
        public GetProjects_DesProjects_Nodes_DesProject(global::System.String id, global::System.String? name, global::System.String? description, global::System.String projectId, global::System.String previewUrl, global::System.DateTimeOffset? updatedAt)
        {
            Id = id;
            Name = name;
            Description = description;
            ProjectId = projectId;
            PreviewUrl = previewUrl;
            UpdatedAt = updatedAt;
        }

        /// <summary>
        /// The node identifier for this project (used by `desProjectById`).
        /// </summary>
        public global::System.String Id { get; }

        /// <summary>
        /// The assigned name for this project.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// The summary of this project content or purpose.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// The reference identifier for this project.
        /// </summary>
        public global::System.String ProjectId { get; }

        /// <summary>
        /// The web address to download a preview image for this project.
        /// </summary>
        public global::System.String PreviewUrl { get; }

        /// <summary>
        /// The `DateTime` when this project was last modified.
        /// </summary>
        public global::System.DateTimeOffset? UpdatedAt { get; }

        public virtual global::System.Boolean Equals(GetProjects_DesProjects_Nodes_DesProject? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && ProjectId.Equals(other.ProjectId) && PreviewUrl.Equals(other.PreviewUrl) && ((UpdatedAt is null && other.UpdatedAt is null) || UpdatedAt != null && UpdatedAt.Equals(other.UpdatedAt));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_DesProjects_Nodes_DesProject)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * ProjectId.GetHashCode();
                hash ^= 397 * PreviewUrl.GetHashCode();
                if (UpdatedAt != null)
                {
                    hash ^= 397 * UpdatedAt.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjects_DesProjects_PageInfo_PageInfo : global::System.IEquatable<GetProjects_DesProjects_PageInfo_PageInfo>, IGetProjects_DesProjects_PageInfo_PageInfo
    {
        public GetProjects_DesProjects_PageInfo_PageInfo(global::System.String? endCursor, global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage, global::System.String? startCursor)
        {
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
            StartCursor = startCursor;
        }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        public virtual global::System.Boolean Equals(GetProjects_DesProjects_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor))) && HasNextPage == other.HasNextPage && HasPreviousPage == other.HasPreviousPage && ((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetProjects_DesProjects_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjectsResult
    {
        /// <summary>
        /// Search projects within a workspace with results in paged groups.
        /// </summary>
        public global::Nexar.Client.IGetProjects_DesProjects? DesProjects { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjects_DesProjects
    {
        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetProjects_DesProjects_Nodes>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Nexar.Client.IGetProjects_DesProjects_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjects_DesProjects_DesProjectConnection : IGetProjects_DesProjects
    {
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjects_DesProjects_Nodes
    {
        /// <summary>
        /// The node identifier for this project (used by `desProjectById`).
        /// </summary>
        public global::System.String Id { get; }

        /// <summary>
        /// The assigned name for this project.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// The summary of this project content or purpose.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// The reference identifier for this project.
        /// </summary>
        public global::System.String ProjectId { get; }

        /// <summary>
        /// The web address to download a preview image for this project.
        /// </summary>
        public global::System.String PreviewUrl { get; }

        /// <summary>
        /// The `DateTime` when this project was last modified.
        /// </summary>
        public global::System.DateTimeOffset? UpdatedAt { get; }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjects_DesProjects_Nodes_DesProject : IGetProjects_DesProjects_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjects_DesProjects_PageInfo
    {
        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjects_DesProjects_PageInfo_PageInfo : IGetProjects_DesProjects_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItemsResult : global::System.IEquatable<GetDesignItemsResult>, IGetDesignItemsResult
    {
        public GetDesignItemsResult(global::Nexar.Client.IGetDesignItems_DesProjectById? desProjectById)
        {
            DesProjectById = desProjectById;
        }

        /// <summary>
        /// Search a specific project by its unique identifier.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById? DesProjectById { get; }

        public virtual global::System.Boolean Equals(GetDesignItemsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DesProjectById is null && other.DesProjectById is null) || DesProjectById != null && DesProjectById.Equals(other.DesProjectById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItemsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DesProjectById != null)
                {
                    hash ^= 397 * DesProjectById.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_DesProject : global::System.IEquatable<GetDesignItems_DesProjectById_DesProject>, IGetDesignItems_DesProjectById_DesProject
    {
        public GetDesignItems_DesProjectById_DesProject(global::System.String? name, global::System.String? description, global::Nexar.Client.IGetDesignItems_DesProjectById_Design design)
        {
            Name = name;
            Description = description;
            Design = design;
        }

        /// <summary>
        /// The assigned name for this project.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// The summary of this project content or purpose.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// The detailed design information for this project.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design Design { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_DesProject? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Design.Equals(other.Design);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_DesProject)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Design.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A design manages all of the schematic, PCB, and BOM content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_DesDesign : global::System.IEquatable<GetDesignItems_DesProjectById_Design_DesDesign>, IGetDesignItems_DesProjectById_Design_DesDesign
    {
        public GetDesignItems_DesProjectById_Design_DesDesign(global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress workInProgress)
        {
            WorkInProgress = workInProgress;
        }

        /// <summary>
        /// The most recent version of the design.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress WorkInProgress { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_DesDesign? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (WorkInProgress.Equals(other.WorkInProgress));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_DesDesign)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * WorkInProgress.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The most recent version of a design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_DesWorkInProgress : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_DesWorkInProgress>, IGetDesignItems_DesProjectById_Design_WorkInProgress_DesWorkInProgress
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_DesWorkInProgress(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants> variants)
        {
            Variants = variants;
        }

        /// <summary>
        /// The list of variations contained in this design.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants> Variants { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_DesWorkInProgress? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Variants, other.Variants));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_DesWorkInProgress)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Variants_elm in Variants)
                {
                    hash ^= 397 * Variants_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A variant contains a specific configuration of a base design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant(global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb? pcb)
        {
            Pcb = pcb;
        }

        /// <summary>
        /// The PCB document for this design variant.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb? Pcb { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Pcb is null && other.Pcb is null) || Pcb != null && Pcb.Equals(other.Pcb)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Pcb != null)
                {
                    hash ^= 397 * Pcb.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A PCB contains design details of the physical product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb(global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems? designItems)
        {
            DesignItems = designItems;
        }

        /// <summary>
        /// The list of all part instances used in this PCB grouped into pages.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems? DesignItems { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DesignItems is null && other.DesignItems is null) || DesignItems != null && DesignItems.Equals(other.DesignItems)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DesignItems != null)
                {
                    hash ^= 397 * DesignItems.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_DesDesignItemConnection : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_DesDesignItemConnection>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_DesDesignItemConnection
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_DesDesignItemConnection(global::System.Int32 totalCount, global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo pageInfo, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes>? nodes)
        {
            TotalCount = totalCount;
            PageInfo = pageInfo;
            Nodes = nodes;
        }

        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo PageInfo { get; }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_DesDesignItemConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount) && PageInfo.Equals(other.PageInfo) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_DesDesignItemConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                hash ^= 397 * PageInfo.GetHashCode();
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo_PageInfo : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo_PageInfo>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo_PageInfo
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo_PageInfo(global::System.Boolean hasNextPage, global::System.Boolean hasPreviousPage, global::System.String? startCursor, global::System.String? endCursor)
        {
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
            StartCursor = startCursor;
            EndCursor = endCursor;
        }

        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (HasNextPage == other.HasNextPage) && HasPreviousPage == other.HasPreviousPage && ((StartCursor is null && other.StartCursor is null) || StartCursor != null && StartCursor.Equals(other.StartCursor)) && ((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * HasNextPage.GetHashCode();
                hash ^= 397 * HasPreviousPage.GetHashCode();
                if (StartCursor != null)
                {
                    hash ^= 397 * StartCursor.GetHashCode();
                }

                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A design item is a specific instance of a part used in the design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem(global::System.String id, global::System.String designator, global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position position, global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area? area, global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D? mesh3D)
        {
            Id = id;
            Designator = designator;
            Position = position;
            Area = area;
            Mesh3D = mesh3D;
        }

        /// <summary>
        /// The node identifier for this project (used by `DesDesignItemById`).
        /// </summary>
        public global::System.String Id { get; }

        /// <summary>
        /// The unique label for this design item.
        /// </summary>
        public global::System.String Designator { get; }

        /// <summary>
        /// The planar location for this design item.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position Position { get; }

        /// <summary>
        /// The planar boundary for this design item.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area? Area { get; }

        /// <summary>
        /// *** PROTOTYPE, SUBJECT TO CHANGE ***
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D? Mesh3D { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && Designator.Equals(other.Designator) && Position.Equals(other.Position) && ((Area is null && other.Area is null) || Area != null && Area.Equals(other.Area)) && ((Mesh3D is null && other.Mesh3D is null) || Mesh3D != null && Mesh3D.Equals(other.Mesh3D));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Designator.GetHashCode();
                hash ^= 397 * Position.GetHashCode();
                if (Area != null)
                {
                    hash ^= 397 * Area.GetHashCode();
                }

                if (Mesh3D != null)
                {
                    hash ^= 397 * Mesh3D.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position_DesPosition2D : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position_DesPosition2D>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position_DesPosition2D
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position_DesPosition2D(global::System.Int32 x, global::System.Int32 y, global::System.Decimal xMm, global::System.Decimal yMm)
        {
            X = x;
            Y = y;
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (X == other.X) && Y == other.Y && XMm == other.XMm && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * X.GetHashCode();
                hash ^= 397 * Y.GetHashCode();
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_DesRectangle : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_DesRectangle>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_DesRectangle
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_DesRectangle(global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1 pos1, global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2 pos2)
        {
            Pos1 = pos1;
            Pos2 = pos2;
        }

        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1 Pos1 { get; }

        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2 Pos2 { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_DesRectangle? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Pos1.Equals(other.Pos1)) && Pos2.Equals(other.Pos2);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_DesRectangle)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Pos1.GetHashCode();
                hash ^= 397 * Pos2.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_DesMesh3D : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_DesMesh3D>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_DesMesh3D
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_DesMesh3D(global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile? glbFile)
        {
            GlbFile = glbFile;
        }

        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile? GlbFile { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_DesMesh3D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GlbFile is null && other.GlbFile is null) || GlbFile != null && GlbFile.Equals(other.GlbFile)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_DesMesh3D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GlbFile != null)
                {
                    hash ^= 397 * GlbFile.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1_DesPosition2D : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1_DesPosition2D>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1_DesPosition2D
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1_DesPosition2D(global::System.Int32 x, global::System.Int32 y, global::System.Decimal xMm, global::System.Decimal yMm)
        {
            X = x;
            Y = y;
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (X == other.X) && Y == other.Y && XMm == other.XMm && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * X.GetHashCode();
                hash ^= 397 * Y.GetHashCode();
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2_DesPosition2D : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2_DesPosition2D>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2_DesPosition2D
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2_DesPosition2D(global::System.Int32 x, global::System.Int32 y, global::System.Decimal xMm, global::System.Decimal yMm)
        {
            X = x;
            Y = y;
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (X == other.X) && Y == other.Y && XMm == other.XMm && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * X.GetHashCode();
                hash ^= 397 * Y.GetHashCode();
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile_DesDownloadableFile : global::System.IEquatable<GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile_DesDownloadableFile>, IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile_DesDownloadableFile
    {
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile_DesDownloadableFile(global::System.String fileName, global::System.String downloadUrl)
        {
            FileName = fileName;
            DownloadUrl = downloadUrl;
        }

        public global::System.String FileName { get; }

        public global::System.String DownloadUrl { get; }

        public virtual global::System.Boolean Equals(GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile_DesDownloadableFile? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (FileName.Equals(other.FileName)) && DownloadUrl.Equals(other.DownloadUrl);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile_DesDownloadableFile)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * FileName.GetHashCode();
                hash ^= 397 * DownloadUrl.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItemsResult
    {
        /// <summary>
        /// Search a specific project by its unique identifier.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById? DesProjectById { get; }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById
    {
        /// <summary>
        /// The assigned name for this project.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// The summary of this project content or purpose.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// The detailed design information for this project.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design Design { get; }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_DesProject : IGetDesignItems_DesProjectById
    {
    }

    /// <summary>
    /// A design manages all of the schematic, PCB, and BOM content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design
    {
        /// <summary>
        /// The most recent version of the design.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress WorkInProgress { get; }
    }

    /// <summary>
    /// A design manages all of the schematic, PCB, and BOM content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_DesDesign : IGetDesignItems_DesProjectById_Design
    {
    }

    /// <summary>
    /// The most recent version of a design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress
    {
        /// <summary>
        /// The list of variations contained in this design.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants> Variants { get; }
    }

    /// <summary>
    /// The most recent version of a design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_DesWorkInProgress : IGetDesignItems_DesProjectById_Design_WorkInProgress
    {
    }

    /// <summary>
    /// A variant contains a specific configuration of a base design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants
    {
        /// <summary>
        /// The PCB document for this design variant.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb? Pcb { get; }
    }

    /// <summary>
    /// A variant contains a specific configuration of a base design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants
    {
    }

    /// <summary>
    /// A PCB contains design details of the physical product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb
    {
        /// <summary>
        /// The list of all part instances used in this PCB grouped into pages.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems? DesignItems { get; }
    }

    /// <summary>
    /// A PCB contains design details of the physical product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb
    {
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems
    {
        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo PageInfo { get; }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes>? Nodes { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_DesDesignItemConnection : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo
    {
        /// <summary>
        /// Indicates whether more edges exist following the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasNextPage { get; }

        /// <summary>
        /// Indicates whether more edges exist prior the set defined by the clients arguments.
        /// </summary>
        public global::System.Boolean HasPreviousPage { get; }

        /// <summary>
        /// When paginating backwards, the cursor to continue.
        /// </summary>
        public global::System.String? StartCursor { get; }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo_PageInfo : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo
    {
    }

    /// <summary>
    /// A design item is a specific instance of a part used in the design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes
    {
        /// <summary>
        /// The node identifier for this project (used by `DesDesignItemById`).
        /// </summary>
        public global::System.String Id { get; }

        /// <summary>
        /// The unique label for this design item.
        /// </summary>
        public global::System.String Designator { get; }

        /// <summary>
        /// The planar location for this design item.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position Position { get; }

        /// <summary>
        /// The planar boundary for this design item.
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area? Area { get; }

        /// <summary>
        /// *** PROTOTYPE, SUBJECT TO CHANGE ***
        /// </summary>
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D? Mesh3D { get; }
    }

    /// <summary>
    /// A design item is a specific instance of a part used in the design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position
    {
        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position_DesPosition2D : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area
    {
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1 Pos1 { get; }

        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2 Pos2 { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_DesRectangle : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D
    {
        public global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile? GlbFile { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_DesMesh3D : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1
    {
        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1_DesPosition2D : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2
    {
        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2_DesPosition2D : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile
    {
        public global::System.String FileName { get; }

        public global::System.String DownloadUrl { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile_DesDownloadableFile : IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModelResult : global::System.IEquatable<GetPcbModelResult>, IGetPcbModelResult
    {
        public GetPcbModelResult(global::Nexar.Client.IGetPcbModel_DesProjectById? desProjectById)
        {
            DesProjectById = desProjectById;
        }

        /// <summary>
        /// Search a specific project by its unique identifier.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById? DesProjectById { get; }

        public virtual global::System.Boolean Equals(GetPcbModelResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DesProjectById is null && other.DesProjectById is null) || DesProjectById != null && DesProjectById.Equals(other.DesProjectById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModelResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DesProjectById != null)
                {
                    hash ^= 397 * DesProjectById.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_DesProject : global::System.IEquatable<GetPcbModel_DesProjectById_DesProject>, IGetPcbModel_DesProjectById_DesProject
    {
        public GetPcbModel_DesProjectById_DesProject(global::System.String id, global::System.String? name, global::System.String? description, global::Nexar.Client.IGetPcbModel_DesProjectById_Design design)
        {
            Id = id;
            Name = name;
            Description = description;
            Design = design;
        }

        /// <summary>
        /// The node identifier for this project (used by `desProjectById`).
        /// </summary>
        public global::System.String Id { get; }

        /// <summary>
        /// The assigned name for this project.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// The summary of this project content or purpose.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// The detailed design information for this project.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design Design { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_DesProject? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Design.Equals(other.Design);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_DesProject)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Design.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A design manages all of the schematic, PCB, and BOM content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_DesDesign : global::System.IEquatable<GetPcbModel_DesProjectById_Design_DesDesign>, IGetPcbModel_DesProjectById_Design_DesDesign
    {
        public GetPcbModel_DesProjectById_Design_DesDesign(global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress workInProgress)
        {
            WorkInProgress = workInProgress;
        }

        /// <summary>
        /// The most recent version of the design.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress WorkInProgress { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_DesDesign? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (WorkInProgress.Equals(other.WorkInProgress));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_DesDesign)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * WorkInProgress.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The most recent version of a design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_DesWorkInProgress : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_DesWorkInProgress>, IGetPcbModel_DesProjectById_Design_WorkInProgress_DesWorkInProgress
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_DesWorkInProgress(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants> variants)
        {
            Variants = variants;
        }

        /// <summary>
        /// The list of variations contained in this design.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants> Variants { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_DesWorkInProgress? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Variants, other.Variants));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_DesWorkInProgress)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Variants_elm in Variants)
                {
                    hash ^= 397 * Variants_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A variant contains a specific configuration of a base design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant(global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb? pcb)
        {
            Pcb = pcb;
        }

        /// <summary>
        /// The PCB document for this design variant.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb? Pcb { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Pcb is null && other.Pcb is null) || Pcb != null && Pcb.Equals(other.Pcb)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Pcb != null)
                {
                    hash ^= 397 * Pcb.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A PCB contains design details of the physical product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb(global::System.String documentId, global::System.String documentName, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack? layerStack, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline outline, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads> pads, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets> nets)
        {
            DocumentId = documentId;
            DocumentName = documentName;
            LayerStack = layerStack;
            Outline = outline;
            Pads = pads;
            Nets = nets;
        }

        /// <summary>
        /// The reference identifier for this PCB.
        /// </summary>
        public global::System.String DocumentId { get; }

        /// <summary>
        /// The document file name.
        /// </summary>
        public global::System.String DocumentName { get; }

        /// <summary>
        /// The details of the layer structure of this PCB.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack? LayerStack { get; }

        /// <summary>
        /// The outline of this PCB.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline Outline { get; }

        /// <summary>
        /// The list of all part connection targets in this PCB.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads> Pads { get; }

        /// <summary>
        /// The list of all electrically connected regions in this PCB.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets> Nets { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DocumentId.Equals(other.DocumentId)) && DocumentName.Equals(other.DocumentName) && ((LayerStack is null && other.LayerStack is null) || LayerStack != null && LayerStack.Equals(other.LayerStack)) && Outline.Equals(other.Outline) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Pads, other.Pads) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nets, other.Nets);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DocumentId.GetHashCode();
                hash ^= 397 * DocumentName.GetHashCode();
                if (LayerStack != null)
                {
                    hash ^= 397 * LayerStack.GetHashCode();
                }

                hash ^= 397 * Outline.GetHashCode();
                foreach (var Pads_elm in Pads)
                {
                    hash ^= 397 * Pads_elm.GetHashCode();
                }

                foreach (var Nets_elm in Nets)
                {
                    hash ^= 397 * Nets_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_DesStackup : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_DesStackup>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_DesStackup
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_DesStackup(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks> stacks)
        {
            Stacks = stacks;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks> Stacks { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_DesStackup? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Stacks, other.Stacks));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_DesStackup)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Stacks_elm in Stacks)
                {
                    hash ^= 397 * Stacks_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_DesPolygon : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_DesPolygon>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_DesPolygon
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_DesPolygon(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices> vertices)
        {
            Vertices = vertices;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices> Vertices { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_DesPolygon? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Vertices, other.Vertices));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_DesPolygon)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Vertices_elm in Vertices)
                {
                    hash ^= 397 * Vertices_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_DesPad : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_DesPad>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_DesPad
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_DesPad(global::System.String? designator, global::System.String? globalDesignator, global::Nexar.Client.DesPadType padType, global::Nexar.Client.DesPrimitiveShape? shape, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net? net, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer? layer, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position position, global::System.Decimal? rotation, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size size, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize holeSize)
        {
            Designator = designator;
            GlobalDesignator = globalDesignator;
            PadType = padType;
            Shape = shape;
            Net = net;
            Layer = layer;
            Position = position;
            Rotation = rotation;
            Size = size;
            HoleSize = holeSize;
        }

        public global::System.String? Designator { get; }

        public global::System.String? GlobalDesignator { get; }

        public global::Nexar.Client.DesPadType PadType { get; }

        public global::Nexar.Client.DesPrimitiveShape? Shape { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net? Net { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer? Layer { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position Position { get; }

        public global::System.Decimal? Rotation { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size Size { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize HoleSize { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_DesPad? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Designator is null && other.Designator is null) || Designator != null && Designator.Equals(other.Designator))) && ((GlobalDesignator is null && other.GlobalDesignator is null) || GlobalDesignator != null && GlobalDesignator.Equals(other.GlobalDesignator)) && PadType.Equals(other.PadType) && ((Shape is null && other.Shape is null) || Shape != null && Shape.Equals(other.Shape)) && ((Net is null && other.Net is null) || Net != null && Net.Equals(other.Net)) && ((Layer is null && other.Layer is null) || Layer != null && Layer.Equals(other.Layer)) && Position.Equals(other.Position) && Rotation == other.Rotation && Size.Equals(other.Size) && HoleSize.Equals(other.HoleSize);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_DesPad)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Designator != null)
                {
                    hash ^= 397 * Designator.GetHashCode();
                }

                if (GlobalDesignator != null)
                {
                    hash ^= 397 * GlobalDesignator.GetHashCode();
                }

                hash ^= 397 * PadType.GetHashCode();
                if (Shape != null)
                {
                    hash ^= 397 * Shape.GetHashCode();
                }

                if (Net != null)
                {
                    hash ^= 397 * Net.GetHashCode();
                }

                if (Layer != null)
                {
                    hash ^= 397 * Layer.GetHashCode();
                }

                hash ^= 397 * Position.GetHashCode();
                if (Rotation != null)
                {
                    hash ^= 397 * Rotation.GetHashCode();
                }

                hash ^= 397 * Size.GetHashCode();
                hash ^= 397 * HoleSize.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_DesNet : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_DesNet>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_DesNet
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_DesNet(global::System.String name, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads> pads, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks> tracks, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias> vias)
        {
            Name = name;
            Pads = pads;
            Tracks = tracks;
            Vias = vias;
        }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads> Pads { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks> Tracks { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias> Vias { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_DesNet? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Pads, other.Pads) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Tracks, other.Tracks) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Vias, other.Vias);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_DesNet)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                foreach (var Pads_elm in Pads)
                {
                    hash ^= 397 * Pads_elm.GetHashCode();
                }

                foreach (var Tracks_elm in Tracks)
                {
                    hash ^= 397 * Tracks_elm.GetHashCode();
                }

                foreach (var Vias_elm in Vias)
                {
                    hash ^= 397 * Vias_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_DesStack : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_DesStack>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_DesStack
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_DesStack(global::System.String name, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers> layers)
        {
            Name = name;
            Layers = layers;
        }

        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers> Layers { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_DesStack? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Layers, other.Layers);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_DesStack)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                foreach (var Layers_elm in Layers)
                {
                    hash ^= 397 * Layers_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices_DesPosition2D : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices_DesPosition2D>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices_DesPosition2D
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices_DesPosition2D(global::System.Decimal xMm, global::System.Decimal yMm)
        {
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm) && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net_DesNet : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net_DesNet>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net_DesNet
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net_DesNet(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net_DesNet? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net_DesNet)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer_DesLayer : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer_DesLayer>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer_DesLayer
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer_DesLayer(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer_DesLayer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer_DesLayer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position_DesPosition2D : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position_DesPosition2D>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position_DesPosition2D
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position_DesPosition2D(global::System.Decimal xMm, global::System.Decimal yMm)
        {
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm) && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size_DesSize2D : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size_DesSize2D>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size_DesSize2D
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size_DesSize2D(global::System.Decimal xMm, global::System.Decimal yMm)
        {
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size_DesSize2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm) && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size_DesSize2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize_DesSize : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize_DesSize>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize_DesSize
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize_DesSize(global::System.Decimal xMm)
        {
            XMm = xMm;
        }

        public global::System.Decimal XMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize_DesSize? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize_DesSize)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_DesPad : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_DesPad>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_DesPad
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_DesPad(global::System.String? designator, global::System.String? globalDesignator, global::Nexar.Client.DesPadType padType, global::Nexar.Client.DesPrimitiveShape? shape, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer? layer, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position position, global::System.Decimal? rotation, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size size, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize holeSize)
        {
            Designator = designator;
            GlobalDesignator = globalDesignator;
            PadType = padType;
            Shape = shape;
            Layer = layer;
            Position = position;
            Rotation = rotation;
            Size = size;
            HoleSize = holeSize;
        }

        public global::System.String? Designator { get; }

        public global::System.String? GlobalDesignator { get; }

        public global::Nexar.Client.DesPadType PadType { get; }

        public global::Nexar.Client.DesPrimitiveShape? Shape { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer? Layer { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position Position { get; }

        public global::System.Decimal? Rotation { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size Size { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize HoleSize { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_DesPad? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Designator is null && other.Designator is null) || Designator != null && Designator.Equals(other.Designator))) && ((GlobalDesignator is null && other.GlobalDesignator is null) || GlobalDesignator != null && GlobalDesignator.Equals(other.GlobalDesignator)) && PadType.Equals(other.PadType) && ((Shape is null && other.Shape is null) || Shape != null && Shape.Equals(other.Shape)) && ((Layer is null && other.Layer is null) || Layer != null && Layer.Equals(other.Layer)) && Position.Equals(other.Position) && Rotation == other.Rotation && Size.Equals(other.Size) && HoleSize.Equals(other.HoleSize);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_DesPad)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Designator != null)
                {
                    hash ^= 397 * Designator.GetHashCode();
                }

                if (GlobalDesignator != null)
                {
                    hash ^= 397 * GlobalDesignator.GetHashCode();
                }

                hash ^= 397 * PadType.GetHashCode();
                if (Shape != null)
                {
                    hash ^= 397 * Shape.GetHashCode();
                }

                if (Layer != null)
                {
                    hash ^= 397 * Layer.GetHashCode();
                }

                hash ^= 397 * Position.GetHashCode();
                if (Rotation != null)
                {
                    hash ^= 397 * Rotation.GetHashCode();
                }

                hash ^= 397 * Size.GetHashCode();
                hash ^= 397 * HoleSize.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_DesTrack : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_DesTrack>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_DesTrack
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_DesTrack(global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer? layer, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width width, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin begin, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End end)
        {
            Layer = layer;
            Width = width;
            Begin = begin;
            End = end;
        }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer? Layer { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width Width { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin Begin { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End End { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_DesTrack? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Layer is null && other.Layer is null) || Layer != null && Layer.Equals(other.Layer))) && Width.Equals(other.Width) && Begin.Equals(other.Begin) && End.Equals(other.End);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_DesTrack)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Layer != null)
                {
                    hash ^= 397 * Layer.GetHashCode();
                }

                hash ^= 397 * Width.GetHashCode();
                hash ^= 397 * Begin.GetHashCode();
                hash ^= 397 * End.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_DesVia : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_DesVia>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_DesVia
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_DesVia(global::Nexar.Client.DesPrimitiveShape? shape, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer? beginLayer, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer? endLayer, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position position, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter padDiameter, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter holeDiameter)
        {
            Shape = shape;
            BeginLayer = beginLayer;
            EndLayer = endLayer;
            Position = position;
            PadDiameter = padDiameter;
            HoleDiameter = holeDiameter;
        }

        public global::Nexar.Client.DesPrimitiveShape? Shape { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer? BeginLayer { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer? EndLayer { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position Position { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter PadDiameter { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter HoleDiameter { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_DesVia? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Shape is null && other.Shape is null) || Shape != null && Shape.Equals(other.Shape))) && ((BeginLayer is null && other.BeginLayer is null) || BeginLayer != null && BeginLayer.Equals(other.BeginLayer)) && ((EndLayer is null && other.EndLayer is null) || EndLayer != null && EndLayer.Equals(other.EndLayer)) && Position.Equals(other.Position) && PadDiameter.Equals(other.PadDiameter) && HoleDiameter.Equals(other.HoleDiameter);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_DesVia)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Shape != null)
                {
                    hash ^= 397 * Shape.GetHashCode();
                }

                if (BeginLayer != null)
                {
                    hash ^= 397 * BeginLayer.GetHashCode();
                }

                if (EndLayer != null)
                {
                    hash ^= 397 * EndLayer.GetHashCode();
                }

                hash ^= 397 * Position.GetHashCode();
                hash ^= 397 * PadDiameter.GetHashCode();
                hash ^= 397 * HoleDiameter.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_DesLayer : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_DesLayer>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_DesLayer
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_DesLayer(global::System.String name, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness? thickness, global::System.Decimal? dielectricConstant, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight? copperWeight, global::Nexar.Client.DesLayerType layerType, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties> layerProperties)
        {
            Name = name;
            Thickness = thickness;
            DielectricConstant = dielectricConstant;
            CopperWeight = copperWeight;
            LayerType = layerType;
            LayerProperties = layerProperties;
        }

        public global::System.String Name { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness? Thickness { get; }

        public global::System.Decimal? DielectricConstant { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight? CopperWeight { get; }

        public global::Nexar.Client.DesLayerType LayerType { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties> LayerProperties { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_DesLayer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && ((Thickness is null && other.Thickness is null) || Thickness != null && Thickness.Equals(other.Thickness)) && DielectricConstant == other.DielectricConstant && ((CopperWeight is null && other.CopperWeight is null) || CopperWeight != null && CopperWeight.Equals(other.CopperWeight)) && LayerType.Equals(other.LayerType) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(LayerProperties, other.LayerProperties);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_DesLayer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                if (Thickness != null)
                {
                    hash ^= 397 * Thickness.GetHashCode();
                }

                if (DielectricConstant != null)
                {
                    hash ^= 397 * DielectricConstant.GetHashCode();
                }

                if (CopperWeight != null)
                {
                    hash ^= 397 * CopperWeight.GetHashCode();
                }

                hash ^= 397 * LayerType.GetHashCode();
                foreach (var LayerProperties_elm in LayerProperties)
                {
                    hash ^= 397 * LayerProperties_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer_DesLayer : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer_DesLayer>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer_DesLayer
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer_DesLayer(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer_DesLayer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer_DesLayer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position_DesPosition2D : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position_DesPosition2D>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position_DesPosition2D
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position_DesPosition2D(global::System.Decimal xMm, global::System.Decimal yMm)
        {
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm) && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size_DesSize2D : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size_DesSize2D>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size_DesSize2D
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size_DesSize2D(global::System.Decimal xMm, global::System.Decimal yMm)
        {
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size_DesSize2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm) && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size_DesSize2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize_DesSize : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize_DesSize>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize_DesSize
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize_DesSize(global::System.Decimal xMm)
        {
            XMm = xMm;
        }

        public global::System.Decimal XMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize_DesSize? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize_DesSize)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer_DesLayer : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer_DesLayer>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer_DesLayer
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer_DesLayer(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer_DesLayer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer_DesLayer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width_DesSize : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width_DesSize>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width_DesSize
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width_DesSize(global::System.Decimal xMm)
        {
            XMm = xMm;
        }

        public global::System.Decimal XMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width_DesSize? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width_DesSize)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin_DesPosition2D : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin_DesPosition2D>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin_DesPosition2D
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin_DesPosition2D(global::System.Decimal xMm, global::System.Decimal yMm)
        {
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm) && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End_DesPosition2D : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End_DesPosition2D>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End_DesPosition2D
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End_DesPosition2D(global::System.Decimal xMm, global::System.Decimal yMm)
        {
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm) && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer_DesLayer : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer_DesLayer>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer_DesLayer
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer_DesLayer(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer_DesLayer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer_DesLayer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer_DesLayer : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer_DesLayer>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer_DesLayer
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer_DesLayer(global::System.String name)
        {
            Name = name;
        }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer_DesLayer? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer_DesLayer)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position_DesPosition2D : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position_DesPosition2D>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position_DesPosition2D
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position_DesPosition2D(global::System.Decimal xMm, global::System.Decimal yMm)
        {
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm) && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter_DesSize : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter_DesSize>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter_DesSize
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter_DesSize(global::System.Decimal xMm)
        {
            XMm = xMm;
        }

        public global::System.Decimal XMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter_DesSize? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter_DesSize)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter_DesSize : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter_DesSize>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter_DesSize
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter_DesSize(global::System.Decimal xMm)
        {
            XMm = xMm;
        }

        public global::System.Decimal XMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter_DesSize? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter_DesSize)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness_DesSize : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness_DesSize>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness_DesSize
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness_DesSize(global::System.Decimal xMm)
        {
            XMm = xMm;
        }

        public global::System.Decimal XMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness_DesSize? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness_DesSize)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight_DesWeight : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight_DesWeight>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight_DesWeight
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight_DesWeight(global::System.Decimal gram)
        {
            Gram = gram;
        }

        public global::System.Decimal Gram { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight_DesWeight? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Gram == other.Gram);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight_DesWeight)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Gram.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_DesLayerProperty : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_DesLayerProperty>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_DesLayerProperty
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_DesLayerProperty(global::System.String name, global::System.String text, global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size? size)
        {
            Name = name;
            Text = text;
            Size = size;
        }

        public global::System.String Name { get; }

        public global::System.String Text { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size? Size { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_DesLayerProperty? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && Text.Equals(other.Text) && ((Size is null && other.Size is null) || Size != null && Size.Equals(other.Size));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_DesLayerProperty)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Text.GetHashCode();
                if (Size != null)
                {
                    hash ^= 397 * Size.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size_DesSize : global::System.IEquatable<GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size_DesSize>, IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size_DesSize
    {
        public GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size_DesSize(global::System.Decimal xMm)
        {
            XMm = xMm;
        }

        public global::System.Decimal XMm { get; }

        public virtual global::System.Boolean Equals(GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size_DesSize? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (XMm == other.XMm);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size_DesSize)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * XMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModelResult
    {
        /// <summary>
        /// Search a specific project by its unique identifier.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById? DesProjectById { get; }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById
    {
        /// <summary>
        /// The node identifier for this project (used by `desProjectById`).
        /// </summary>
        public global::System.String Id { get; }

        /// <summary>
        /// The assigned name for this project.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// The summary of this project content or purpose.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// The detailed design information for this project.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design Design { get; }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_DesProject : IGetPcbModel_DesProjectById
    {
    }

    /// <summary>
    /// A design manages all of the schematic, PCB, and BOM content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design
    {
        /// <summary>
        /// The most recent version of the design.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress WorkInProgress { get; }
    }

    /// <summary>
    /// A design manages all of the schematic, PCB, and BOM content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_DesDesign : IGetPcbModel_DesProjectById_Design
    {
    }

    /// <summary>
    /// The most recent version of a design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress
    {
        /// <summary>
        /// The list of variations contained in this design.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants> Variants { get; }
    }

    /// <summary>
    /// The most recent version of a design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_DesWorkInProgress : IGetPcbModel_DesProjectById_Design_WorkInProgress
    {
    }

    /// <summary>
    /// A variant contains a specific configuration of a base design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants
    {
        /// <summary>
        /// The PCB document for this design variant.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb? Pcb { get; }
    }

    /// <summary>
    /// A variant contains a specific configuration of a base design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants
    {
    }

    /// <summary>
    /// A PCB contains design details of the physical product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb
    {
        /// <summary>
        /// The reference identifier for this PCB.
        /// </summary>
        public global::System.String DocumentId { get; }

        /// <summary>
        /// The document file name.
        /// </summary>
        public global::System.String DocumentName { get; }

        /// <summary>
        /// The details of the layer structure of this PCB.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack? LayerStack { get; }

        /// <summary>
        /// The outline of this PCB.
        /// </summary>
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline Outline { get; }

        /// <summary>
        /// The list of all part connection targets in this PCB.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads> Pads { get; }

        /// <summary>
        /// The list of all electrically connected regions in this PCB.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets> Nets { get; }
    }

    /// <summary>
    /// A PCB contains design details of the physical product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks> Stacks { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_DesStackup : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline
    {
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices> Vertices { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_DesPolygon : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads
    {
        public global::System.String? Designator { get; }

        public global::System.String? GlobalDesignator { get; }

        public global::Nexar.Client.DesPadType PadType { get; }

        public global::Nexar.Client.DesPrimitiveShape? Shape { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net? Net { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer? Layer { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position Position { get; }

        public global::System.Decimal? Rotation { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size Size { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize HoleSize { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_DesPad : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets
    {
        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads> Pads { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks> Tracks { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias> Vias { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_DesNet : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks
    {
        public global::System.String Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers> Layers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_DesStack : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices
    {
        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices_DesPosition2D : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net_DesNet : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer_DesLayer : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position
    {
        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position_DesPosition2D : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size
    {
        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size_DesSize2D : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize
    {
        public global::System.Decimal XMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize_DesSize : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads
    {
        public global::System.String? Designator { get; }

        public global::System.String? GlobalDesignator { get; }

        public global::Nexar.Client.DesPadType PadType { get; }

        public global::Nexar.Client.DesPrimitiveShape? Shape { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer? Layer { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position Position { get; }

        public global::System.Decimal? Rotation { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size Size { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize HoleSize { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_DesPad : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks
    {
        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer? Layer { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width Width { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin Begin { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End End { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_DesTrack : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias
    {
        public global::Nexar.Client.DesPrimitiveShape? Shape { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer? BeginLayer { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer? EndLayer { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position Position { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter PadDiameter { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter HoleDiameter { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_DesVia : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers
    {
        public global::System.String Name { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness? Thickness { get; }

        public global::System.Decimal? DielectricConstant { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight? CopperWeight { get; }

        public global::Nexar.Client.DesLayerType LayerType { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties> LayerProperties { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_DesLayer : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer_DesLayer : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position
    {
        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position_DesPosition2D : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size
    {
        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size_DesSize2D : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize
    {
        public global::System.Decimal XMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize_DesSize : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer_DesLayer : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width
    {
        public global::System.Decimal XMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width_DesSize : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin
    {
        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin_DesPosition2D : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End
    {
        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End_DesPosition2D : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer_DesLayer : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer
    {
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer_DesLayer : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position
    {
        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position_DesPosition2D : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter
    {
        public global::System.Decimal XMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter_DesSize : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter
    {
        public global::System.Decimal XMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter_DesSize : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness
    {
        public global::System.Decimal XMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness_DesSize : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight
    {
        public global::System.Decimal Gram { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight_DesWeight : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties
    {
        public global::System.String Name { get; }

        public global::System.String Text { get; }

        public global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size? Size { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_DesLayerProperty : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size
    {
        public global::System.Decimal XMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size_DesSize : IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbCommentsResult : global::System.IEquatable<GetPcbCommentsResult>, IGetPcbCommentsResult
    {
        public GetPcbCommentsResult(global::Nexar.Client.IGetPcbComments_DesProjectById? desProjectById)
        {
            DesProjectById = desProjectById;
        }

        /// <summary>
        /// Search a specific project by its unique identifier.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById? DesProjectById { get; }

        public virtual global::System.Boolean Equals(GetPcbCommentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((DesProjectById is null && other.DesProjectById is null) || DesProjectById != null && DesProjectById.Equals(other.DesProjectById)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbCommentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (DesProjectById != null)
                {
                    hash ^= 397 * DesProjectById.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_DesProject : global::System.IEquatable<GetPcbComments_DesProjectById_DesProject>, IGetPcbComments_DesProjectById_DesProject
    {
        public GetPcbComments_DesProjectById_DesProject(global::System.String? name, global::System.String? description, global::Nexar.Client.IGetPcbComments_DesProjectById_Design design)
        {
            Name = name;
            Description = description;
            Design = design;
        }

        /// <summary>
        /// The assigned name for this project.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// The summary of this project content or purpose.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// The detailed design information for this project.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design Design { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_DesProject? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && Design.Equals(other.Design);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_DesProject)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * Design.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A design manages all of the schematic, PCB, and BOM content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_DesDesign : global::System.IEquatable<GetPcbComments_DesProjectById_Design_DesDesign>, IGetPcbComments_DesProjectById_Design_DesDesign
    {
        public GetPcbComments_DesProjectById_Design_DesDesign(global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress workInProgress)
        {
            WorkInProgress = workInProgress;
        }

        /// <summary>
        /// The most recent version of the design.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress WorkInProgress { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_DesDesign? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (WorkInProgress.Equals(other.WorkInProgress));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_DesDesign)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * WorkInProgress.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The most recent version of a design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_DesWorkInProgress : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_DesWorkInProgress>, IGetPcbComments_DesProjectById_Design_WorkInProgress_DesWorkInProgress
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_DesWorkInProgress(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants> variants)
        {
            Variants = variants;
        }

        /// <summary>
        /// The list of variations contained in this design.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants> Variants { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_DesWorkInProgress? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Variants, other.Variants));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_DesWorkInProgress)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Variants_elm in Variants)
                {
                    hash ^= 397 * Variants_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A variant contains a specific configuration of a base design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant>, IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant(global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb? pcb)
        {
            Pcb = pcb;
        }

        /// <summary>
        /// The PCB document for this design variant.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb? Pcb { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Pcb is null && other.Pcb is null) || Pcb != null && Pcb.Equals(other.Pcb)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Pcb != null)
                {
                    hash ^= 397 * Pcb.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A PCB contains design details of the physical product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb>, IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb(global::System.String documentId, global::System.String documentName, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads> commentThreads)
        {
            DocumentId = documentId;
            DocumentName = documentName;
            CommentThreads = commentThreads;
        }

        /// <summary>
        /// The reference identifier for this PCB.
        /// </summary>
        public global::System.String DocumentId { get; }

        /// <summary>
        /// The document file name.
        /// </summary>
        public global::System.String DocumentName { get; }

        /// <summary>
        /// The list of all comment threads related to this PCB.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads> CommentThreads { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (DocumentId.Equals(other.DocumentId)) && DocumentName.Equals(other.DocumentName) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(CommentThreads, other.CommentThreads);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * DocumentId.GetHashCode();
                hash ^= 397 * DocumentName.GetHashCode();
                foreach (var CommentThreads_elm in CommentThreads)
                {
                    hash ^= 397 * CommentThreads_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A comment thread contains an initial remark associated with the design and a collection of replies.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_DesCommentThread : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_DesCommentThread>, IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_DesCommentThread
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_DesCommentThread(global::System.String commentThreadId, global::System.DateTimeOffset createdAt, global::System.DateTimeOffset modifiedAt, global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context context, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments> comments)
        {
            CommentThreadId = commentThreadId;
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            Context = context;
            Comments = comments;
        }

        /// <summary>
        /// The reference identifier for this comment thread (used by `desCreateComment`, `desDeleteComment`, `desUpdateComment`).
        /// </summary>
        public global::System.String CommentThreadId { get; }

        /// <summary>
        /// The `DateTime` for the creation of this comment thread.
        /// </summary>
        public global::System.DateTimeOffset CreatedAt { get; }

        /// <summary>
        /// The `DateTime` for the most recent modification of this comment thread.
        /// </summary>
        public global::System.DateTimeOffset ModifiedAt { get; }

        /// <summary>
        /// The information about properties related to this comment thread.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context Context { get; }

        /// <summary>
        /// The list of replies associated with this comment thread.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments> Comments { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_DesCommentThread? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CommentThreadId.Equals(other.CommentThreadId)) && CreatedAt.Equals(other.CreatedAt) && ModifiedAt.Equals(other.ModifiedAt) && Context.Equals(other.Context) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Comments, other.Comments);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_DesCommentThread)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CommentThreadId.GetHashCode();
                hash ^= 397 * CreatedAt.GetHashCode();
                hash ^= 397 * ModifiedAt.GetHashCode();
                hash ^= 397 * Context.GetHashCode();
                foreach (var Comments_elm in Comments)
                {
                    hash ^= 397 * Comments_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A comment context provides additional information about associations for a comment thread.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_DesCommentContext : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_DesCommentContext>, IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_DesCommentContext
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_DesCommentContext(global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area area)
        {
            Area = area;
        }

        /// <summary>
        /// The area associated with a comment thread.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area Area { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_DesCommentContext? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Area.Equals(other.Area));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_DesCommentContext)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Area.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A comment is one of remarks associated with a comment thread or task.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_DesComment : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_DesComment>, IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_DesComment
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_DesComment(global::System.String commentId, global::System.String text, global::System.DateTimeOffset createdAt, global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy createdBy, global::System.DateTimeOffset modifiedAt, global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy modifiedBy)
        {
            CommentId = commentId;
            Text = text;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            ModifiedAt = modifiedAt;
            ModifiedBy = modifiedBy;
        }

        /// <summary>
        /// The comment reference ID.
        /// </summary>
        public global::System.String CommentId { get; }

        /// <summary>
        /// The comment text.
        /// </summary>
        public global::System.String Text { get; }

        /// <summary>
        /// The creation date.
        /// </summary>
        public global::System.DateTimeOffset CreatedAt { get; }

        /// <summary>
        /// The user who created the comment.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy CreatedBy { get; }

        /// <summary>
        /// The last modification date.
        /// </summary>
        public global::System.DateTimeOffset ModifiedAt { get; }

        /// <summary>
        /// The user who modified the comment.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy ModifiedBy { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_DesComment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CommentId.Equals(other.CommentId)) && Text.Equals(other.Text) && CreatedAt.Equals(other.CreatedAt) && CreatedBy.Equals(other.CreatedBy) && ModifiedAt.Equals(other.ModifiedAt) && ModifiedBy.Equals(other.ModifiedBy);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_DesComment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CommentId.GetHashCode();
                hash ^= 397 * Text.GetHashCode();
                hash ^= 397 * CreatedAt.GetHashCode();
                hash ^= 397 * CreatedBy.GetHashCode();
                hash ^= 397 * ModifiedAt.GetHashCode();
                hash ^= 397 * ModifiedBy.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_DesRectangle : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_DesRectangle>, IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_DesRectangle
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_DesRectangle(global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1 pos1, global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2 pos2)
        {
            Pos1 = pos1;
            Pos2 = pos2;
        }

        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1 Pos1 { get; }

        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2 Pos2 { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_DesRectangle? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Pos1.Equals(other.Pos1)) && Pos2.Equals(other.Pos2);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_DesRectangle)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Pos1.GetHashCode();
                hash ^= 397 * Pos2.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// User details with the identifier and nullable extra fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy_DesUser : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy_DesUser>, IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy_DesUser
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy_DesUser(global::System.String? firstName, global::System.String? lastName, global::System.String? email, global::System.String? pictureUrl)
        {
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            PictureUrl = pictureUrl;
        }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? FirstName { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? LastName { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? Email { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? PictureUrl { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy_DesUser? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName))) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((PictureUrl is null && other.PictureUrl is null) || PictureUrl != null && PictureUrl.Equals(other.PictureUrl));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy_DesUser)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (PictureUrl != null)
                {
                    hash ^= 397 * PictureUrl.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// User details with the identifier and nullable extra fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy_DesUser : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy_DesUser>, IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy_DesUser
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy_DesUser(global::System.String? firstName, global::System.String? lastName, global::System.String? email, global::System.String? pictureUrl)
        {
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            PictureUrl = pictureUrl;
        }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? FirstName { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? LastName { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? Email { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? PictureUrl { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy_DesUser? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((FirstName is null && other.FirstName is null) || FirstName != null && FirstName.Equals(other.FirstName))) && ((LastName is null && other.LastName is null) || LastName != null && LastName.Equals(other.LastName)) && ((Email is null && other.Email is null) || Email != null && Email.Equals(other.Email)) && ((PictureUrl is null && other.PictureUrl is null) || PictureUrl != null && PictureUrl.Equals(other.PictureUrl));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy_DesUser)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (FirstName != null)
                {
                    hash ^= 397 * FirstName.GetHashCode();
                }

                if (LastName != null)
                {
                    hash ^= 397 * LastName.GetHashCode();
                }

                if (Email != null)
                {
                    hash ^= 397 * Email.GetHashCode();
                }

                if (PictureUrl != null)
                {
                    hash ^= 397 * PictureUrl.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1_DesPosition2D : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1_DesPosition2D>, IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1_DesPosition2D
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1_DesPosition2D(global::System.Int32 x, global::System.Int32 y, global::System.Decimal xMm, global::System.Decimal yMm)
        {
            X = x;
            Y = y;
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (X == other.X) && Y == other.Y && XMm == other.XMm && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * X.GetHashCode();
                hash ^= 397 * Y.GetHashCode();
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2_DesPosition2D : global::System.IEquatable<GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2_DesPosition2D>, IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2_DesPosition2D
    {
        public GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2_DesPosition2D(global::System.Int32 x, global::System.Int32 y, global::System.Decimal xMm, global::System.Decimal yMm)
        {
            X = x;
            Y = y;
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }

        public virtual global::System.Boolean Equals(GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2_DesPosition2D? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (X == other.X) && Y == other.Y && XMm == other.XMm && YMm == other.YMm;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2_DesPosition2D)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * X.GetHashCode();
                hash ^= 397 * Y.GetHashCode();
                hash ^= 397 * XMm.GetHashCode();
                hash ^= 397 * YMm.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbCommentsResult
    {
        /// <summary>
        /// Search a specific project by its unique identifier.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById? DesProjectById { get; }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById
    {
        /// <summary>
        /// The assigned name for this project.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// The summary of this project content or purpose.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// The detailed design information for this project.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design Design { get; }
    }

    /// <summary>
    /// A project manages all development stages of the PCB/PCA product lifecycle.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_DesProject : IGetPcbComments_DesProjectById
    {
    }

    /// <summary>
    /// A design manages all of the schematic, PCB, and BOM content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design
    {
        /// <summary>
        /// The most recent version of the design.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress WorkInProgress { get; }
    }

    /// <summary>
    /// A design manages all of the schematic, PCB, and BOM content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_DesDesign : IGetPcbComments_DesProjectById_Design
    {
    }

    /// <summary>
    /// The most recent version of a design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress
    {
        /// <summary>
        /// The list of variations contained in this design.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants> Variants { get; }
    }

    /// <summary>
    /// The most recent version of a design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_DesWorkInProgress : IGetPcbComments_DesProjectById_Design_WorkInProgress
    {
    }

    /// <summary>
    /// A variant contains a specific configuration of a base design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants
    {
        /// <summary>
        /// The PCB document for this design variant.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb? Pcb { get; }
    }

    /// <summary>
    /// A variant contains a specific configuration of a base design.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant : IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants
    {
    }

    /// <summary>
    /// A PCB contains design details of the physical product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb
    {
        /// <summary>
        /// The reference identifier for this PCB.
        /// </summary>
        public global::System.String DocumentId { get; }

        /// <summary>
        /// The document file name.
        /// </summary>
        public global::System.String DocumentName { get; }

        /// <summary>
        /// The list of all comment threads related to this PCB.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads> CommentThreads { get; }
    }

    /// <summary>
    /// A PCB contains design details of the physical product.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb : IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb
    {
    }

    /// <summary>
    /// A comment thread contains an initial remark associated with the design and a collection of replies.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads
    {
        /// <summary>
        /// The reference identifier for this comment thread (used by `desCreateComment`, `desDeleteComment`, `desUpdateComment`).
        /// </summary>
        public global::System.String CommentThreadId { get; }

        /// <summary>
        /// The `DateTime` for the creation of this comment thread.
        /// </summary>
        public global::System.DateTimeOffset CreatedAt { get; }

        /// <summary>
        /// The `DateTime` for the most recent modification of this comment thread.
        /// </summary>
        public global::System.DateTimeOffset ModifiedAt { get; }

        /// <summary>
        /// The information about properties related to this comment thread.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context Context { get; }

        /// <summary>
        /// The list of replies associated with this comment thread.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments> Comments { get; }
    }

    /// <summary>
    /// A comment thread contains an initial remark associated with the design and a collection of replies.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_DesCommentThread : IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads
    {
    }

    /// <summary>
    /// A comment context provides additional information about associations for a comment thread.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context
    {
        /// <summary>
        /// The area associated with a comment thread.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area Area { get; }
    }

    /// <summary>
    /// A comment context provides additional information about associations for a comment thread.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_DesCommentContext : IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context
    {
    }

    /// <summary>
    /// A comment is one of remarks associated with a comment thread or task.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments
    {
        /// <summary>
        /// The comment reference ID.
        /// </summary>
        public global::System.String CommentId { get; }

        /// <summary>
        /// The comment text.
        /// </summary>
        public global::System.String Text { get; }

        /// <summary>
        /// The creation date.
        /// </summary>
        public global::System.DateTimeOffset CreatedAt { get; }

        /// <summary>
        /// The user who created the comment.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy CreatedBy { get; }

        /// <summary>
        /// The last modification date.
        /// </summary>
        public global::System.DateTimeOffset ModifiedAt { get; }

        /// <summary>
        /// The user who modified the comment.
        /// </summary>
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy ModifiedBy { get; }
    }

    /// <summary>
    /// A comment is one of remarks associated with a comment thread or task.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_DesComment : IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area
    {
        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1 Pos1 { get; }

        public global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2 Pos2 { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_DesRectangle : IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area
    {
    }

    /// <summary>
    /// User details with the identifier and nullable extra fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy
    {
        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? FirstName { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? LastName { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? Email { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? PictureUrl { get; }
    }

    /// <summary>
    /// User details with the identifier and nullable extra fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy_DesUser : IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy
    {
    }

    /// <summary>
    /// User details with the identifier and nullable extra fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy
    {
        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? FirstName { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? LastName { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? Email { get; }

        /// <summary>
        /// Null if the user no longer exists.
        /// </summary>
        public global::System.String? PictureUrl { get; }
    }

    /// <summary>
    /// User details with the identifier and nullable extra fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy_DesUser : IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1
    {
        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1_DesPosition2D : IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2
    {
        public global::System.Int32 X { get; }

        public global::System.Int32 Y { get; }

        public global::System.Decimal XMm { get; }

        public global::System.Decimal YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2_DesPosition2D : IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesCreateCommentThreadInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _desDocumentTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _desCommentContextTypeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _desRectangleInputFormatter = default !;
        public global::System.String TypeName => "DesCreateCommentThreadInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _desDocumentTypeFormatter = serializerResolver.GetInputValueFormatter("DesDocumentType");
            _desCommentContextTypeFormatter = serializerResolver.GetInputValueFormatter("DesCommentContextType");
            _desRectangleInputFormatter = serializerResolver.GetInputValueFormatter("DesRectangleInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Nexar.Client.DesCreateCommentThreadInput;
            var inputInfo = runtimeValue as global::Nexar.Client.State.IDesCreateCommentThreadInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEntityIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("entityId", FormatEntityId(input.EntityId)));
            }

            if (inputInfo.IsDocumentIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("documentId", FormatDocumentId(input.DocumentId)));
            }

            if (inputInfo.IsDocumentNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("documentName", FormatDocumentName(input.DocumentName)));
            }

            if (inputInfo.IsDocumentTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("documentType", FormatDocumentType(input.DocumentType)));
            }

            if (inputInfo.IsTextSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("text", FormatText(input.Text)));
            }

            if (inputInfo.IsCommentContextTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("commentContextType", FormatCommentContextType(input.CommentContextType)));
            }

            if (inputInfo.IsItemAsDesignItemIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("itemAsDesignItemId", FormatItemAsDesignItemId(input.ItemAsDesignItemId)));
            }

            if (inputInfo.IsItemAsInternalObjectIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("itemAsInternalObjectId", FormatItemAsInternalObjectId(input.ItemAsInternalObjectId)));
            }

            if (inputInfo.IsAreaSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("area", FormatArea(input.Area)));
            }

            if (inputInfo.IsReleaseIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("releaseId", FormatReleaseId(input.ReleaseId)));
            }

            return fields;
        }

        private global::System.Object? FormatEntityId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _iDFormatter.Format(input);
        }

        private global::System.Object? FormatDocumentId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatDocumentName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDocumentType(global::Nexar.Client.DesDocumentType input)
        {
            return _desDocumentTypeFormatter.Format(input);
        }

        private global::System.Object? FormatText(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatCommentContextType(global::Nexar.Client.DesCommentContextType input)
        {
            return _desCommentContextTypeFormatter.Format(input);
        }

        private global::System.Object? FormatItemAsDesignItemId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _iDFormatter.Format(input);
            }
        }

        private global::System.Object? FormatItemAsInternalObjectId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatArea(global::Nexar.Client.DesRectangleInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _desRectangleInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatReleaseId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesCreateCommentThreadInput : global::Nexar.Client.State.IDesCreateCommentThreadInputInfo, global::System.IEquatable<DesCreateCommentThreadInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DesCreateCommentThreadInput)obj);
        }

        public virtual global::System.Boolean Equals(DesCreateCommentThreadInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EntityId.Equals(other.EntityId)) && DocumentId.Equals(other.DocumentId) && ((DocumentName is null && other.DocumentName is null) || DocumentName != null && DocumentName.Equals(other.DocumentName)) && DocumentType.Equals(other.DocumentType) && Text.Equals(other.Text) && CommentContextType.Equals(other.CommentContextType) && ((ItemAsDesignItemId is null && other.ItemAsDesignItemId is null) || ItemAsDesignItemId != null && ItemAsDesignItemId.Equals(other.ItemAsDesignItemId)) && ((ItemAsInternalObjectId is null && other.ItemAsInternalObjectId is null) || ItemAsInternalObjectId != null && ItemAsInternalObjectId.Equals(other.ItemAsInternalObjectId)) && ((Area is null && other.Area is null) || Area != null && Area.Equals(other.Area)) && ((ReleaseId is null && other.ReleaseId is null) || ReleaseId != null && ReleaseId.Equals(other.ReleaseId));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EntityId.GetHashCode();
                hash ^= 397 * DocumentId.GetHashCode();
                if (DocumentName != null)
                {
                    hash ^= 397 * DocumentName.GetHashCode();
                }

                hash ^= 397 * DocumentType.GetHashCode();
                hash ^= 397 * Text.GetHashCode();
                hash ^= 397 * CommentContextType.GetHashCode();
                if (ItemAsDesignItemId != null)
                {
                    hash ^= 397 * ItemAsDesignItemId.GetHashCode();
                }

                if (ItemAsInternalObjectId != null)
                {
                    hash ^= 397 * ItemAsInternalObjectId.GetHashCode();
                }

                if (Area != null)
                {
                    hash ^= 397 * Area.GetHashCode();
                }

                if (ReleaseId != null)
                {
                    hash ^= 397 * ReleaseId.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_entityId = default !;
        private global::System.Boolean _set_entityId;
        private global::System.String _value_documentId = default !;
        private global::System.Boolean _set_documentId;
        private global::System.String? _value_documentName;
        private global::System.Boolean _set_documentName;
        private global::Nexar.Client.DesDocumentType _value_documentType;
        private global::System.Boolean _set_documentType;
        private global::System.String _value_text = default !;
        private global::System.Boolean _set_text;
        private global::Nexar.Client.DesCommentContextType _value_commentContextType;
        private global::System.Boolean _set_commentContextType;
        private global::System.String? _value_itemAsDesignItemId;
        private global::System.Boolean _set_itemAsDesignItemId;
        private global::System.String? _value_itemAsInternalObjectId;
        private global::System.Boolean _set_itemAsInternalObjectId;
        private global::Nexar.Client.DesRectangleInput? _value_area;
        private global::System.Boolean _set_area;
        private global::System.String? _value_releaseId;
        private global::System.Boolean _set_releaseId;
        public global::System.String EntityId
        {
            get => _value_entityId;
            set
            {
                _set_entityId = true;
                _value_entityId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentThreadInputInfo.IsEntityIdSet => _set_entityId;
        public global::System.String DocumentId
        {
            get => _value_documentId;
            set
            {
                _set_documentId = true;
                _value_documentId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentThreadInputInfo.IsDocumentIdSet => _set_documentId;
        public global::System.String? DocumentName
        {
            get => _value_documentName;
            set
            {
                _set_documentName = true;
                _value_documentName = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentThreadInputInfo.IsDocumentNameSet => _set_documentName;
        public global::Nexar.Client.DesDocumentType DocumentType
        {
            get => _value_documentType;
            set
            {
                _set_documentType = true;
                _value_documentType = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentThreadInputInfo.IsDocumentTypeSet => _set_documentType;
        public global::System.String Text
        {
            get => _value_text;
            set
            {
                _set_text = true;
                _value_text = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentThreadInputInfo.IsTextSet => _set_text;
        public global::Nexar.Client.DesCommentContextType CommentContextType
        {
            get => _value_commentContextType;
            set
            {
                _set_commentContextType = true;
                _value_commentContextType = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentThreadInputInfo.IsCommentContextTypeSet => _set_commentContextType;
        public global::System.String? ItemAsDesignItemId
        {
            get => _value_itemAsDesignItemId;
            set
            {
                _set_itemAsDesignItemId = true;
                _value_itemAsDesignItemId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentThreadInputInfo.IsItemAsDesignItemIdSet => _set_itemAsDesignItemId;
        public global::System.String? ItemAsInternalObjectId
        {
            get => _value_itemAsInternalObjectId;
            set
            {
                _set_itemAsInternalObjectId = true;
                _value_itemAsInternalObjectId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentThreadInputInfo.IsItemAsInternalObjectIdSet => _set_itemAsInternalObjectId;
        public global::Nexar.Client.DesRectangleInput? Area
        {
            get => _value_area;
            set
            {
                _set_area = true;
                _value_area = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentThreadInputInfo.IsAreaSet => _set_area;
        public global::System.String? ReleaseId
        {
            get => _value_releaseId;
            set
            {
                _set_releaseId = true;
                _value_releaseId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentThreadInputInfo.IsReleaseIdSet => _set_releaseId;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesRectangleInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _desPosition2DInputFormatter = default !;
        public global::System.String TypeName => "DesRectangleInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _desPosition2DInputFormatter = serializerResolver.GetInputValueFormatter("DesPosition2DInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Nexar.Client.DesRectangleInput;
            var inputInfo = runtimeValue as global::Nexar.Client.State.IDesRectangleInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsPos1Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("pos1", FormatPos1(input.Pos1)));
            }

            if (inputInfo.IsPos2Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("pos2", FormatPos2(input.Pos2)));
            }

            return fields;
        }

        private global::System.Object? FormatPos1(global::Nexar.Client.DesPosition2DInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _desPosition2DInputFormatter.Format(input);
        }

        private global::System.Object? FormatPos2(global::Nexar.Client.DesPosition2DInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _desPosition2DInputFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesRectangleInput : global::Nexar.Client.State.IDesRectangleInputInfo, global::System.IEquatable<DesRectangleInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DesRectangleInput)obj);
        }

        public virtual global::System.Boolean Equals(DesRectangleInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Pos1.Equals(other.Pos1)) && Pos2.Equals(other.Pos2);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Pos1.GetHashCode();
                hash ^= 397 * Pos2.GetHashCode();
                return hash;
            }
        }

        private global::Nexar.Client.DesPosition2DInput _value_pos1 = default !;
        private global::System.Boolean _set_pos1;
        private global::Nexar.Client.DesPosition2DInput _value_pos2 = default !;
        private global::System.Boolean _set_pos2;
        public global::Nexar.Client.DesPosition2DInput Pos1
        {
            get => _value_pos1;
            set
            {
                _set_pos1 = true;
                _value_pos1 = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesRectangleInputInfo.IsPos1Set => _set_pos1;
        public global::Nexar.Client.DesPosition2DInput Pos2
        {
            get => _value_pos2;
            set
            {
                _set_pos2 = true;
                _value_pos2 = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesRectangleInputInfo.IsPos2Set => _set_pos2;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesPosition2DInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter = default !;
        public global::System.String TypeName => "DesPosition2DInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Nexar.Client.DesPosition2DInput;
            var inputInfo = runtimeValue as global::Nexar.Client.State.IDesPosition2DInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsXSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("x", FormatX(input.X)));
            }

            if (inputInfo.IsYSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("y", FormatY(input.Y)));
            }

            return fields;
        }

        private global::System.Object? FormatX(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }

        private global::System.Object? FormatY(global::System.Int32 input)
        {
            return _intFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesPosition2DInput : global::Nexar.Client.State.IDesPosition2DInputInfo, global::System.IEquatable<DesPosition2DInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DesPosition2DInput)obj);
        }

        public virtual global::System.Boolean Equals(DesPosition2DInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (X == other.X) && Y == other.Y;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * X.GetHashCode();
                hash ^= 397 * Y.GetHashCode();
                return hash;
            }
        }

        private global::System.Int32 _value_x;
        private global::System.Boolean _set_x;
        private global::System.Int32 _value_y;
        private global::System.Boolean _set_y;
        public global::System.Int32 X
        {
            get => _value_x;
            set
            {
                _set_x = true;
                _value_x = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesPosition2DInputInfo.IsXSet => _set_x;
        public global::System.Int32 Y
        {
            get => _value_y;
            set
            {
                _set_y = true;
                _value_y = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesPosition2DInputInfo.IsYSet => _set_y;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDeleteCommentThreadInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "DesDeleteCommentThreadInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Nexar.Client.DesDeleteCommentThreadInput;
            var inputInfo = runtimeValue as global::Nexar.Client.State.IDesDeleteCommentThreadInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEntityIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("entityId", FormatEntityId(input.EntityId)));
            }

            if (inputInfo.IsCommentThreadIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("commentThreadId", FormatCommentThreadId(input.CommentThreadId)));
            }

            return fields;
        }

        private global::System.Object? FormatEntityId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _iDFormatter.Format(input);
        }

        private global::System.Object? FormatCommentThreadId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDeleteCommentThreadInput : global::Nexar.Client.State.IDesDeleteCommentThreadInputInfo, global::System.IEquatable<DesDeleteCommentThreadInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DesDeleteCommentThreadInput)obj);
        }

        public virtual global::System.Boolean Equals(DesDeleteCommentThreadInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EntityId.Equals(other.EntityId)) && CommentThreadId.Equals(other.CommentThreadId);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EntityId.GetHashCode();
                hash ^= 397 * CommentThreadId.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_entityId = default !;
        private global::System.Boolean _set_entityId;
        private global::System.String _value_commentThreadId = default !;
        private global::System.Boolean _set_commentThreadId;
        public global::System.String EntityId
        {
            get => _value_entityId;
            set
            {
                _set_entityId = true;
                _value_entityId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesDeleteCommentThreadInputInfo.IsEntityIdSet => _set_entityId;
        public global::System.String CommentThreadId
        {
            get => _value_commentThreadId;
            set
            {
                _set_commentThreadId = true;
                _value_commentThreadId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesDeleteCommentThreadInputInfo.IsCommentThreadIdSet => _set_commentThreadId;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesCreateCommentInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "DesCreateCommentInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Nexar.Client.DesCreateCommentInput;
            var inputInfo = runtimeValue as global::Nexar.Client.State.IDesCreateCommentInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEntityIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("entityId", FormatEntityId(input.EntityId)));
            }

            if (inputInfo.IsCommentThreadIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("commentThreadId", FormatCommentThreadId(input.CommentThreadId)));
            }

            if (inputInfo.IsTextSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("text", FormatText(input.Text)));
            }

            return fields;
        }

        private global::System.Object? FormatEntityId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _iDFormatter.Format(input);
        }

        private global::System.Object? FormatCommentThreadId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatText(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesCreateCommentInput : global::Nexar.Client.State.IDesCreateCommentInputInfo, global::System.IEquatable<DesCreateCommentInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DesCreateCommentInput)obj);
        }

        public virtual global::System.Boolean Equals(DesCreateCommentInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EntityId.Equals(other.EntityId)) && CommentThreadId.Equals(other.CommentThreadId) && Text.Equals(other.Text);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EntityId.GetHashCode();
                hash ^= 397 * CommentThreadId.GetHashCode();
                hash ^= 397 * Text.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_entityId = default !;
        private global::System.Boolean _set_entityId;
        private global::System.String _value_commentThreadId = default !;
        private global::System.Boolean _set_commentThreadId;
        private global::System.String _value_text = default !;
        private global::System.Boolean _set_text;
        public global::System.String EntityId
        {
            get => _value_entityId;
            set
            {
                _set_entityId = true;
                _value_entityId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentInputInfo.IsEntityIdSet => _set_entityId;
        public global::System.String CommentThreadId
        {
            get => _value_commentThreadId;
            set
            {
                _set_commentThreadId = true;
                _value_commentThreadId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentInputInfo.IsCommentThreadIdSet => _set_commentThreadId;
        public global::System.String Text
        {
            get => _value_text;
            set
            {
                _set_text = true;
                _value_text = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesCreateCommentInputInfo.IsTextSet => _set_text;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDeleteCommentInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "DesDeleteCommentInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Nexar.Client.DesDeleteCommentInput;
            var inputInfo = runtimeValue as global::Nexar.Client.State.IDesDeleteCommentInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEntityIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("entityId", FormatEntityId(input.EntityId)));
            }

            if (inputInfo.IsCommentThreadIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("commentThreadId", FormatCommentThreadId(input.CommentThreadId)));
            }

            if (inputInfo.IsCommentIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("commentId", FormatCommentId(input.CommentId)));
            }

            return fields;
        }

        private global::System.Object? FormatEntityId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _iDFormatter.Format(input);
        }

        private global::System.Object? FormatCommentThreadId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatCommentId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDeleteCommentInput : global::Nexar.Client.State.IDesDeleteCommentInputInfo, global::System.IEquatable<DesDeleteCommentInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DesDeleteCommentInput)obj);
        }

        public virtual global::System.Boolean Equals(DesDeleteCommentInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EntityId.Equals(other.EntityId)) && CommentThreadId.Equals(other.CommentThreadId) && CommentId.Equals(other.CommentId);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EntityId.GetHashCode();
                hash ^= 397 * CommentThreadId.GetHashCode();
                hash ^= 397 * CommentId.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_entityId = default !;
        private global::System.Boolean _set_entityId;
        private global::System.String _value_commentThreadId = default !;
        private global::System.Boolean _set_commentThreadId;
        private global::System.String _value_commentId = default !;
        private global::System.Boolean _set_commentId;
        public global::System.String EntityId
        {
            get => _value_entityId;
            set
            {
                _set_entityId = true;
                _value_entityId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesDeleteCommentInputInfo.IsEntityIdSet => _set_entityId;
        public global::System.String CommentThreadId
        {
            get => _value_commentThreadId;
            set
            {
                _set_commentThreadId = true;
                _value_commentThreadId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesDeleteCommentInputInfo.IsCommentThreadIdSet => _set_commentThreadId;
        public global::System.String CommentId
        {
            get => _value_commentId;
            set
            {
                _set_commentId = true;
                _value_commentId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesDeleteCommentInputInfo.IsCommentIdSet => _set_commentId;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesUpdateCommentInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "DesUpdateCommentInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::Nexar.Client.DesUpdateCommentInput;
            var inputInfo = runtimeValue as global::Nexar.Client.State.IDesUpdateCommentInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEntityIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("entityId", FormatEntityId(input.EntityId)));
            }

            if (inputInfo.IsCommentThreadIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("commentThreadId", FormatCommentThreadId(input.CommentThreadId)));
            }

            if (inputInfo.IsCommentIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("commentId", FormatCommentId(input.CommentId)));
            }

            if (inputInfo.IsTextSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("text", FormatText(input.Text)));
            }

            return fields;
        }

        private global::System.Object? FormatEntityId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _iDFormatter.Format(input);
        }

        private global::System.Object? FormatCommentThreadId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatCommentId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatText(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesUpdateCommentInput : global::Nexar.Client.State.IDesUpdateCommentInputInfo, global::System.IEquatable<DesUpdateCommentInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DesUpdateCommentInput)obj);
        }

        public virtual global::System.Boolean Equals(DesUpdateCommentInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (EntityId.Equals(other.EntityId)) && CommentThreadId.Equals(other.CommentThreadId) && CommentId.Equals(other.CommentId) && Text.Equals(other.Text);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * EntityId.GetHashCode();
                hash ^= 397 * CommentThreadId.GetHashCode();
                hash ^= 397 * CommentId.GetHashCode();
                hash ^= 397 * Text.GetHashCode();
                return hash;
            }
        }

        private global::System.String _value_entityId = default !;
        private global::System.Boolean _set_entityId;
        private global::System.String _value_commentThreadId = default !;
        private global::System.Boolean _set_commentThreadId;
        private global::System.String _value_commentId = default !;
        private global::System.Boolean _set_commentId;
        private global::System.String _value_text = default !;
        private global::System.Boolean _set_text;
        public global::System.String EntityId
        {
            get => _value_entityId;
            set
            {
                _set_entityId = true;
                _value_entityId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesUpdateCommentInputInfo.IsEntityIdSet => _set_entityId;
        public global::System.String CommentThreadId
        {
            get => _value_commentThreadId;
            set
            {
                _set_commentThreadId = true;
                _value_commentThreadId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesUpdateCommentInputInfo.IsCommentThreadIdSet => _set_commentThreadId;
        public global::System.String CommentId
        {
            get => _value_commentId;
            set
            {
                _set_commentId = true;
                _value_commentId = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesUpdateCommentInputInfo.IsCommentIdSet => _set_commentId;
        public global::System.String Text
        {
            get => _value_text;
            set
            {
                _set_text = true;
                _value_text = value;
            }
        }

        global::System.Boolean global::Nexar.Client.State.IDesUpdateCommentInputInfo.IsTextSet => _set_text;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public enum DesDocumentType
    {
        Schematic,
        Pcb
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDocumentTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, DesDocumentType>
    {
        public global::System.String TypeName => "DesDocumentType";
        public DesDocumentType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "SCHEMATIC" => DesDocumentType.Schematic,
                "PCB" => DesDocumentType.Pcb,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                DesDocumentType.Schematic => "SCHEMATIC",
                DesDocumentType.Pcb => "PCB",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public enum DesCommentContextType
    {
        None,
        Component,
        Track,
        Via,
        Area
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesCommentContextTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, DesCommentContextType>
    {
        public global::System.String TypeName => "DesCommentContextType";
        public DesCommentContextType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "NONE" => DesCommentContextType.None,
                "COMPONENT" => DesCommentContextType.Component,
                "TRACK" => DesCommentContextType.Track,
                "VIA" => DesCommentContextType.Via,
                "AREA" => DesCommentContextType.Area,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                DesCommentContextType.None => "NONE",
                DesCommentContextType.Component => "COMPONENT",
                DesCommentContextType.Track => "TRACK",
                DesCommentContextType.Via => "VIA",
                DesCommentContextType.Area => "AREA",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public enum DesLayerType
    {
        Abstract,
        Unknown,
        Physical,
        Dielectric,
        Overlay,
        SolderMask,
        BikiniCoverlay,
        PasteMask,
        Mechanical,
        Foil,
        Plane,
        Signal,
        SurfaceFinish,
        Core,
        Prepreg,
        Plating,
        Adhesive,
        Stiffener,
        Misc,
        PeLayer,
        Conductive,
        NonConductive
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesLayerTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, DesLayerType>
    {
        public global::System.String TypeName => "DesLayerType";
        public DesLayerType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "ABSTRACT" => DesLayerType.Abstract,
                "UNKNOWN" => DesLayerType.Unknown,
                "PHYSICAL" => DesLayerType.Physical,
                "DIELECTRIC" => DesLayerType.Dielectric,
                "OVERLAY" => DesLayerType.Overlay,
                "SOLDER_MASK" => DesLayerType.SolderMask,
                "BIKINI_COVERLAY" => DesLayerType.BikiniCoverlay,
                "PASTE_MASK" => DesLayerType.PasteMask,
                "MECHANICAL" => DesLayerType.Mechanical,
                "FOIL" => DesLayerType.Foil,
                "PLANE" => DesLayerType.Plane,
                "SIGNAL" => DesLayerType.Signal,
                "SURFACE_FINISH" => DesLayerType.SurfaceFinish,
                "CORE" => DesLayerType.Core,
                "PREPREG" => DesLayerType.Prepreg,
                "PLATING" => DesLayerType.Plating,
                "ADHESIVE" => DesLayerType.Adhesive,
                "STIFFENER" => DesLayerType.Stiffener,
                "MISC" => DesLayerType.Misc,
                "PE_LAYER" => DesLayerType.PeLayer,
                "CONDUCTIVE" => DesLayerType.Conductive,
                "NON_CONDUCTIVE" => DesLayerType.NonConductive,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                DesLayerType.Abstract => "ABSTRACT",
                DesLayerType.Unknown => "UNKNOWN",
                DesLayerType.Physical => "PHYSICAL",
                DesLayerType.Dielectric => "DIELECTRIC",
                DesLayerType.Overlay => "OVERLAY",
                DesLayerType.SolderMask => "SOLDER_MASK",
                DesLayerType.BikiniCoverlay => "BIKINI_COVERLAY",
                DesLayerType.PasteMask => "PASTE_MASK",
                DesLayerType.Mechanical => "MECHANICAL",
                DesLayerType.Foil => "FOIL",
                DesLayerType.Plane => "PLANE",
                DesLayerType.Signal => "SIGNAL",
                DesLayerType.SurfaceFinish => "SURFACE_FINISH",
                DesLayerType.Core => "CORE",
                DesLayerType.Prepreg => "PREPREG",
                DesLayerType.Plating => "PLATING",
                DesLayerType.Adhesive => "ADHESIVE",
                DesLayerType.Stiffener => "STIFFENER",
                DesLayerType.Misc => "MISC",
                DesLayerType.PeLayer => "PE_LAYER",
                DesLayerType.Conductive => "CONDUCTIVE",
                DesLayerType.NonConductive => "NON_CONDUCTIVE",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public enum DesPadType
    {
        Smd,
        Free
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesPadTypeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, DesPadType>
    {
        public global::System.String TypeName => "DesPadType";
        public DesPadType Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "SMD" => DesPadType.Smd,
                "FREE" => DesPadType.Free,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                DesPadType.Smd => "SMD",
                DesPadType.Free => "FREE",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public enum DesPrimitiveShape
    {
        Round,
        Rectangle,
        RoundedRectangle
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesPrimitiveShapeSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, DesPrimitiveShape>
    {
        public global::System.String TypeName => "DesPrimitiveShape";
        public DesPrimitiveShape Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "ROUND" => DesPrimitiveShape.Round,
                "RECTANGLE" => DesPrimitiveShape.Rectangle,
                "ROUNDED_RECTANGLE" => DesPrimitiveShape.RoundedRectangle,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                DesPrimitiveShape.Round => "ROUND",
                DesPrimitiveShape.Rectangle => "RECTANGLE",
                DesPrimitiveShape.RoundedRectangle => "ROUNDED_RECTANGLE",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCommentThread GraphQL operation
    /// <code>
    /// mutation CreateCommentThread($input: DesCreateCommentThreadInput!) {
    ///   desCreateCommentThread(input: $input) {
    ///     __typename
    ///     commentThreadId
    ///     commentId
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentThreadMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateCommentThreadMutationDocument()
        {
        }

        public static CreateCommentThreadMutationDocument Instance { get; } = new CreateCommentThreadMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x28, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x44, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7b1b79189c1c9002f910e439dacd85b7");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCommentThread GraphQL operation
    /// <code>
    /// mutation CreateCommentThread($input: DesCreateCommentThreadInput!) {
    ///   desCreateCommentThread(input: $input) {
    ///     __typename
    ///     commentThreadId
    ///     commentId
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentThreadMutation : global::Nexar.Client.ICreateCommentThreadMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateCommentThreadResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _desCreateCommentThreadInputFormatter;
        public CreateCommentThreadMutation(global::StrawberryShake.IOperationExecutor<ICreateCommentThreadResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _desCreateCommentThreadInputFormatter = serializerResolver.GetInputValueFormatter("DesCreateCommentThreadInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateCommentThreadResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateCommentThreadResult>> ExecuteAsync(global::Nexar.Client.DesCreateCommentThreadInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateCommentThreadResult>> Watch(global::Nexar.Client.DesCreateCommentThreadInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Nexar.Client.DesCreateCommentThreadInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateCommentThreadMutationDocument.Instance.Hash.Value, name: "CreateCommentThread", document: CreateCommentThreadMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::Nexar.Client.DesCreateCommentThreadInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _desCreateCommentThreadInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateCommentThread GraphQL operation
    /// <code>
    /// mutation CreateCommentThread($input: DesCreateCommentThreadInput!) {
    ///   desCreateCommentThread(input: $input) {
    ///     __typename
    ///     commentThreadId
    ///     commentId
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateCommentThreadMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateCommentThreadResult>> ExecuteAsync(global::Nexar.Client.DesCreateCommentThreadInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateCommentThreadResult>> Watch(global::Nexar.Client.DesCreateCommentThreadInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteCommentThread GraphQL operation
    /// <code>
    /// mutation DeleteCommentThread($input: DesDeleteCommentThreadInput!) {
    ///   desDeleteCommentThread(input: $input) {
    ///     __typename
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentThreadMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteCommentThreadMutationDocument()
        {
        }

        public static DeleteCommentThreadMutationDocument Instance { get; } = new DeleteCommentThreadMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x28, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x44, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "06d940fcfd1f4acd1ddc8f301de703d3");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteCommentThread GraphQL operation
    /// <code>
    /// mutation DeleteCommentThread($input: DesDeleteCommentThreadInput!) {
    ///   desDeleteCommentThread(input: $input) {
    ///     __typename
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentThreadMutation : global::Nexar.Client.IDeleteCommentThreadMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteCommentThreadResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _desDeleteCommentThreadInputFormatter;
        public DeleteCommentThreadMutation(global::StrawberryShake.IOperationExecutor<IDeleteCommentThreadResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _desDeleteCommentThreadInputFormatter = serializerResolver.GetInputValueFormatter("DesDeleteCommentThreadInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteCommentThreadResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteCommentThreadResult>> ExecuteAsync(global::Nexar.Client.DesDeleteCommentThreadInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteCommentThreadResult>> Watch(global::Nexar.Client.DesDeleteCommentThreadInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Nexar.Client.DesDeleteCommentThreadInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteCommentThreadMutationDocument.Instance.Hash.Value, name: "DeleteCommentThread", document: DeleteCommentThreadMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::Nexar.Client.DesDeleteCommentThreadInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _desDeleteCommentThreadInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteCommentThread GraphQL operation
    /// <code>
    /// mutation DeleteCommentThread($input: DesDeleteCommentThreadInput!) {
    ///   desDeleteCommentThread(input: $input) {
    ///     __typename
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteCommentThreadMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteCommentThreadResult>> ExecuteAsync(global::Nexar.Client.DesDeleteCommentThreadInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteCommentThreadResult>> Watch(global::Nexar.Client.DesDeleteCommentThreadInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CreateComment GraphQL operation
    /// <code>
    /// mutation CreateComment($input: DesCreateCommentInput!) {
    ///   desCreateComment(input: $input) {
    ///     __typename
    ///     commentId
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentMutationDocument : global::StrawberryShake.IDocument
    {
        private CreateCommentMutationDocument()
        {
        }

        public static CreateCommentMutationDocument Instance { get; } = new CreateCommentMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x44, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "539e176cae4027247bb3350b3db7aa99");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateComment GraphQL operation
    /// <code>
    /// mutation CreateComment($input: DesCreateCommentInput!) {
    ///   desCreateComment(input: $input) {
    ///     __typename
    ///     commentId
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentMutation : global::Nexar.Client.ICreateCommentMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICreateCommentResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _desCreateCommentInputFormatter;
        public CreateCommentMutation(global::StrawberryShake.IOperationExecutor<ICreateCommentResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _desCreateCommentInputFormatter = serializerResolver.GetInputValueFormatter("DesCreateCommentInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICreateCommentResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateCommentResult>> ExecuteAsync(global::Nexar.Client.DesCreateCommentInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateCommentResult>> Watch(global::Nexar.Client.DesCreateCommentInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Nexar.Client.DesCreateCommentInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CreateCommentMutationDocument.Instance.Hash.Value, name: "CreateComment", document: CreateCommentMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::Nexar.Client.DesCreateCommentInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _desCreateCommentInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CreateComment GraphQL operation
    /// <code>
    /// mutation CreateComment($input: DesCreateCommentInput!) {
    ///   desCreateComment(input: $input) {
    ///     __typename
    ///     commentId
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface ICreateCommentMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICreateCommentResult>> ExecuteAsync(global::Nexar.Client.DesCreateCommentInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICreateCommentResult>> Watch(global::Nexar.Client.DesCreateCommentInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the DeleteComment GraphQL operation
    /// <code>
    /// mutation DeleteComment($input: DesDeleteCommentInput!) {
    ///   desDeleteComment(input: $input) {
    ///     __typename
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentMutationDocument : global::StrawberryShake.IDocument
    {
        private DeleteCommentMutationDocument()
        {
        }

        public static DeleteCommentMutationDocument Instance { get; } = new DeleteCommentMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x44, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c54751fd3d1ef55ab0ecf7375c32bb28");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteComment GraphQL operation
    /// <code>
    /// mutation DeleteComment($input: DesDeleteCommentInput!) {
    ///   desDeleteComment(input: $input) {
    ///     __typename
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentMutation : global::Nexar.Client.IDeleteCommentMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeleteCommentResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _desDeleteCommentInputFormatter;
        public DeleteCommentMutation(global::StrawberryShake.IOperationExecutor<IDeleteCommentResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _desDeleteCommentInputFormatter = serializerResolver.GetInputValueFormatter("DesDeleteCommentInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeleteCommentResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteCommentResult>> ExecuteAsync(global::Nexar.Client.DesDeleteCommentInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteCommentResult>> Watch(global::Nexar.Client.DesDeleteCommentInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Nexar.Client.DesDeleteCommentInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeleteCommentMutationDocument.Instance.Hash.Value, name: "DeleteComment", document: DeleteCommentMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::Nexar.Client.DesDeleteCommentInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _desDeleteCommentInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeleteComment GraphQL operation
    /// <code>
    /// mutation DeleteComment($input: DesDeleteCommentInput!) {
    ///   desDeleteComment(input: $input) {
    ///     __typename
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IDeleteCommentMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeleteCommentResult>> ExecuteAsync(global::Nexar.Client.DesDeleteCommentInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeleteCommentResult>> Watch(global::Nexar.Client.DesDeleteCommentInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the UpdateComment GraphQL operation
    /// <code>
    /// mutation UpdateComment($input: DesUpdateCommentInput!) {
    ///   desUpdateComment(input: $input) {
    ///     __typename
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class UpdateCommentMutationDocument : global::StrawberryShake.IDocument
    {
        private UpdateCommentMutationDocument()
        {
        }

        public static UpdateCommentMutationDocument Instance { get; } = new UpdateCommentMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x44, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x3a, 0x20, 0x24, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8fa0af69e4dcd2de0b156379586cf73f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateComment GraphQL operation
    /// <code>
    /// mutation UpdateComment($input: DesUpdateCommentInput!) {
    ///   desUpdateComment(input: $input) {
    ///     __typename
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class UpdateCommentMutation : global::Nexar.Client.IUpdateCommentMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IUpdateCommentResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _desUpdateCommentInputFormatter;
        public UpdateCommentMutation(global::StrawberryShake.IOperationExecutor<IUpdateCommentResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _desUpdateCommentInputFormatter = serializerResolver.GetInputValueFormatter("DesUpdateCommentInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IUpdateCommentResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCommentResult>> ExecuteAsync(global::Nexar.Client.DesUpdateCommentInput input, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(input);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCommentResult>> Watch(global::Nexar.Client.DesUpdateCommentInput input, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(input);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::Nexar.Client.DesUpdateCommentInput input)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("input", FormatInput(input));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: UpdateCommentMutationDocument.Instance.Hash.Value, name: "UpdateComment", document: UpdateCommentMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatInput(global::Nexar.Client.DesUpdateCommentInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _desUpdateCommentInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the UpdateComment GraphQL operation
    /// <code>
    /// mutation UpdateComment($input: DesUpdateCommentInput!) {
    ///   desUpdateComment(input: $input) {
    ///     __typename
    ///     errors {
    ///       __typename
    ///       message
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IUpdateCommentMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IUpdateCommentResult>> ExecuteAsync(global::Nexar.Client.DesUpdateCommentInput input, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IUpdateCommentResult>> Watch(global::Nexar.Client.DesUpdateCommentInput input, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetWorkspaces GraphQL operation
    /// <code>
    /// query GetWorkspaces {
    ///   desWorkspaces {
    ///     __typename
    ///     id
    ///     url
    ///     name
    ///     description
    ///     isDefault
    ///     location {
    ///       __typename
    ///       name
    ///       apiServiceUrl
    ///       filesServiceUrl
    ///     }
    ///     ... on DesWorkspace {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetWorkspacesQueryDocument : global::StrawberryShake.IDocument
    {
        private GetWorkspacesQueryDocument()
        {
        }

        public static GetWorkspacesQueryDocument Instance { get; } = new GetWorkspacesQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x73, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a0bc5d03c5d4f4523571eeaec0dc6fb9");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetWorkspaces GraphQL operation
    /// <code>
    /// query GetWorkspaces {
    ///   desWorkspaces {
    ///     __typename
    ///     id
    ///     url
    ///     name
    ///     description
    ///     isDefault
    ///     location {
    ///       __typename
    ///       name
    ///       apiServiceUrl
    ///       filesServiceUrl
    ///     }
    ///     ... on DesWorkspace {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetWorkspacesQuery : global::Nexar.Client.IGetWorkspacesQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetWorkspacesResult> _operationExecutor;
        public GetWorkspacesQuery(global::StrawberryShake.IOperationExecutor<IGetWorkspacesResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetWorkspacesResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetWorkspacesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetWorkspacesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetWorkspacesQueryDocument.Instance.Hash.Value, name: "GetWorkspaces", document: GetWorkspacesQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetWorkspaces GraphQL operation
    /// <code>
    /// query GetWorkspaces {
    ///   desWorkspaces {
    ///     __typename
    ///     id
    ///     url
    ///     name
    ///     description
    ///     isDefault
    ///     location {
    ///       __typename
    ///       name
    ///       apiServiceUrl
    ///       filesServiceUrl
    ///     }
    ///     ... on DesWorkspace {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetWorkspacesQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetWorkspacesResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetWorkspacesResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetProjectInfo GraphQL operation
    /// <code>
    /// query GetProjectInfo($workspaceUrl: String!) {
    ///   desProjects(workspaceUrl: $workspaceUrl) {
    ///     __typename
    ///     totalCount
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectInfoQueryDocument : global::StrawberryShake.IDocument
    {
        private GetProjectInfoQueryDocument()
        {
        }

        public static GetProjectInfoQueryDocument Instance { get; } = new GetProjectInfoQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x28, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x28, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x3a, 0x20, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "db39828ed645c27a3358f8a9aa530b88");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProjectInfo GraphQL operation
    /// <code>
    /// query GetProjectInfo($workspaceUrl: String!) {
    ///   desProjects(workspaceUrl: $workspaceUrl) {
    ///     __typename
    ///     totalCount
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectInfoQuery : global::Nexar.Client.IGetProjectInfoQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetProjectInfoResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetProjectInfoQuery(global::StrawberryShake.IOperationExecutor<IGetProjectInfoResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetProjectInfoResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProjectInfoResult>> ExecuteAsync(global::System.String workspaceUrl, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(workspaceUrl);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProjectInfoResult>> Watch(global::System.String workspaceUrl, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(workspaceUrl);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String workspaceUrl)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("workspaceUrl", FormatWorkspaceUrl(workspaceUrl));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetProjectInfoQueryDocument.Instance.Hash.Value, name: "GetProjectInfo", document: GetProjectInfoQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatWorkspaceUrl(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProjectInfo GraphQL operation
    /// <code>
    /// query GetProjectInfo($workspaceUrl: String!) {
    ///   desProjects(workspaceUrl: $workspaceUrl) {
    ///     __typename
    ///     totalCount
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjectInfoQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProjectInfoResult>> ExecuteAsync(global::System.String workspaceUrl, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProjectInfoResult>> Watch(global::System.String workspaceUrl, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects($workspaceUrl: String!, $cursor: String!) {
    ///   desProjects(workspaceUrl: $workspaceUrl, after: $cursor) {
    ///     __typename
    ///     totalCount
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       projectId
    ///       previewUrl
    ///       updatedAt
    ///       ... on DesProject {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetProjectsQueryDocument()
        {
        }

        public static GetProjectsQueryDocument Instance { get; } = new GetProjectsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x28, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x28, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x3a, 0x20, 0x24, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x2c, 0x20, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x20, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x55, 0x72, 0x6c, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7a7d3644468e39cad76b27bcffdfab12");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects($workspaceUrl: String!, $cursor: String!) {
    ///   desProjects(workspaceUrl: $workspaceUrl, after: $cursor) {
    ///     __typename
    ///     totalCount
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       projectId
    ///       previewUrl
    ///       updatedAt
    ///       ... on DesProject {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectsQuery : global::Nexar.Client.IGetProjectsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetProjectsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetProjectsQuery(global::StrawberryShake.IOperationExecutor<IGetProjectsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetProjectsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProjectsResult>> ExecuteAsync(global::System.String workspaceUrl, global::System.String cursor, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(workspaceUrl, cursor);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProjectsResult>> Watch(global::System.String workspaceUrl, global::System.String cursor, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(workspaceUrl, cursor);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String workspaceUrl, global::System.String cursor)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("workspaceUrl", FormatWorkspaceUrl(workspaceUrl));
            variables.Add("cursor", FormatCursor(cursor));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetProjectsQueryDocument.Instance.Hash.Value, name: "GetProjects", document: GetProjectsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatWorkspaceUrl(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatCursor(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetProjects GraphQL operation
    /// <code>
    /// query GetProjects($workspaceUrl: String!, $cursor: String!) {
    ///   desProjects(workspaceUrl: $workspaceUrl, after: $cursor) {
    ///     __typename
    ///     totalCount
    ///     nodes {
    ///       __typename
    ///       id
    ///       name
    ///       description
    ///       projectId
    ///       previewUrl
    ///       updatedAt
    ///       ... on DesProject {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///       hasNextPage
    ///       hasPreviousPage
    ///       startCursor
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetProjectsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetProjectsResult>> ExecuteAsync(global::System.String workspaceUrl, global::System.String cursor, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetProjectsResult>> Watch(global::System.String workspaceUrl, global::System.String cursor, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetDesignItems GraphQL operation
    /// <code>
    /// query GetDesignItems($id: ID!, $cursor: String, $count: Int!) {
    ///   desProjectById(id: $id) {
    ///     __typename
    ///     name
    ///     description
    ///     design {
    ///       __typename
    ///       workInProgress {
    ///         __typename
    ///         variants {
    ///           __typename
    ///           pcb {
    ///             __typename
    ///             designItems(after: $cursor, first: $count) {
    ///               __typename
    ///               totalCount
    ///               pageInfo {
    ///                 __typename
    ///                 hasNextPage
    ///                 hasPreviousPage
    ///                 startCursor
    ///                 endCursor
    ///               }
    ///               nodes {
    ///                 __typename
    ///                 id
    ///                 designator
    ///                 position {
    ///                   __typename
    ///                   x
    ///                   y
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 area {
    ///                   __typename
    ///                   pos1 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                   pos2 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                 }
    ///                 mesh3D {
    ///                   __typename
    ///                   glbFile {
    ///                     __typename
    ///                     fileName
    ///                     downloadUrl
    ///                   }
    ///                 }
    ///                 ... on DesDesignItem {
    ///                   id
    ///                 }
    ///               }
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on DesProject {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItemsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetDesignItemsQueryDocument()
        {
        }

        public static GetDesignItemsQueryDocument Instance { get; } = new GetDesignItemsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x49, 0x6e, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x63, 0x62, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x28, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x2c, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x61, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x20, 0x68, 0x61, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x67, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x20, 0x79, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x31, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x20, 0x79, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x70, 0x6f, 0x73, 0x32, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x20, 0x79, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6d, 0x65, 0x73, 0x68, 0x33, 0x44, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x67, 0x6c, 0x62, 0x46, 0x69, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x73, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9759ee887e53426e9bf3e70f6c70e352");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDesignItems GraphQL operation
    /// <code>
    /// query GetDesignItems($id: ID!, $cursor: String, $count: Int!) {
    ///   desProjectById(id: $id) {
    ///     __typename
    ///     name
    ///     description
    ///     design {
    ///       __typename
    ///       workInProgress {
    ///         __typename
    ///         variants {
    ///           __typename
    ///           pcb {
    ///             __typename
    ///             designItems(after: $cursor, first: $count) {
    ///               __typename
    ///               totalCount
    ///               pageInfo {
    ///                 __typename
    ///                 hasNextPage
    ///                 hasPreviousPage
    ///                 startCursor
    ///                 endCursor
    ///               }
    ///               nodes {
    ///                 __typename
    ///                 id
    ///                 designator
    ///                 position {
    ///                   __typename
    ///                   x
    ///                   y
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 area {
    ///                   __typename
    ///                   pos1 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                   pos2 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                 }
    ///                 mesh3D {
    ///                   __typename
    ///                   glbFile {
    ///                     __typename
    ///                     fileName
    ///                     downloadUrl
    ///                   }
    ///                 }
    ///                 ... on DesDesignItem {
    ///                   id
    ///                 }
    ///               }
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on DesProject {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItemsQuery : global::Nexar.Client.IGetDesignItemsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetDesignItemsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _intFormatter;
        public GetDesignItemsQuery(global::StrawberryShake.IOperationExecutor<IGetDesignItemsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _intFormatter = serializerResolver.GetInputValueFormatter("Int");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetDesignItemsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDesignItemsResult>> ExecuteAsync(global::System.String id, global::System.String? cursor, global::System.Int32 count, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id, cursor, count);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDesignItemsResult>> Watch(global::System.String id, global::System.String? cursor, global::System.Int32 count, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id, cursor, count);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id, global::System.String? cursor, global::System.Int32 count)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            variables.Add("cursor", FormatCursor(cursor));
            variables.Add("count", FormatCount(count));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetDesignItemsQueryDocument.Instance.Hash.Value, name: "GetDesignItems", document: GetDesignItemsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        private global::System.Object? FormatCursor(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        private global::System.Object? FormatCount(global::System.Int32 value)
        {
            return _intFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetDesignItems GraphQL operation
    /// <code>
    /// query GetDesignItems($id: ID!, $cursor: String, $count: Int!) {
    ///   desProjectById(id: $id) {
    ///     __typename
    ///     name
    ///     description
    ///     design {
    ///       __typename
    ///       workInProgress {
    ///         __typename
    ///         variants {
    ///           __typename
    ///           pcb {
    ///             __typename
    ///             designItems(after: $cursor, first: $count) {
    ///               __typename
    ///               totalCount
    ///               pageInfo {
    ///                 __typename
    ///                 hasNextPage
    ///                 hasPreviousPage
    ///                 startCursor
    ///                 endCursor
    ///               }
    ///               nodes {
    ///                 __typename
    ///                 id
    ///                 designator
    ///                 position {
    ///                   __typename
    ///                   x
    ///                   y
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 area {
    ///                   __typename
    ///                   pos1 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                   pos2 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                 }
    ///                 mesh3D {
    ///                   __typename
    ///                   glbFile {
    ///                     __typename
    ///                     fileName
    ///                     downloadUrl
    ///                   }
    ///                 }
    ///                 ... on DesDesignItem {
    ///                   id
    ///                 }
    ///               }
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on DesProject {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetDesignItemsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetDesignItemsResult>> ExecuteAsync(global::System.String id, global::System.String? cursor, global::System.Int32 count, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetDesignItemsResult>> Watch(global::System.String id, global::System.String? cursor, global::System.Int32 count, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPcbModel GraphQL operation
    /// <code>
    /// query GetPcbModel($id: ID!) {
    ///   desProjectById(id: $id) {
    ///     __typename
    ///     id
    ///     name
    ///     description
    ///     design {
    ///       __typename
    ///       workInProgress {
    ///         __typename
    ///         variants {
    ///           __typename
    ///           pcb {
    ///             __typename
    ///             documentId
    ///             documentName
    ///             layerStack {
    ///               __typename
    ///               stacks {
    ///                 __typename
    ///                 name
    ///                 layers {
    ///                   __typename
    ///                   name
    ///                   thickness {
    ///                     __typename
    ///                     xMm
    ///                   }
    ///                   dielectricConstant
    ///                   copperWeight {
    ///                     __typename
    ///                     gram
    ///                   }
    ///                   layerType
    ///                   layerProperties {
    ///                     __typename
    ///                     name
    ///                     text
    ///                     size {
    ///                       __typename
    ///                       xMm
    ///                     }
    ///                   }
    ///                 }
    ///               }
    ///             }
    ///             outline {
    ///               __typename
    ///               vertices {
    ///                 __typename
    ///                 xMm
    ///                 yMm
    ///               }
    ///             }
    ///             pads {
    ///               __typename
    ///               designator
    ///               globalDesignator
    ///               padType
    ///               shape
    ///               net {
    ///                 __typename
    ///                 name
    ///               }
    ///               layer {
    ///                 __typename
    ///                 name
    ///               }
    ///               position {
    ///                 __typename
    ///                 xMm
    ///                 yMm
    ///               }
    ///               rotation
    ///               size {
    ///                 __typename
    ///                 xMm
    ///                 yMm
    ///               }
    ///               holeSize {
    ///                 __typename
    ///                 xMm
    ///               }
    ///             }
    ///             nets {
    ///               __typename
    ///               name
    ///               pads {
    ///                 __typename
    ///                 designator
    ///                 globalDesignator
    ///                 padType
    ///                 shape
    ///                 layer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 position {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 rotation
    ///                 size {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 holeSize {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///               }
    ///               tracks {
    ///                 __typename
    ///                 layer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 width {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///                 width {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///                 begin {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 end {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///               }
    ///               vias {
    ///                 __typename
    ///                 shape
    ///                 beginLayer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 endLayer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 position {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 padDiameter {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///                 holeDiameter {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///               }
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on DesProject {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModelQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPcbModelQueryDocument()
        {
        }

        public static GetPcbModelQueryDocument Instance { get; } = new GetPcbModelQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x63, 0x62, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x63, 0x62, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x68, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x64, 0x69, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x70, 0x70, 0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x7d, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6f, 0x75, 0x74, 0x6c, 0x69, 0x6e, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x64, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x20, 0x73, 0x68, 0x61, 0x70, 0x65, 0x20, 0x6e, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x68, 0x6f, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6e, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x64, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x20, 0x73, 0x68, 0x61, 0x70, 0x65, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x68, 0x6f, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x77, 0x69, 0x64, 0x74, 0x68, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x65, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x76, 0x69, 0x61, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x68, 0x61, 0x70, 0x65, 0x20, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x65, 0x6e, 0x64, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x64, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x68, 0x6f, 0x6c, 0x65, 0x44, 0x69, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "7825140ae0e475cd3e34e2fbbbb4e4f5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPcbModel GraphQL operation
    /// <code>
    /// query GetPcbModel($id: ID!) {
    ///   desProjectById(id: $id) {
    ///     __typename
    ///     id
    ///     name
    ///     description
    ///     design {
    ///       __typename
    ///       workInProgress {
    ///         __typename
    ///         variants {
    ///           __typename
    ///           pcb {
    ///             __typename
    ///             documentId
    ///             documentName
    ///             layerStack {
    ///               __typename
    ///               stacks {
    ///                 __typename
    ///                 name
    ///                 layers {
    ///                   __typename
    ///                   name
    ///                   thickness {
    ///                     __typename
    ///                     xMm
    ///                   }
    ///                   dielectricConstant
    ///                   copperWeight {
    ///                     __typename
    ///                     gram
    ///                   }
    ///                   layerType
    ///                   layerProperties {
    ///                     __typename
    ///                     name
    ///                     text
    ///                     size {
    ///                       __typename
    ///                       xMm
    ///                     }
    ///                   }
    ///                 }
    ///               }
    ///             }
    ///             outline {
    ///               __typename
    ///               vertices {
    ///                 __typename
    ///                 xMm
    ///                 yMm
    ///               }
    ///             }
    ///             pads {
    ///               __typename
    ///               designator
    ///               globalDesignator
    ///               padType
    ///               shape
    ///               net {
    ///                 __typename
    ///                 name
    ///               }
    ///               layer {
    ///                 __typename
    ///                 name
    ///               }
    ///               position {
    ///                 __typename
    ///                 xMm
    ///                 yMm
    ///               }
    ///               rotation
    ///               size {
    ///                 __typename
    ///                 xMm
    ///                 yMm
    ///               }
    ///               holeSize {
    ///                 __typename
    ///                 xMm
    ///               }
    ///             }
    ///             nets {
    ///               __typename
    ///               name
    ///               pads {
    ///                 __typename
    ///                 designator
    ///                 globalDesignator
    ///                 padType
    ///                 shape
    ///                 layer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 position {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 rotation
    ///                 size {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 holeSize {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///               }
    ///               tracks {
    ///                 __typename
    ///                 layer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 width {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///                 width {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///                 begin {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 end {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///               }
    ///               vias {
    ///                 __typename
    ///                 shape
    ///                 beginLayer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 endLayer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 position {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 padDiameter {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///                 holeDiameter {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///               }
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on DesProject {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModelQuery : global::Nexar.Client.IGetPcbModelQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPcbModelResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetPcbModelQuery(global::StrawberryShake.IOperationExecutor<IGetPcbModelResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPcbModelResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPcbModelResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPcbModelResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPcbModelQueryDocument.Instance.Hash.Value, name: "GetPcbModel", document: GetPcbModelQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPcbModel GraphQL operation
    /// <code>
    /// query GetPcbModel($id: ID!) {
    ///   desProjectById(id: $id) {
    ///     __typename
    ///     id
    ///     name
    ///     description
    ///     design {
    ///       __typename
    ///       workInProgress {
    ///         __typename
    ///         variants {
    ///           __typename
    ///           pcb {
    ///             __typename
    ///             documentId
    ///             documentName
    ///             layerStack {
    ///               __typename
    ///               stacks {
    ///                 __typename
    ///                 name
    ///                 layers {
    ///                   __typename
    ///                   name
    ///                   thickness {
    ///                     __typename
    ///                     xMm
    ///                   }
    ///                   dielectricConstant
    ///                   copperWeight {
    ///                     __typename
    ///                     gram
    ///                   }
    ///                   layerType
    ///                   layerProperties {
    ///                     __typename
    ///                     name
    ///                     text
    ///                     size {
    ///                       __typename
    ///                       xMm
    ///                     }
    ///                   }
    ///                 }
    ///               }
    ///             }
    ///             outline {
    ///               __typename
    ///               vertices {
    ///                 __typename
    ///                 xMm
    ///                 yMm
    ///               }
    ///             }
    ///             pads {
    ///               __typename
    ///               designator
    ///               globalDesignator
    ///               padType
    ///               shape
    ///               net {
    ///                 __typename
    ///                 name
    ///               }
    ///               layer {
    ///                 __typename
    ///                 name
    ///               }
    ///               position {
    ///                 __typename
    ///                 xMm
    ///                 yMm
    ///               }
    ///               rotation
    ///               size {
    ///                 __typename
    ///                 xMm
    ///                 yMm
    ///               }
    ///               holeSize {
    ///                 __typename
    ///                 xMm
    ///               }
    ///             }
    ///             nets {
    ///               __typename
    ///               name
    ///               pads {
    ///                 __typename
    ///                 designator
    ///                 globalDesignator
    ///                 padType
    ///                 shape
    ///                 layer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 position {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 rotation
    ///                 size {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 holeSize {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///               }
    ///               tracks {
    ///                 __typename
    ///                 layer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 width {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///                 width {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///                 begin {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 end {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///               }
    ///               vias {
    ///                 __typename
    ///                 shape
    ///                 beginLayer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 endLayer {
    ///                   __typename
    ///                   name
    ///                 }
    ///                 position {
    ///                   __typename
    ///                   xMm
    ///                   yMm
    ///                 }
    ///                 padDiameter {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///                 holeDiameter {
    ///                   __typename
    ///                   xMm
    ///                 }
    ///               }
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on DesProject {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbModelQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPcbModelResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPcbModelResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetPcbComments GraphQL operation
    /// <code>
    /// query GetPcbComments($id: ID!) {
    ///   desProjectById(id: $id) {
    ///     __typename
    ///     name
    ///     description
    ///     design {
    ///       __typename
    ///       workInProgress {
    ///         __typename
    ///         variants {
    ///           __typename
    ///           pcb {
    ///             __typename
    ///             documentId
    ///             documentName
    ///             commentThreads {
    ///               __typename
    ///               commentThreadId
    ///               createdAt
    ///               modifiedAt
    ///               context {
    ///                 __typename
    ///                 area {
    ///                   __typename
    ///                   pos1 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                   pos2 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                 }
    ///               }
    ///               comments {
    ///                 __typename
    ///                 commentId
    ///                 text
    ///                 createdAt
    ///                 createdBy {
    ///                   __typename
    ///                   firstName
    ///                   lastName
    ///                   email
    ///                   pictureUrl
    ///                 }
    ///                 modifiedAt
    ///                 modifiedBy {
    ///                   __typename
    ///                   firstName
    ///                   lastName
    ///                   email
    ///                   pictureUrl
    ///                 }
    ///               }
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on DesProject {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbCommentsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetPcbCommentsQueryDocument()
        {
        }

        public static GetPcbCommentsQueryDocument Instance { get; } = new GetPcbCommentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x50, 0x63, 0x62, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x24, 0x69, 0x64, 0x3a, 0x20, 0x49, 0x44, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x64, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x49, 0x64, 0x28, 0x69, 0x64, 0x3a, 0x20, 0x24, 0x69, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x63, 0x62, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x72, 0x65, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x31, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x20, 0x79, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x70, 0x6f, 0x73, 0x32, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x78, 0x20, 0x79, 0x20, 0x78, 0x4d, 0x6d, 0x20, 0x79, 0x4d, 0x6d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x20, 0x7d, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x20, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x42, 0x79, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x20, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x55, 0x72, 0x6c, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "cd300211c9fab9a9c95b5b1975ba670b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPcbComments GraphQL operation
    /// <code>
    /// query GetPcbComments($id: ID!) {
    ///   desProjectById(id: $id) {
    ///     __typename
    ///     name
    ///     description
    ///     design {
    ///       __typename
    ///       workInProgress {
    ///         __typename
    ///         variants {
    ///           __typename
    ///           pcb {
    ///             __typename
    ///             documentId
    ///             documentName
    ///             commentThreads {
    ///               __typename
    ///               commentThreadId
    ///               createdAt
    ///               modifiedAt
    ///               context {
    ///                 __typename
    ///                 area {
    ///                   __typename
    ///                   pos1 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                   pos2 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                 }
    ///               }
    ///               comments {
    ///                 __typename
    ///                 commentId
    ///                 text
    ///                 createdAt
    ///                 createdBy {
    ///                   __typename
    ///                   firstName
    ///                   lastName
    ///                   email
    ///                   pictureUrl
    ///                 }
    ///                 modifiedAt
    ///                 modifiedBy {
    ///                   __typename
    ///                   firstName
    ///                   lastName
    ///                   email
    ///                   pictureUrl
    ///                 }
    ///               }
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on DesProject {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbCommentsQuery : global::Nexar.Client.IGetPcbCommentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetPcbCommentsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _iDFormatter;
        public GetPcbCommentsQuery(global::StrawberryShake.IOperationExecutor<IGetPcbCommentsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _iDFormatter = serializerResolver.GetInputValueFormatter("ID");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetPcbCommentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPcbCommentsResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(id);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPcbCommentsResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(id);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String id)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("id", FormatId(id));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetPcbCommentsQueryDocument.Instance.Hash.Value, name: "GetPcbComments", document: GetPcbCommentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _iDFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetPcbComments GraphQL operation
    /// <code>
    /// query GetPcbComments($id: ID!) {
    ///   desProjectById(id: $id) {
    ///     __typename
    ///     name
    ///     description
    ///     design {
    ///       __typename
    ///       workInProgress {
    ///         __typename
    ///         variants {
    ///           __typename
    ///           pcb {
    ///             __typename
    ///             documentId
    ///             documentName
    ///             commentThreads {
    ///               __typename
    ///               commentThreadId
    ///               createdAt
    ///               modifiedAt
    ///               context {
    ///                 __typename
    ///                 area {
    ///                   __typename
    ///                   pos1 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                   pos2 {
    ///                     __typename
    ///                     x
    ///                     y
    ///                     xMm
    ///                     yMm
    ///                   }
    ///                 }
    ///               }
    ///               comments {
    ///                 __typename
    ///                 commentId
    ///                 text
    ///                 createdAt
    ///                 createdBy {
    ///                   __typename
    ///                   firstName
    ///                   lastName
    ///                   email
    ///                   pictureUrl
    ///                 }
    ///                 modifiedAt
    ///                 modifiedBy {
    ///                   __typename
    ///                   firstName
    ///                   lastName
    ///                   email
    ///                   pictureUrl
    ///                 }
    ///               }
    ///             }
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on DesProject {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface IGetPcbCommentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetPcbCommentsResult>> ExecuteAsync(global::System.String id, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetPcbCommentsResult>> Watch(global::System.String id, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the NexarClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class NexarClient : global::Nexar.Client.INexarClient
    {
        private readonly global::Nexar.Client.ICreateCommentThreadMutation _createCommentThread;
        private readonly global::Nexar.Client.IDeleteCommentThreadMutation _deleteCommentThread;
        private readonly global::Nexar.Client.ICreateCommentMutation _createComment;
        private readonly global::Nexar.Client.IDeleteCommentMutation _deleteComment;
        private readonly global::Nexar.Client.IUpdateCommentMutation _updateComment;
        private readonly global::Nexar.Client.IGetWorkspacesQuery _getWorkspaces;
        private readonly global::Nexar.Client.IGetProjectInfoQuery _getProjectInfo;
        private readonly global::Nexar.Client.IGetProjectsQuery _getProjects;
        private readonly global::Nexar.Client.IGetDesignItemsQuery _getDesignItems;
        private readonly global::Nexar.Client.IGetPcbModelQuery _getPcbModel;
        private readonly global::Nexar.Client.IGetPcbCommentsQuery _getPcbComments;
        public NexarClient(global::Nexar.Client.ICreateCommentThreadMutation createCommentThread, global::Nexar.Client.IDeleteCommentThreadMutation deleteCommentThread, global::Nexar.Client.ICreateCommentMutation createComment, global::Nexar.Client.IDeleteCommentMutation deleteComment, global::Nexar.Client.IUpdateCommentMutation updateComment, global::Nexar.Client.IGetWorkspacesQuery getWorkspaces, global::Nexar.Client.IGetProjectInfoQuery getProjectInfo, global::Nexar.Client.IGetProjectsQuery getProjects, global::Nexar.Client.IGetDesignItemsQuery getDesignItems, global::Nexar.Client.IGetPcbModelQuery getPcbModel, global::Nexar.Client.IGetPcbCommentsQuery getPcbComments)
        {
            _createCommentThread = createCommentThread ?? throw new global::System.ArgumentNullException(nameof(createCommentThread));
            _deleteCommentThread = deleteCommentThread ?? throw new global::System.ArgumentNullException(nameof(deleteCommentThread));
            _createComment = createComment ?? throw new global::System.ArgumentNullException(nameof(createComment));
            _deleteComment = deleteComment ?? throw new global::System.ArgumentNullException(nameof(deleteComment));
            _updateComment = updateComment ?? throw new global::System.ArgumentNullException(nameof(updateComment));
            _getWorkspaces = getWorkspaces ?? throw new global::System.ArgumentNullException(nameof(getWorkspaces));
            _getProjectInfo = getProjectInfo ?? throw new global::System.ArgumentNullException(nameof(getProjectInfo));
            _getProjects = getProjects ?? throw new global::System.ArgumentNullException(nameof(getProjects));
            _getDesignItems = getDesignItems ?? throw new global::System.ArgumentNullException(nameof(getDesignItems));
            _getPcbModel = getPcbModel ?? throw new global::System.ArgumentNullException(nameof(getPcbModel));
            _getPcbComments = getPcbComments ?? throw new global::System.ArgumentNullException(nameof(getPcbComments));
        }

        public static global::System.String ClientName => "NexarClient";
        public global::Nexar.Client.ICreateCommentThreadMutation CreateCommentThread => _createCommentThread;
        public global::Nexar.Client.IDeleteCommentThreadMutation DeleteCommentThread => _deleteCommentThread;
        public global::Nexar.Client.ICreateCommentMutation CreateComment => _createComment;
        public global::Nexar.Client.IDeleteCommentMutation DeleteComment => _deleteComment;
        public global::Nexar.Client.IUpdateCommentMutation UpdateComment => _updateComment;
        public global::Nexar.Client.IGetWorkspacesQuery GetWorkspaces => _getWorkspaces;
        public global::Nexar.Client.IGetProjectInfoQuery GetProjectInfo => _getProjectInfo;
        public global::Nexar.Client.IGetProjectsQuery GetProjects => _getProjects;
        public global::Nexar.Client.IGetDesignItemsQuery GetDesignItems => _getDesignItems;
        public global::Nexar.Client.IGetPcbModelQuery GetPcbModel => _getPcbModel;
        public global::Nexar.Client.IGetPcbCommentsQuery GetPcbComments => _getPcbComments;
    }

    /// <summary>
    /// Represents the NexarClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial interface INexarClient
    {
        global::Nexar.Client.ICreateCommentThreadMutation CreateCommentThread { get; }

        global::Nexar.Client.IDeleteCommentThreadMutation DeleteCommentThread { get; }

        global::Nexar.Client.ICreateCommentMutation CreateComment { get; }

        global::Nexar.Client.IDeleteCommentMutation DeleteComment { get; }

        global::Nexar.Client.IUpdateCommentMutation UpdateComment { get; }

        global::Nexar.Client.IGetWorkspacesQuery GetWorkspaces { get; }

        global::Nexar.Client.IGetProjectInfoQuery GetProjectInfo { get; }

        global::Nexar.Client.IGetProjectsQuery GetProjects { get; }

        global::Nexar.Client.IGetDesignItemsQuery GetDesignItems { get; }

        global::Nexar.Client.IGetPcbModelQuery GetPcbModel { get; }

        global::Nexar.Client.IGetPcbCommentsQuery GetPcbComments { get; }
    }
}

namespace Nexar.Client.State
{
    ///<summary>A workspace provides a flexible and secure method for managing design, manufacturing and supply content.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesWorkspaceEntity
    {
        public DesWorkspaceEntity(global::System.String id = default !, global::System.String url = default !, global::System.String name = default !, global::System.String? description = default !, global::System.Boolean isDefault = default !, global::Nexar.Client.State.DesWorkspaceLocationData location = default !)
        {
            Id = id;
            Url = url;
            Name = name;
            Description = description;
            IsDefault = isDefault;
            Location = location;
        }

        ///<summary>The node identifier for the workspace (used by `DesWorkspaceById`).</summary>
        public global::System.String Id { get; }

        ///<summary>The web address of this workspace.</summary>
        public global::System.String Url { get; }

        ///<summary>The descriptive label for this workspace.</summary>
        public global::System.String Name { get; }

        ///<summary>The summary of this workspace content or purpose.</summary>
        public global::System.String? Description { get; }

        ///<summary>Tells if the workspace is the current user default.</summary>
        public global::System.Boolean IsDefault { get; }

        ///<summary>The location of this workspace.</summary>
        public global::Nexar.Client.State.DesWorkspaceLocationData Location { get; }
    }

    ///<summary>A project manages all development stages of the PCB/PCA product lifecycle.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesProjectEntity
    {
        public DesProjectEntity(global::System.String id = default !, global::System.String? name = default !, global::System.String? description = default !, global::System.String projectId = default !, global::System.String previewUrl = default !, global::System.DateTimeOffset? updatedAt = default !, global::Nexar.Client.State.DesDesignData design = default !)
        {
            Id = id;
            Name = name;
            Description = description;
            ProjectId = projectId;
            PreviewUrl = previewUrl;
            UpdatedAt = updatedAt;
            Design = design;
        }

        ///<summary>The node identifier for this project (used by `desProjectById`).</summary>
        public global::System.String Id { get; }

        ///<summary>The assigned name for this project.</summary>
        public global::System.String? Name { get; }

        ///<summary>The summary of this project content or purpose.</summary>
        public global::System.String? Description { get; }

        ///<summary>The reference identifier for this project.</summary>
        public global::System.String ProjectId { get; }

        ///<summary>The web address to download a preview image for this project.</summary>
        public global::System.String PreviewUrl { get; }

        ///<summary>The `DateTime` when this project was last modified.</summary>
        public global::System.DateTimeOffset? UpdatedAt { get; }

        ///<summary>The detailed design information for this project.</summary>
        public global::Nexar.Client.State.DesDesignData Design { get; }
    }

    ///<summary>A design item is a specific instance of a part used in the design.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDesignItemEntity
    {
        public DesDesignItemEntity(global::System.String id = default !, global::System.String designator = default !, global::Nexar.Client.State.DesPosition2DData position = default !, global::Nexar.Client.State.DesRectangleData? area = default !, global::Nexar.Client.State.DesMesh3DData? mesh3D = default !)
        {
            Id = id;
            Designator = designator;
            Position = position;
            Area = area;
            Mesh3D = mesh3D;
        }

        ///<summary>The node identifier for this project (used by `DesDesignItemById`).</summary>
        public global::System.String Id { get; }

        ///<summary>The unique label for this design item.</summary>
        public global::System.String Designator { get; }

        ///<summary>The planar location for this design item.</summary>
        public global::Nexar.Client.State.DesPosition2DData Position { get; }

        ///<summary>The planar boundary for this design item.</summary>
        public global::Nexar.Client.State.DesRectangleData? Area { get; }

        ///<summary>*** PROTOTYPE, SUBJECT TO CHANGE ***</summary>
        public global::Nexar.Client.State.DesMesh3DData? Mesh3D { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentThreadResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.CreateCommentThreadResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateCommentThreadResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.ICreateCommentThreadResult);
        public CreateCommentThreadResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateCommentThreadResultInfo info)
            {
                return new CreateCommentThreadResult(MapNonNullableICreateCommentThread_DesCreateCommentThread(info.DesCreateCommentThread, snapshot));
            }

            throw new global::System.ArgumentException("CreateCommentThreadResultInfo expected.");
        }

        private global::Nexar.Client.ICreateCommentThread_DesCreateCommentThread MapNonNullableICreateCommentThread_DesCreateCommentThread(global::Nexar.Client.State.DesCreateCommentThreadPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICreateCommentThread_DesCreateCommentThread returnValue = default !;
            if (data.__typename.Equals("DesCreateCommentThreadPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new CreateCommentThread_DesCreateCommentThread_DesCreateCommentThreadPayload(data.CommentThreadId ?? throw new global::System.ArgumentNullException(), data.CommentId ?? throw new global::System.ArgumentNullException(), MapNonNullableICreateCommentThread_DesCreateCommentThread_ErrorsNonNullableArray(data.Errors ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.ICreateCommentThread_DesCreateCommentThread_Errors> MapNonNullableICreateCommentThread_DesCreateCommentThread_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPayloadErrors = new global::System.Collections.Generic.List<global::Nexar.Client.ICreateCommentThread_DesCreateCommentThread_Errors>();
            foreach (global::Nexar.Client.State.DesPayloadErrorData child in list)
            {
                desPayloadErrors.Add(MapNonNullableICreateCommentThread_DesCreateCommentThread_Errors(child, snapshot));
            }

            return desPayloadErrors;
        }

        private global::Nexar.Client.ICreateCommentThread_DesCreateCommentThread_Errors MapNonNullableICreateCommentThread_DesCreateCommentThread_Errors(global::Nexar.Client.State.DesPayloadErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICreateCommentThread_DesCreateCommentThread_Errors returnValue = default !;
            if (data.__typename.Equals("DesPayloadError", global::System.StringComparison.Ordinal))
            {
                returnValue = new CreateCommentThread_DesCreateCommentThread_Errors_DesPayloadError(data.Message ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentThreadResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateCommentThreadResultInfo(global::Nexar.Client.State.DesCreateCommentThreadPayloadData desCreateCommentThread, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesCreateCommentThread = desCreateCommentThread;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Nexar.Client.State.DesCreateCommentThreadPayloadData DesCreateCommentThread { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateCommentThreadResultInfo(DesCreateCommentThread, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentThreadResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.DeleteCommentThreadResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteCommentThreadResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.IDeleteCommentThreadResult);
        public DeleteCommentThreadResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteCommentThreadResultInfo info)
            {
                return new DeleteCommentThreadResult(MapNonNullableIDeleteCommentThread_DesDeleteCommentThread(info.DesDeleteCommentThread, snapshot));
            }

            throw new global::System.ArgumentException("DeleteCommentThreadResultInfo expected.");
        }

        private global::Nexar.Client.IDeleteCommentThread_DesDeleteCommentThread MapNonNullableIDeleteCommentThread_DesDeleteCommentThread(global::Nexar.Client.State.DesDeleteCommentThreadPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IDeleteCommentThread_DesDeleteCommentThread returnValue = default !;
            if (data.__typename.Equals("DesDeleteCommentThreadPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new DeleteCommentThread_DesDeleteCommentThread_DesDeleteCommentThreadPayload(MapNonNullableIDeleteCommentThread_DesDeleteCommentThread_ErrorsNonNullableArray(data.Errors ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IDeleteCommentThread_DesDeleteCommentThread_Errors> MapNonNullableIDeleteCommentThread_DesDeleteCommentThread_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPayloadErrors = new global::System.Collections.Generic.List<global::Nexar.Client.IDeleteCommentThread_DesDeleteCommentThread_Errors>();
            foreach (global::Nexar.Client.State.DesPayloadErrorData child in list)
            {
                desPayloadErrors.Add(MapNonNullableIDeleteCommentThread_DesDeleteCommentThread_Errors(child, snapshot));
            }

            return desPayloadErrors;
        }

        private global::Nexar.Client.IDeleteCommentThread_DesDeleteCommentThread_Errors MapNonNullableIDeleteCommentThread_DesDeleteCommentThread_Errors(global::Nexar.Client.State.DesPayloadErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IDeleteCommentThread_DesDeleteCommentThread_Errors returnValue = default !;
            if (data.__typename.Equals("DesPayloadError", global::System.StringComparison.Ordinal))
            {
                returnValue = new DeleteCommentThread_DesDeleteCommentThread_Errors_DesPayloadError(data.Message ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentThreadResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteCommentThreadResultInfo(global::Nexar.Client.State.DesDeleteCommentThreadPayloadData desDeleteCommentThread, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesDeleteCommentThread = desDeleteCommentThread;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Nexar.Client.State.DesDeleteCommentThreadPayloadData DesDeleteCommentThread { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteCommentThreadResultInfo(DesDeleteCommentThread, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.CreateCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CreateCommentResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.ICreateCommentResult);
        public CreateCommentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CreateCommentResultInfo info)
            {
                return new CreateCommentResult(MapNonNullableICreateComment_DesCreateComment(info.DesCreateComment, snapshot));
            }

            throw new global::System.ArgumentException("CreateCommentResultInfo expected.");
        }

        private global::Nexar.Client.ICreateComment_DesCreateComment MapNonNullableICreateComment_DesCreateComment(global::Nexar.Client.State.DesCreateCommentPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICreateComment_DesCreateComment returnValue = default !;
            if (data.__typename.Equals("DesCreateCommentPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new CreateComment_DesCreateComment_DesCreateCommentPayload(data.CommentId ?? throw new global::System.ArgumentNullException(), MapNonNullableICreateComment_DesCreateComment_ErrorsNonNullableArray(data.Errors ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.ICreateComment_DesCreateComment_Errors> MapNonNullableICreateComment_DesCreateComment_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPayloadErrors = new global::System.Collections.Generic.List<global::Nexar.Client.ICreateComment_DesCreateComment_Errors>();
            foreach (global::Nexar.Client.State.DesPayloadErrorData child in list)
            {
                desPayloadErrors.Add(MapNonNullableICreateComment_DesCreateComment_Errors(child, snapshot));
            }

            return desPayloadErrors;
        }

        private global::Nexar.Client.ICreateComment_DesCreateComment_Errors MapNonNullableICreateComment_DesCreateComment_Errors(global::Nexar.Client.State.DesPayloadErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            ICreateComment_DesCreateComment_Errors returnValue = default !;
            if (data.__typename.Equals("DesPayloadError", global::System.StringComparison.Ordinal))
            {
                returnValue = new CreateComment_DesCreateComment_Errors_DesPayloadError(data.Message ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CreateCommentResultInfo(global::Nexar.Client.State.DesCreateCommentPayloadData desCreateComment, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesCreateComment = desCreateComment;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Nexar.Client.State.DesCreateCommentPayloadData DesCreateComment { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CreateCommentResultInfo(DesCreateComment, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.DeleteCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeleteCommentResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.IDeleteCommentResult);
        public DeleteCommentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeleteCommentResultInfo info)
            {
                return new DeleteCommentResult(MapNonNullableIDeleteComment_DesDeleteComment(info.DesDeleteComment, snapshot));
            }

            throw new global::System.ArgumentException("DeleteCommentResultInfo expected.");
        }

        private global::Nexar.Client.IDeleteComment_DesDeleteComment MapNonNullableIDeleteComment_DesDeleteComment(global::Nexar.Client.State.DesDeleteCommentPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IDeleteComment_DesDeleteComment returnValue = default !;
            if (data.__typename.Equals("DesDeleteCommentPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new DeleteComment_DesDeleteComment_DesDeleteCommentPayload(MapNonNullableIDeleteComment_DesDeleteComment_ErrorsNonNullableArray(data.Errors ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IDeleteComment_DesDeleteComment_Errors> MapNonNullableIDeleteComment_DesDeleteComment_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPayloadErrors = new global::System.Collections.Generic.List<global::Nexar.Client.IDeleteComment_DesDeleteComment_Errors>();
            foreach (global::Nexar.Client.State.DesPayloadErrorData child in list)
            {
                desPayloadErrors.Add(MapNonNullableIDeleteComment_DesDeleteComment_Errors(child, snapshot));
            }

            return desPayloadErrors;
        }

        private global::Nexar.Client.IDeleteComment_DesDeleteComment_Errors MapNonNullableIDeleteComment_DesDeleteComment_Errors(global::Nexar.Client.State.DesPayloadErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IDeleteComment_DesDeleteComment_Errors returnValue = default !;
            if (data.__typename.Equals("DesPayloadError", global::System.StringComparison.Ordinal))
            {
                returnValue = new DeleteComment_DesDeleteComment_Errors_DesPayloadError(data.Message ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeleteCommentResultInfo(global::Nexar.Client.State.DesDeleteCommentPayloadData desDeleteComment, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesDeleteComment = desDeleteComment;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Nexar.Client.State.DesDeleteCommentPayloadData DesDeleteComment { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeleteCommentResultInfo(DesDeleteComment, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class UpdateCommentResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.UpdateCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public UpdateCommentResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.IUpdateCommentResult);
        public UpdateCommentResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is UpdateCommentResultInfo info)
            {
                return new UpdateCommentResult(MapNonNullableIUpdateComment_DesUpdateComment(info.DesUpdateComment, snapshot));
            }

            throw new global::System.ArgumentException("UpdateCommentResultInfo expected.");
        }

        private global::Nexar.Client.IUpdateComment_DesUpdateComment MapNonNullableIUpdateComment_DesUpdateComment(global::Nexar.Client.State.DesUpdateCommentPayloadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IUpdateComment_DesUpdateComment returnValue = default !;
            if (data.__typename.Equals("DesUpdateCommentPayload", global::System.StringComparison.Ordinal))
            {
                returnValue = new UpdateComment_DesUpdateComment_DesUpdateCommentPayload(MapNonNullableIUpdateComment_DesUpdateComment_ErrorsNonNullableArray(data.Errors ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IUpdateComment_DesUpdateComment_Errors> MapNonNullableIUpdateComment_DesUpdateComment_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPayloadErrors = new global::System.Collections.Generic.List<global::Nexar.Client.IUpdateComment_DesUpdateComment_Errors>();
            foreach (global::Nexar.Client.State.DesPayloadErrorData child in list)
            {
                desPayloadErrors.Add(MapNonNullableIUpdateComment_DesUpdateComment_Errors(child, snapshot));
            }

            return desPayloadErrors;
        }

        private global::Nexar.Client.IUpdateComment_DesUpdateComment_Errors MapNonNullableIUpdateComment_DesUpdateComment_Errors(global::Nexar.Client.State.DesPayloadErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IUpdateComment_DesUpdateComment_Errors returnValue = default !;
            if (data.__typename.Equals("DesPayloadError", global::System.StringComparison.Ordinal))
            {
                returnValue = new UpdateComment_DesUpdateComment_Errors_DesPayloadError(data.Message ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class UpdateCommentResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public UpdateCommentResultInfo(global::Nexar.Client.State.DesUpdateCommentPayloadData desUpdateComment, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesUpdateComment = desUpdateComment;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::Nexar.Client.State.DesUpdateCommentPayloadData DesUpdateComment { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new UpdateCommentResultInfo(DesUpdateComment, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetWorkspacesResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.GetWorkspacesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesWorkspaceEntity, GetWorkspaces_DesWorkspaces_DesWorkspace> _getWorkspaces_DesWorkspaces_DesWorkspaceFromDesWorkspaceEntityMapper;
        public GetWorkspacesResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesWorkspaceEntity, GetWorkspaces_DesWorkspaces_DesWorkspace> getWorkspaces_DesWorkspaces_DesWorkspaceFromDesWorkspaceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getWorkspaces_DesWorkspaces_DesWorkspaceFromDesWorkspaceEntityMapper = getWorkspaces_DesWorkspaces_DesWorkspaceFromDesWorkspaceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getWorkspaces_DesWorkspaces_DesWorkspaceFromDesWorkspaceEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.IGetWorkspacesResult);
        public GetWorkspacesResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetWorkspacesResultInfo info)
            {
                return new GetWorkspacesResult(MapNonNullableIGetWorkspaces_DesWorkspacesNonNullableArray(info.DesWorkspaces, snapshot));
            }

            throw new global::System.ArgumentException("GetWorkspacesResultInfo expected.");
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetWorkspaces_DesWorkspaces> MapNonNullableIGetWorkspaces_DesWorkspacesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desWorkspaces = new global::System.Collections.Generic.List<global::Nexar.Client.IGetWorkspaces_DesWorkspaces>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                desWorkspaces.Add(MapNonNullableIGetWorkspaces_DesWorkspaces(child, snapshot));
            }

            return desWorkspaces;
        }

        private global::Nexar.Client.IGetWorkspaces_DesWorkspaces MapNonNullableIGetWorkspaces_DesWorkspaces(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("DesWorkspace", global::System.StringComparison.Ordinal))
            {
                return _getWorkspaces_DesWorkspaces_DesWorkspaceFromDesWorkspaceEntityMapper.Map(snapshot.GetEntity<global::Nexar.Client.State.DesWorkspaceEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetWorkspacesResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetWorkspacesResultInfo(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> desWorkspaces, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesWorkspaces = desWorkspaces;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search for workspaces associated with this account.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> DesWorkspaces { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetWorkspacesResultInfo(DesWorkspaces, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetWorkspaces_DesWorkspaces_DesWorkspaceFromDesWorkspaceEntityMapper : global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesWorkspaceEntity, GetWorkspaces_DesWorkspaces_DesWorkspace>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetWorkspaces_DesWorkspaces_DesWorkspaceFromDesWorkspaceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetWorkspaces_DesWorkspaces_DesWorkspace Map(global::Nexar.Client.State.DesWorkspaceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetWorkspaces_DesWorkspaces_DesWorkspace(entity.Id, entity.Url, entity.Name, entity.Description, entity.IsDefault, MapNonNullableIGetWorkspaces_DesWorkspaces_Location(entity.Location, snapshot));
        }

        private global::Nexar.Client.IGetWorkspaces_DesWorkspaces_Location MapNonNullableIGetWorkspaces_DesWorkspaces_Location(global::Nexar.Client.State.DesWorkspaceLocationData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetWorkspaces_DesWorkspaces_Location returnValue = default !;
            if (data.__typename.Equals("DesWorkspaceLocation", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetWorkspaces_DesWorkspaces_Location_DesWorkspaceLocation(data.Name ?? throw new global::System.ArgumentNullException(), data.ApiServiceUrl ?? throw new global::System.ArgumentNullException(), data.FilesServiceUrl ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectInfoResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.GetProjectInfoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProjectInfoResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.IGetProjectInfoResult);
        public GetProjectInfoResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetProjectInfoResultInfo info)
            {
                return new GetProjectInfoResult(MapIGetProjectInfo_DesProjects(info.DesProjects, snapshot));
            }

            throw new global::System.ArgumentException("GetProjectInfoResultInfo expected.");
        }

        private global::Nexar.Client.IGetProjectInfo_DesProjects? MapIGetProjectInfo_DesProjects(global::Nexar.Client.State.DesProjectConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetProjectInfo_DesProjects returnValue = default !;
            if (data?.__typename.Equals("DesProjectConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetProjectInfo_DesProjects_DesProjectConnection(data.TotalCount ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetProjectInfo_DesProjects_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetProjectInfo_DesProjects_PageInfo MapNonNullableIGetProjectInfo_DesProjects_PageInfo(global::Nexar.Client.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetProjectInfo_DesProjects_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetProjectInfo_DesProjects_PageInfo_PageInfo(data.EndCursor, data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException(), data.StartCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectInfoResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetProjectInfoResultInfo(global::Nexar.Client.State.DesProjectConnectionData? desProjects, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesProjects = desProjects;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search projects within a workspace with results in paged groups.
        /// </summary>
        public global::Nexar.Client.State.DesProjectConnectionData? DesProjects { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetProjectInfoResultInfo(DesProjects, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.GetProjectsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetProjects_DesProjects_Nodes_DesProject> _getProjects_DesProjects_Nodes_DesProjectFromDesProjectEntityMapper;
        public GetProjectsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetProjects_DesProjects_Nodes_DesProject> getProjects_DesProjects_Nodes_DesProjectFromDesProjectEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getProjects_DesProjects_Nodes_DesProjectFromDesProjectEntityMapper = getProjects_DesProjects_Nodes_DesProjectFromDesProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getProjects_DesProjects_Nodes_DesProjectFromDesProjectEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.IGetProjectsResult);
        public GetProjectsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetProjectsResultInfo info)
            {
                return new GetProjectsResult(MapIGetProjects_DesProjects(info.DesProjects, snapshot));
            }

            throw new global::System.ArgumentException("GetProjectsResultInfo expected.");
        }

        private global::Nexar.Client.IGetProjects_DesProjects? MapIGetProjects_DesProjects(global::Nexar.Client.State.DesProjectConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetProjects_DesProjects returnValue = default !;
            if (data?.__typename.Equals("DesProjectConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetProjects_DesProjects_DesProjectConnection(data.TotalCount ?? throw new global::System.ArgumentNullException(), MapIGetProjects_DesProjects_NodesNonNullableArray(data.Nodes, snapshot), MapNonNullableIGetProjects_DesProjects_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetProjects_DesProjects_Nodes>? MapIGetProjects_DesProjects_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var desProjects = new global::System.Collections.Generic.List<global::Nexar.Client.IGetProjects_DesProjects_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                desProjects.Add(MapNonNullableIGetProjects_DesProjects_Nodes(child, snapshot));
            }

            return desProjects;
        }

        private global::Nexar.Client.IGetProjects_DesProjects_Nodes MapNonNullableIGetProjects_DesProjects_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("DesProject", global::System.StringComparison.Ordinal))
            {
                return _getProjects_DesProjects_Nodes_DesProjectFromDesProjectEntityMapper.Map(snapshot.GetEntity<global::Nexar.Client.State.DesProjectEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.IGetProjects_DesProjects_PageInfo MapNonNullableIGetProjects_DesProjects_PageInfo(global::Nexar.Client.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetProjects_DesProjects_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetProjects_DesProjects_PageInfo_PageInfo(data.EndCursor, data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException(), data.StartCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetProjectsResultInfo(global::Nexar.Client.State.DesProjectConnectionData? desProjects, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesProjects = desProjects;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search projects within a workspace with results in paged groups.
        /// </summary>
        public global::Nexar.Client.State.DesProjectConnectionData? DesProjects { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetProjectsResultInfo(DesProjects, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjects_DesProjects_Nodes_DesProjectFromDesProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetProjects_DesProjects_Nodes_DesProject>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetProjects_DesProjects_Nodes_DesProjectFromDesProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetProjects_DesProjects_Nodes_DesProject Map(global::Nexar.Client.State.DesProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetProjects_DesProjects_Nodes_DesProject(entity.Id, entity.Name, entity.Description, entity.ProjectId, entity.PreviewUrl, entity.UpdatedAt);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItemsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.GetDesignItemsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetDesignItems_DesProjectById_DesProject> _getDesignItems_DesProjectById_DesProjectFromDesProjectEntityMapper;
        public GetDesignItemsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetDesignItems_DesProjectById_DesProject> getDesignItems_DesProjectById_DesProjectFromDesProjectEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDesignItems_DesProjectById_DesProjectFromDesProjectEntityMapper = getDesignItems_DesProjectById_DesProjectFromDesProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDesignItems_DesProjectById_DesProjectFromDesProjectEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.IGetDesignItemsResult);
        public GetDesignItemsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetDesignItemsResultInfo info)
            {
                return new GetDesignItemsResult(MapIGetDesignItems_DesProjectById(info.DesProjectById, snapshot));
            }

            throw new global::System.ArgumentException("GetDesignItemsResultInfo expected.");
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById? MapIGetDesignItems_DesProjectById(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("DesProject", global::System.StringComparison.Ordinal))
            {
                return _getDesignItems_DesProjectById_DesProjectFromDesProjectEntityMapper.Map(snapshot.GetEntity<global::Nexar.Client.State.DesProjectEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItemsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetDesignItemsResultInfo(global::StrawberryShake.EntityId? desProjectById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesProjectById = desProjectById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search a specific project by its unique identifier.
        /// </summary>
        public global::StrawberryShake.EntityId? DesProjectById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetDesignItemsResultInfo(DesProjectById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_DesProjectFromDesProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetDesignItems_DesProjectById_DesProject>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesDesignItemEntity, GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem> _getDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItemFromDesDesignItemEntityMapper;
        public GetDesignItems_DesProjectById_DesProjectFromDesProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesDesignItemEntity, GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem> getDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItemFromDesDesignItemEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItemFromDesDesignItemEntityMapper = getDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItemFromDesDesignItemEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItemFromDesDesignItemEntityMapper));
        }

        public GetDesignItems_DesProjectById_DesProject Map(global::Nexar.Client.State.DesProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDesignItems_DesProjectById_DesProject(entity.Name, entity.Description, MapNonNullableIGetDesignItems_DesProjectById_Design(entity.Design, snapshot));
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design MapNonNullableIGetDesignItems_DesProjectById_Design(global::Nexar.Client.State.DesDesignData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesignItems_DesProjectById_Design returnValue = default !;
            if (data.__typename.Equals("DesDesign", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesignItems_DesProjectById_Design_DesDesign(MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress(data.WorkInProgress ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress(global::Nexar.Client.State.DesWorkInProgressData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesignItems_DesProjectById_Design_WorkInProgress returnValue = default !;
            if (data.__typename.Equals("DesWorkInProgress", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_DesWorkInProgress(MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(data.Variants ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants> MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesWipVariantData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desWipVariants = new global::System.Collections.Generic.List<global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants>();
            foreach (global::Nexar.Client.State.DesWipVariantData child in list)
            {
                desWipVariants.Add(MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants(child, snapshot));
            }

            return desWipVariants;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants(global::Nexar.Client.State.DesWipVariantData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants returnValue = default !;
            if (data.__typename.Equals("DesWipVariant", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant(MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb(data.Pcb, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb? MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb(global::Nexar.Client.State.DesPcbData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb returnValue = default !;
            if (data?.__typename.Equals("DesPcb", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb(MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems(data.DesignItems, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems? MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems(global::Nexar.Client.State.DesDesignItemConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems returnValue = default !;
            if (data?.__typename.Equals("DesDesignItemConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_DesDesignItemConnection(data.TotalCount ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot), MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_NodesNonNullableArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo(global::Nexar.Client.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo_PageInfo(data.HasNextPage ?? throw new global::System.ArgumentNullException(), data.HasPreviousPage ?? throw new global::System.ArgumentNullException(), data.StartCursor, data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes>? MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var desDesignItems = new global::System.Collections.Generic.List<global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                desDesignItems.Add(MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes(child, snapshot));
            }

            return desDesignItems;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("DesDesignItem", global::System.StringComparison.Ordinal))
            {
                return _getDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItemFromDesDesignItemEntityMapper.Map(snapshot.GetEntity<global::Nexar.Client.State.DesDesignItemEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position_DesPosition2D(data.X ?? throw new global::System.ArgumentNullException(), data.Y ?? throw new global::System.ArgumentNullException(), data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area? MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area(global::Nexar.Client.State.DesRectangleData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area returnValue = default !;
            if (data?.__typename.Equals("DesRectangle", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_DesRectangle(MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1(data.Pos1 ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2(data.Pos2 ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1 MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1 returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1_DesPosition2D(data.X ?? throw new global::System.ArgumentNullException(), data.Y ?? throw new global::System.ArgumentNullException(), data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2 MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2 returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2_DesPosition2D(data.X ?? throw new global::System.ArgumentNullException(), data.Y ?? throw new global::System.ArgumentNullException(), data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D? MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D(global::Nexar.Client.State.DesMesh3DData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D returnValue = default !;
            if (data?.__typename.Equals("DesMesh3D", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_DesMesh3D(MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile(data.GlbFile, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile? MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile(global::Nexar.Client.State.DesDownloadableFileData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile returnValue = default !;
            if (data?.__typename.Equals("DesDownloadableFile", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile_DesDownloadableFile(data.FileName ?? throw new global::System.ArgumentNullException(), data.DownloadUrl ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItemFromDesDesignItemEntityMapper : global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesDesignItemEntity, GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItemFromDesDesignItemEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem Map(global::Nexar.Client.State.DesDesignItemEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_DesDesignItem(entity.Id, entity.Designator, MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position(entity.Position, snapshot), MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area(entity.Area, snapshot), MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D(entity.Mesh3D, snapshot));
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position_DesPosition2D(data.X ?? throw new global::System.ArgumentNullException(), data.Y ?? throw new global::System.ArgumentNullException(), data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area? MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area(global::Nexar.Client.State.DesRectangleData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area returnValue = default !;
            if (data?.__typename.Equals("DesRectangle", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_DesRectangle(MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1(data.Pos1 ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2(data.Pos2 ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1 MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1 returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1_DesPosition2D(data.X ?? throw new global::System.ArgumentNullException(), data.Y ?? throw new global::System.ArgumentNullException(), data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2 MapNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2 returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2_DesPosition2D(data.X ?? throw new global::System.ArgumentNullException(), data.Y ?? throw new global::System.ArgumentNullException(), data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D? MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D(global::Nexar.Client.State.DesMesh3DData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D returnValue = default !;
            if (data?.__typename.Equals("DesMesh3D", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_DesMesh3D(MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile(data.GlbFile, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile? MapIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile(global::Nexar.Client.State.DesDownloadableFileData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile returnValue = default !;
            if (data?.__typename.Equals("DesDownloadableFile", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile_DesDownloadableFile(data.FileName ?? throw new global::System.ArgumentNullException(), data.DownloadUrl ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModelResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.GetPcbModelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetPcbModel_DesProjectById_DesProject> _getPcbModel_DesProjectById_DesProjectFromDesProjectEntityMapper;
        public GetPcbModelResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetPcbModel_DesProjectById_DesProject> getPcbModel_DesProjectById_DesProjectFromDesProjectEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getPcbModel_DesProjectById_DesProjectFromDesProjectEntityMapper = getPcbModel_DesProjectById_DesProjectFromDesProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPcbModel_DesProjectById_DesProjectFromDesProjectEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.IGetPcbModelResult);
        public GetPcbModelResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPcbModelResultInfo info)
            {
                return new GetPcbModelResult(MapIGetPcbModel_DesProjectById(info.DesProjectById, snapshot));
            }

            throw new global::System.ArgumentException("GetPcbModelResultInfo expected.");
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById? MapIGetPcbModel_DesProjectById(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("DesProject", global::System.StringComparison.Ordinal))
            {
                return _getPcbModel_DesProjectById_DesProjectFromDesProjectEntityMapper.Map(snapshot.GetEntity<global::Nexar.Client.State.DesProjectEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModelResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPcbModelResultInfo(global::StrawberryShake.EntityId? desProjectById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesProjectById = desProjectById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search a specific project by its unique identifier.
        /// </summary>
        public global::StrawberryShake.EntityId? DesProjectById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPcbModelResultInfo(DesProjectById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModel_DesProjectById_DesProjectFromDesProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetPcbModel_DesProjectById_DesProject>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPcbModel_DesProjectById_DesProjectFromDesProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetPcbModel_DesProjectById_DesProject Map(global::Nexar.Client.State.DesProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetPcbModel_DesProjectById_DesProject(entity.Id, entity.Name, entity.Description, MapNonNullableIGetPcbModel_DesProjectById_Design(entity.Design, snapshot));
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design MapNonNullableIGetPcbModel_DesProjectById_Design(global::Nexar.Client.State.DesDesignData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design returnValue = default !;
            if (data.__typename.Equals("DesDesign", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_DesDesign(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress(data.WorkInProgress ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress(global::Nexar.Client.State.DesWorkInProgressData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress returnValue = default !;
            if (data.__typename.Equals("DesWorkInProgress", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_DesWorkInProgress(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(data.Variants ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants> MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesWipVariantData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desWipVariants = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants>();
            foreach (global::Nexar.Client.State.DesWipVariantData child in list)
            {
                desWipVariants.Add(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants(child, snapshot));
            }

            return desWipVariants;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants(global::Nexar.Client.State.DesWipVariantData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants returnValue = default !;
            if (data.__typename.Equals("DesWipVariant", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant(MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb(data.Pcb, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb(global::Nexar.Client.State.DesPcbData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb returnValue = default !;
            if (data?.__typename.Equals("DesPcb", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb(data.DocumentId ?? throw new global::System.ArgumentNullException(), data.DocumentName ?? throw new global::System.ArgumentNullException(), MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack(data.LayerStack, snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline(data.Outline ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_PadsNonNullableArray(data.Pads ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_NetsNonNullableArray(data.Nets ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack(global::Nexar.Client.State.DesStackupData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack returnValue = default !;
            if (data?.__typename.Equals("DesStackup", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_DesStackup(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_StacksNonNullableArray(data.Stacks ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks> MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_StacksNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesStackData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desStacks = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks>();
            foreach (global::Nexar.Client.State.DesStackData child in list)
            {
                desStacks.Add(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks(child, snapshot));
            }

            return desStacks;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks(global::Nexar.Client.State.DesStackData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks returnValue = default !;
            if (data.__typename.Equals("DesStack", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_DesStack(data.Name ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_LayersNonNullableArray(data.Layers ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers> MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_LayersNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesLayerData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desLayers = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers>();
            foreach (global::Nexar.Client.State.DesLayerData child in list)
            {
                desLayers.Add(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers(child, snapshot));
            }

            return desLayers;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers(global::Nexar.Client.State.DesLayerData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers returnValue = default !;
            if (data.__typename.Equals("DesLayer", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_DesLayer(data.Name ?? throw new global::System.ArgumentNullException(), MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness(data.Thickness, snapshot), data.DielectricConstant, MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight(data.CopperWeight, snapshot), data.LayerType ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerPropertiesNonNullableArray(data.LayerProperties ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness(global::Nexar.Client.State.DesSizeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness returnValue = default !;
            if (data?.__typename.Equals("DesSize", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness_DesSize(data.XMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight(global::Nexar.Client.State.DesWeightData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight returnValue = default !;
            if (data?.__typename.Equals("DesWeight", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight_DesWeight(data.Gram ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties> MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerPropertiesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesLayerPropertyData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desLayerPropertys = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties>();
            foreach (global::Nexar.Client.State.DesLayerPropertyData child in list)
            {
                desLayerPropertys.Add(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties(child, snapshot));
            }

            return desLayerPropertys;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties(global::Nexar.Client.State.DesLayerPropertyData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties returnValue = default !;
            if (data.__typename.Equals("DesLayerProperty", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_DesLayerProperty(data.Name ?? throw new global::System.ArgumentNullException(), data.Text ?? throw new global::System.ArgumentNullException(), MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size(data.Size, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size(global::Nexar.Client.State.DesSizeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size returnValue = default !;
            if (data?.__typename.Equals("DesSize", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size_DesSize(data.XMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline(global::Nexar.Client.State.DesPolygonData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline returnValue = default !;
            if (data.__typename.Equals("DesPolygon", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_DesPolygon(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_VerticesNonNullableArray(data.Vertices ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices> MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_VerticesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPosition2DData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPosition2Ds = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices>();
            foreach (global::Nexar.Client.State.DesPosition2DData child in list)
            {
                desPosition2Ds.Add(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices(child, snapshot));
            }

            return desPosition2Ds;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices_DesPosition2D(data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads> MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_PadsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPadData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPads = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads>();
            foreach (global::Nexar.Client.State.DesPadData child in list)
            {
                desPads.Add(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads(child, snapshot));
            }

            return desPads;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads(global::Nexar.Client.State.DesPadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads returnValue = default !;
            if (data.__typename.Equals("DesPad", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_DesPad(data.Designator, data.GlobalDesignator, data.PadType ?? throw new global::System.ArgumentNullException(), data.Shape, MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net(data.Net, snapshot), MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer(data.Layer, snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position(data.Position ?? throw new global::System.ArgumentNullException(), snapshot), data.Rotation, MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size(data.Size ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize(data.HoleSize ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net(global::Nexar.Client.State.DesNetData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net returnValue = default !;
            if (data?.__typename.Equals("DesNet", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net_DesNet(data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer(global::Nexar.Client.State.DesLayerData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer returnValue = default !;
            if (data?.__typename.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer_DesLayer(data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position_DesPosition2D(data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size(global::Nexar.Client.State.DesSize2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size returnValue = default !;
            if (data.__typename.Equals("DesSize2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size_DesSize2D(data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize(global::Nexar.Client.State.DesSizeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize returnValue = default !;
            if (data.__typename.Equals("DesSize", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize_DesSize(data.XMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets> MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_NetsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesNetData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desNets = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets>();
            foreach (global::Nexar.Client.State.DesNetData child in list)
            {
                desNets.Add(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets(child, snapshot));
            }

            return desNets;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets(global::Nexar.Client.State.DesNetData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets returnValue = default !;
            if (data.__typename.Equals("DesNet", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_DesNet(data.Name ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_PadsNonNullableArray(data.Pads ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_TracksNonNullableArray(data.Tracks ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_ViasNonNullableArray(data.Vias ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads> MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_PadsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPadData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPads = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads>();
            foreach (global::Nexar.Client.State.DesPadData child in list)
            {
                desPads.Add(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads(child, snapshot));
            }

            return desPads;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads(global::Nexar.Client.State.DesPadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads returnValue = default !;
            if (data.__typename.Equals("DesPad", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_DesPad(data.Designator, data.GlobalDesignator, data.PadType ?? throw new global::System.ArgumentNullException(), data.Shape, MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer(data.Layer, snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position(data.Position ?? throw new global::System.ArgumentNullException(), snapshot), data.Rotation, MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size(data.Size ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize(data.HoleSize ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer(global::Nexar.Client.State.DesLayerData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer returnValue = default !;
            if (data?.__typename.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer_DesLayer(data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position_DesPosition2D(data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size(global::Nexar.Client.State.DesSize2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size returnValue = default !;
            if (data.__typename.Equals("DesSize2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size_DesSize2D(data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize(global::Nexar.Client.State.DesSizeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize returnValue = default !;
            if (data.__typename.Equals("DesSize", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize_DesSize(data.XMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks> MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_TracksNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesTrackData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desTracks = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks>();
            foreach (global::Nexar.Client.State.DesTrackData child in list)
            {
                desTracks.Add(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks(child, snapshot));
            }

            return desTracks;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks(global::Nexar.Client.State.DesTrackData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks returnValue = default !;
            if (data.__typename.Equals("DesTrack", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_DesTrack(MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer(data.Layer, snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width(data.Width ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin(data.Begin ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End(data.End ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer(global::Nexar.Client.State.DesLayerData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer returnValue = default !;
            if (data?.__typename.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer_DesLayer(data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width(global::Nexar.Client.State.DesSizeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width returnValue = default !;
            if (data.__typename.Equals("DesSize", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width_DesSize(data.XMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin_DesPosition2D(data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End_DesPosition2D(data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias> MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_ViasNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesViaData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desVias = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias>();
            foreach (global::Nexar.Client.State.DesViaData child in list)
            {
                desVias.Add(MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias(child, snapshot));
            }

            return desVias;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias(global::Nexar.Client.State.DesViaData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias returnValue = default !;
            if (data.__typename.Equals("DesVia", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_DesVia(data.Shape, MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer(data.BeginLayer, snapshot), MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer(data.EndLayer, snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position(data.Position ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter(data.PadDiameter ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter(data.HoleDiameter ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer(global::Nexar.Client.State.DesLayerData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer returnValue = default !;
            if (data?.__typename.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer_DesLayer(data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer? MapIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer(global::Nexar.Client.State.DesLayerData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer returnValue = default !;
            if (data?.__typename.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer_DesLayer(data.Name ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position_DesPosition2D(data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter(global::Nexar.Client.State.DesSizeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter returnValue = default !;
            if (data.__typename.Equals("DesSize", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter_DesSize(data.XMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter MapNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter(global::Nexar.Client.State.DesSizeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter returnValue = default !;
            if (data.__typename.Equals("DesSize", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter_DesSize(data.XMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbCommentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.GetPcbCommentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetPcbComments_DesProjectById_DesProject> _getPcbComments_DesProjectById_DesProjectFromDesProjectEntityMapper;
        public GetPcbCommentsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetPcbComments_DesProjectById_DesProject> getPcbComments_DesProjectById_DesProjectFromDesProjectEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getPcbComments_DesProjectById_DesProjectFromDesProjectEntityMapper = getPcbComments_DesProjectById_DesProjectFromDesProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getPcbComments_DesProjectById_DesProjectFromDesProjectEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::Nexar.Client.IGetPcbCommentsResult);
        public GetPcbCommentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetPcbCommentsResultInfo info)
            {
                return new GetPcbCommentsResult(MapIGetPcbComments_DesProjectById(info.DesProjectById, snapshot));
            }

            throw new global::System.ArgumentException("GetPcbCommentsResultInfo expected.");
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById? MapIGetPcbComments_DesProjectById(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("DesProject", global::System.StringComparison.Ordinal))
            {
                return _getPcbComments_DesProjectById_DesProjectFromDesProjectEntityMapper.Map(snapshot.GetEntity<global::Nexar.Client.State.DesProjectEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbCommentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetPcbCommentsResultInfo(global::StrawberryShake.EntityId? desProjectById, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            DesProjectById = desProjectById;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search a specific project by its unique identifier.
        /// </summary>
        public global::StrawberryShake.EntityId? DesProjectById { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetPcbCommentsResultInfo(DesProjectById, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbComments_DesProjectById_DesProjectFromDesProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::Nexar.Client.State.DesProjectEntity, GetPcbComments_DesProjectById_DesProject>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetPcbComments_DesProjectById_DesProjectFromDesProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetPcbComments_DesProjectById_DesProject Map(global::Nexar.Client.State.DesProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetPcbComments_DesProjectById_DesProject(entity.Name, entity.Description, MapNonNullableIGetPcbComments_DesProjectById_Design(entity.Design, snapshot));
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design MapNonNullableIGetPcbComments_DesProjectById_Design(global::Nexar.Client.State.DesDesignData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design returnValue = default !;
            if (data.__typename.Equals("DesDesign", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_DesDesign(MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress(data.WorkInProgress ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress(global::Nexar.Client.State.DesWorkInProgressData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design_WorkInProgress returnValue = default !;
            if (data.__typename.Equals("DesWorkInProgress", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_DesWorkInProgress(MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(data.Variants ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants> MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesWipVariantData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desWipVariants = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants>();
            foreach (global::Nexar.Client.State.DesWipVariantData child in list)
            {
                desWipVariants.Add(MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants(child, snapshot));
            }

            return desWipVariants;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants(global::Nexar.Client.State.DesWipVariantData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants returnValue = default !;
            if (data.__typename.Equals("DesWipVariant", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_DesWipVariant(MapIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb(data.Pcb, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb? MapIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb(global::Nexar.Client.State.DesPcbData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb returnValue = default !;
            if (data?.__typename.Equals("DesPcb", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesPcb(data.DocumentId ?? throw new global::System.ArgumentNullException(), data.DocumentName ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreadsNonNullableArray(data.CommentThreads ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads> MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreadsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesCommentThreadData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desCommentThreads = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads>();
            foreach (global::Nexar.Client.State.DesCommentThreadData child in list)
            {
                desCommentThreads.Add(MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads(child, snapshot));
            }

            return desCommentThreads;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads(global::Nexar.Client.State.DesCommentThreadData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads returnValue = default !;
            if (data.__typename.Equals("DesCommentThread", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_DesCommentThread(data.CommentThreadId ?? throw new global::System.ArgumentNullException(), data.CreatedAt ?? throw new global::System.ArgumentNullException(), data.ModifiedAt ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context(data.Context ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_CommentsNonNullableArray(data.Comments ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context(global::Nexar.Client.State.DesCommentContextData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context returnValue = default !;
            if (data.__typename.Equals("DesCommentContext", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_DesCommentContext(MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area(data.Area ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area(global::Nexar.Client.State.DesRectangleData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area returnValue = default !;
            if (data.__typename.Equals("DesRectangle", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_DesRectangle(MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1(data.Pos1 ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2(data.Pos2 ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1 MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1 returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1_DesPosition2D(data.X ?? throw new global::System.ArgumentNullException(), data.Y ?? throw new global::System.ArgumentNullException(), data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2 MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2(global::Nexar.Client.State.DesPosition2DData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2 returnValue = default !;
            if (data.__typename.Equals("DesPosition2D", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2_DesPosition2D(data.X ?? throw new global::System.ArgumentNullException(), data.Y ?? throw new global::System.ArgumentNullException(), data.XMm ?? throw new global::System.ArgumentNullException(), data.YMm ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments> MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_CommentsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesCommentData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var desComments = new global::System.Collections.Generic.List<global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments>();
            foreach (global::Nexar.Client.State.DesCommentData child in list)
            {
                desComments.Add(MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments(child, snapshot));
            }

            return desComments;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments(global::Nexar.Client.State.DesCommentData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments returnValue = default !;
            if (data.__typename.Equals("DesComment", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_DesComment(data.CommentId ?? throw new global::System.ArgumentNullException(), data.Text ?? throw new global::System.ArgumentNullException(), data.CreatedAt ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy(data.CreatedBy ?? throw new global::System.ArgumentNullException(), snapshot), data.ModifiedAt ?? throw new global::System.ArgumentNullException(), MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy(data.ModifiedBy ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy(global::Nexar.Client.State.DesUserData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy returnValue = default !;
            if (data.__typename.Equals("DesUser", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy_DesUser(data.FirstName, data.LastName, data.Email, data.PictureUrl);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::Nexar.Client.IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy MapNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy(global::Nexar.Client.State.DesUserData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy returnValue = default !;
            if (data.__typename.Equals("DesUser", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy_DesUser(data.FirstName, data.LastName, data.Email, data.PictureUrl);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    internal interface IDesCreateCommentThreadInputInfo
    {
        global::System.Boolean IsEntityIdSet { get; }

        global::System.Boolean IsDocumentIdSet { get; }

        global::System.Boolean IsDocumentNameSet { get; }

        global::System.Boolean IsDocumentTypeSet { get; }

        global::System.Boolean IsTextSet { get; }

        global::System.Boolean IsCommentContextTypeSet { get; }

        global::System.Boolean IsItemAsDesignItemIdSet { get; }

        global::System.Boolean IsItemAsInternalObjectIdSet { get; }

        global::System.Boolean IsAreaSet { get; }

        global::System.Boolean IsReleaseIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    internal interface IDesRectangleInputInfo
    {
        global::System.Boolean IsPos1Set { get; }

        global::System.Boolean IsPos2Set { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    internal interface IDesPosition2DInputInfo
    {
        global::System.Boolean IsXSet { get; }

        global::System.Boolean IsYSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    internal interface IDesDeleteCommentThreadInputInfo
    {
        global::System.Boolean IsEntityIdSet { get; }

        global::System.Boolean IsCommentThreadIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    internal interface IDesCreateCommentInputInfo
    {
        global::System.Boolean IsEntityIdSet { get; }

        global::System.Boolean IsCommentThreadIdSet { get; }

        global::System.Boolean IsTextSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    internal interface IDesDeleteCommentInputInfo
    {
        global::System.Boolean IsEntityIdSet { get; }

        global::System.Boolean IsCommentThreadIdSet { get; }

        global::System.Boolean IsCommentIdSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    internal interface IDesUpdateCommentInputInfo
    {
        global::System.Boolean IsEntityIdSet { get; }

        global::System.Boolean IsCommentThreadIdSet { get; }

        global::System.Boolean IsCommentIdSet { get; }

        global::System.Boolean IsTextSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentThreadBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.ICreateCommentThreadResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.ICreateCommentThreadResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Nexar.Client.DesDocumentType> _desDocumentTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Nexar.Client.DesCommentContextType> _desCommentContextTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public CreateCommentThreadBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.ICreateCommentThreadResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _desDocumentTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Nexar.Client.DesDocumentType>("DesDocumentType") ?? throw new global::System.ArgumentException("No serializer for type `DesDocumentType` found.");
            _desCommentContextTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Nexar.Client.DesCommentContextType>("DesCommentContextType") ?? throw new global::System.ArgumentException("No serializer for type `DesCommentContextType` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateCommentThreadResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateCommentThreadResult Result, CreateCommentThreadResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICreateCommentThreadResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateCommentThreadResult, CreateCommentThreadResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateCommentThreadResultInfo(DeserializeNonNullableICreateCommentThread_DesCreateCommentThread(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desCreateCommentThread")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Nexar.Client.State.DesCreateCommentThreadPayloadData DeserializeNonNullableICreateCommentThread_DesCreateCommentThread(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesCreateCommentThreadPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesCreateCommentThreadPayloadData(typename, commentThreadId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commentThreadId")), commentId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commentId")), errors: DeserializeNonNullableICreateCommentThread_DesCreateCommentThread_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData> DeserializeNonNullableICreateCommentThread_DesCreateCommentThread_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPayloadErrors = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesPayloadErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desPayloadErrors.Add(DeserializeNonNullableICreateCommentThread_DesCreateCommentThread_Errors(child));
            }

            return desPayloadErrors;
        }

        private global::Nexar.Client.State.DesPayloadErrorData DeserializeNonNullableICreateCommentThread_DesCreateCommentThread_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPayloadError", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPayloadErrorData(typename, message: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentThreadBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IDeleteCommentThreadResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IDeleteCommentThreadResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DeleteCommentThreadBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IDeleteCommentThreadResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteCommentThreadResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteCommentThreadResult Result, DeleteCommentThreadResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeleteCommentThreadResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteCommentThreadResult, DeleteCommentThreadResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteCommentThreadResultInfo(DeserializeNonNullableIDeleteCommentThread_DesDeleteCommentThread(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desDeleteCommentThread")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Nexar.Client.State.DesDeleteCommentThreadPayloadData DeserializeNonNullableIDeleteCommentThread_DesDeleteCommentThread(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesDeleteCommentThreadPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesDeleteCommentThreadPayloadData(typename, errors: DeserializeNonNullableIDeleteCommentThread_DesDeleteCommentThread_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData> DeserializeNonNullableIDeleteCommentThread_DesDeleteCommentThread_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPayloadErrors = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesPayloadErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desPayloadErrors.Add(DeserializeNonNullableIDeleteCommentThread_DesDeleteCommentThread_Errors(child));
            }

            return desPayloadErrors;
        }

        private global::Nexar.Client.State.DesPayloadErrorData DeserializeNonNullableIDeleteCommentThread_DesDeleteCommentThread_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPayloadError", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPayloadErrorData(typename, message: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class CreateCommentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.ICreateCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.ICreateCommentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public CreateCommentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.ICreateCommentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<ICreateCommentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICreateCommentResult Result, CreateCommentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICreateCommentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICreateCommentResult, CreateCommentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CreateCommentResultInfo(DeserializeNonNullableICreateComment_DesCreateComment(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desCreateComment")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Nexar.Client.State.DesCreateCommentPayloadData DeserializeNonNullableICreateComment_DesCreateComment(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesCreateCommentPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesCreateCommentPayloadData(typename, commentId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commentId")), errors: DeserializeNonNullableICreateComment_DesCreateComment_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData> DeserializeNonNullableICreateComment_DesCreateComment_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPayloadErrors = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesPayloadErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desPayloadErrors.Add(DeserializeNonNullableICreateComment_DesCreateComment_Errors(child));
            }

            return desPayloadErrors;
        }

        private global::Nexar.Client.State.DesPayloadErrorData DeserializeNonNullableICreateComment_DesCreateComment_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPayloadError", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPayloadErrorData(typename, message: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DeleteCommentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IDeleteCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IDeleteCommentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public DeleteCommentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IDeleteCommentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeleteCommentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeleteCommentResult Result, DeleteCommentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeleteCommentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeleteCommentResult, DeleteCommentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeleteCommentResultInfo(DeserializeNonNullableIDeleteComment_DesDeleteComment(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desDeleteComment")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Nexar.Client.State.DesDeleteCommentPayloadData DeserializeNonNullableIDeleteComment_DesDeleteComment(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesDeleteCommentPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesDeleteCommentPayloadData(typename, errors: DeserializeNonNullableIDeleteComment_DesDeleteComment_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData> DeserializeNonNullableIDeleteComment_DesDeleteComment_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPayloadErrors = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesPayloadErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desPayloadErrors.Add(DeserializeNonNullableIDeleteComment_DesDeleteComment_Errors(child));
            }

            return desPayloadErrors;
        }

        private global::Nexar.Client.State.DesPayloadErrorData DeserializeNonNullableIDeleteComment_DesDeleteComment_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPayloadError", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPayloadErrorData(typename, message: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class UpdateCommentBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IUpdateCommentResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IUpdateCommentResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public UpdateCommentBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IUpdateCommentResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IUpdateCommentResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IUpdateCommentResult Result, UpdateCommentResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IUpdateCommentResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IUpdateCommentResult, UpdateCommentResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new UpdateCommentResultInfo(DeserializeNonNullableIUpdateComment_DesUpdateComment(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desUpdateComment")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Nexar.Client.State.DesUpdateCommentPayloadData DeserializeNonNullableIUpdateComment_DesUpdateComment(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesUpdateCommentPayload", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesUpdateCommentPayloadData(typename, errors: DeserializeNonNullableIUpdateComment_DesUpdateComment_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData> DeserializeNonNullableIUpdateComment_DesUpdateComment_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPayloadErrors = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesPayloadErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desPayloadErrors.Add(DeserializeNonNullableIUpdateComment_DesUpdateComment_Errors(child));
            }

            return desPayloadErrors;
        }

        private global::Nexar.Client.State.DesPayloadErrorData DeserializeNonNullableIUpdateComment_DesUpdateComment_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPayloadError", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPayloadErrorData(typename, message: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "message")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetWorkspacesBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetWorkspacesResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetWorkspacesResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetWorkspacesBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetWorkspacesResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetWorkspacesResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetWorkspacesResult Result, GetWorkspacesResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetWorkspacesResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetWorkspacesResult, GetWorkspacesResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> desWorkspacesId = default !;
            _entityStore.Update(session =>
            {
                desWorkspacesId = UpdateNonNullableIGetWorkspaces_DesWorkspacesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desWorkspaces"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetWorkspacesResultInfo(desWorkspacesId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIGetWorkspaces_DesWorkspacesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desWorkspaces = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desWorkspaces.Add(UpdateNonNullableIGetWorkspaces_DesWorkspacesEntity(session, child, entityIds));
            }

            return desWorkspaces;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetWorkspaces_DesWorkspacesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("DesWorkspace", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Nexar.Client.State.DesWorkspaceEntity? entity))
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesWorkspaceEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isDefault")), DeserializeNonNullableIGetWorkspaces_DesWorkspaces_Location(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "location"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesWorkspaceEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isDefault")), DeserializeNonNullableIGetWorkspaces_DesWorkspaces_Location(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "location"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::Nexar.Client.State.DesWorkspaceLocationData DeserializeNonNullableIGetWorkspaces_DesWorkspaces_Location(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesWorkspaceLocation", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesWorkspaceLocationData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), apiServiceUrl: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "apiServiceUrl")), filesServiceUrl: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filesServiceUrl")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectInfoBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetProjectInfoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetProjectInfoResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetProjectInfoBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetProjectInfoResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetProjectInfoResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetProjectInfoResult Result, GetProjectInfoResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetProjectInfoResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetProjectInfoResult, GetProjectInfoResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetProjectInfoResultInfo(DeserializeIGetProjectInfo_DesProjects(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desProjects")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Nexar.Client.State.DesProjectConnectionData? DeserializeIGetProjectInfo_DesProjects(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesProjectConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesProjectConnectionData(typename, totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")), pageInfo: DeserializeNonNullableIGetProjectInfo_DesProjects_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::Nexar.Client.State.PageInfoData DeserializeNonNullableIGetProjectInfo_DesProjects_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.PageInfoData(typename, endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")), hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")), startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetProjectsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetProjectsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetProjectsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GetProjectsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetProjectsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetProjectsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetProjectsResult Result, GetProjectsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetProjectsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetProjectsResult, GetProjectsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::Nexar.Client.State.DesProjectConnectionData? desProjectsId = default !;
            _entityStore.Update(session =>
            {
                desProjectsId = DeserializeIGetProjects_DesProjects(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desProjects"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetProjectsResultInfo(desProjectsId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::Nexar.Client.State.DesProjectConnectionData? DeserializeIGetProjects_DesProjects(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesProjectConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesProjectConnectionData(typename, totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")), nodes: UpdateIGetProjects_DesProjects_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds), pageInfo: DeserializeNonNullableIGetProjects_DesProjects_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetProjects_DesProjects_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var desProjects = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desProjects.Add(UpdateNonNullableIGetProjects_DesProjects_NodesEntity(session, child, entityIds));
            }

            return desProjects;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetProjects_DesProjects_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("DesProject", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Nexar.Client.State.DesProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesProjectEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previewUrl")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedAt")), entity.Design));
                }
                else
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesProjectEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectId")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "previewUrl")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedAt")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::Nexar.Client.State.PageInfoData DeserializeNonNullableIGetProjects_DesProjects_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.PageInfoData(typename, endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")), hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")), startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetDesignItemsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetDesignItemsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetDesignItemsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetDesignItemsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetDesignItemsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetDesignItemsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetDesignItemsResult Result, GetDesignItemsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetDesignItemsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetDesignItemsResult, GetDesignItemsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? desProjectByIdId = default !;
            _entityStore.Update(session =>
            {
                desProjectByIdId = UpdateIGetDesignItems_DesProjectByIdEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desProjectById"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetDesignItemsResultInfo(desProjectByIdId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetDesignItems_DesProjectByIdEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("DesProject", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Nexar.Client.State.DesProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesProjectEntity(entity.Id, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), entity.ProjectId, entity.PreviewUrl, entity.UpdatedAt, DeserializeNonNullableIGetDesignItems_DesProjectById_Design(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "design"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesProjectEntity(default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), default !, default !, default !, DeserializeNonNullableIGetDesignItems_DesProjectById_Design(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "design"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Nexar.Client.State.DesDesignData DeserializeNonNullableIGetDesignItems_DesProjectById_Design(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesDesign", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesDesignData(typename, workInProgress: DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workInProgress"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesWorkInProgressData DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesWorkInProgress", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesWorkInProgressData(typename, variants: DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "variants"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesWipVariantData> DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desWipVariants = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesWipVariantData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desWipVariants.Add(DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants(session, child, entityIds));
            }

            return desWipVariants;
        }

        private global::Nexar.Client.State.DesWipVariantData DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesWipVariant", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesWipVariantData(typename, pcb: DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pcb"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPcbData? DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPcb", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPcbData(typename, designItems: DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "designItems"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesDesignItemConnectionData? DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesDesignItemConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesDesignItemConnectionData(typename, totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")), pageInfo: DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")), nodes: UpdateIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::Nexar.Client.State.PageInfoData DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.PageInfoData(typename, hasNextPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasNextPage")), hasPreviousPage: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasPreviousPage")), startCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startCursor")), endCursor: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? UpdateIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var desDesignItems = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desDesignItems.Add(UpdateNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_NodesEntity(session, child, entityIds));
            }

            return desDesignItems;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("DesDesignItem", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Nexar.Client.State.DesDesignItemEntity? entity))
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesDesignItemEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "designator")), DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "position")), DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "area")), DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mesh3D"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesDesignItemEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "designator")), DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "position")), DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "area")), DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mesh3D"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Position(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, x: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "x")), y: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "y")), xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::Nexar.Client.State.DesRectangleData? DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesRectangle", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesRectangleData(typename, pos1: DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pos1")), pos2: DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pos2")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos1(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, x: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "x")), y: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "y")), xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Area_Pos2(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, x: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "x")), y: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "y")), xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesMesh3DData? DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesMesh3D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesMesh3DData(typename, glbFile: DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glbFile")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesDownloadableFileData? DeserializeIGetDesignItems_DesProjectById_Design_WorkInProgress_Variants_Pcb_DesignItems_Nodes_Mesh3D_GlbFile(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesDownloadableFile", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesDownloadableFileData(typename, fileName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fileName")), downloadUrl: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "downloadUrl")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbModelBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetPcbModelResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetPcbModelResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Nexar.Client.DesLayerType> _desLayerTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Nexar.Client.DesPadType> _desPadTypeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::Nexar.Client.DesPrimitiveShape> _desPrimitiveShapeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetPcbModelBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetPcbModelResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _desLayerTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Nexar.Client.DesLayerType>("DesLayerType") ?? throw new global::System.ArgumentException("No serializer for type `DesLayerType` found.");
            _desPadTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Nexar.Client.DesPadType>("DesPadType") ?? throw new global::System.ArgumentException("No serializer for type `DesPadType` found.");
            _desPrimitiveShapeParser = serializerResolver.GetLeafValueParser<global::System.String, global::Nexar.Client.DesPrimitiveShape>("DesPrimitiveShape") ?? throw new global::System.ArgumentException("No serializer for type `DesPrimitiveShape` found.");
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetPcbModelResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetPcbModelResult Result, GetPcbModelResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetPcbModelResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetPcbModelResult, GetPcbModelResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? desProjectByIdId = default !;
            _entityStore.Update(session =>
            {
                desProjectByIdId = UpdateIGetPcbModel_DesProjectByIdEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desProjectById"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetPcbModelResultInfo(desProjectByIdId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetPcbModel_DesProjectByIdEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("DesProject", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Nexar.Client.State.DesProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesProjectEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), entity.ProjectId, entity.PreviewUrl, entity.UpdatedAt, DeserializeNonNullableIGetPcbModel_DesProjectById_Design(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "design"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesProjectEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), default !, default !, default !, DeserializeNonNullableIGetPcbModel_DesProjectById_Design(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "design"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _iDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Nexar.Client.State.DesDesignData DeserializeNonNullableIGetPcbModel_DesProjectById_Design(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesDesign", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesDesignData(typename, workInProgress: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workInProgress")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesWorkInProgressData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesWorkInProgress", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesWorkInProgressData(typename, variants: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "variants")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesWipVariantData> DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desWipVariants = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesWipVariantData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desWipVariants.Add(DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants(child));
            }

            return desWipVariants;
        }

        private global::Nexar.Client.State.DesWipVariantData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesWipVariant", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesWipVariantData(typename, pcb: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pcb")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPcbData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPcb", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPcbData(typename, documentId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "documentId")), documentName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "documentName")), layerStack: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "layerStack")), outline: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "outline")), pads: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_PadsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pads")), nets: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_NetsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nets")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesStackupData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesStackup", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesStackupData(typename, stacks: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_StacksNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stacks")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesStackData> DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_StacksNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desStacks = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesStackData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desStacks.Add(DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks(child));
            }

            return desStacks;
        }

        private global::Nexar.Client.State.DesStackData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesStack", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesStackData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), layers: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_LayersNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "layers")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesLayerData> DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_LayersNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desLayers = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesLayerData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desLayers.Add(DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers(child));
            }

            return desLayers;
        }

        private global::Nexar.Client.State.DesLayerData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesLayerData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), thickness: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "thickness")), dielectricConstant: DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dielectricConstant")), copperWeight: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "copperWeight")), layerType: DeserializeNonNullableDesLayerType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "layerType")), layerProperties: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerPropertiesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "layerProperties")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesSizeData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_Thickness(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesSize", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesSizeData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.Decimal? DeserializeDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::Nexar.Client.State.DesWeightData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_CopperWeight(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesWeight", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesWeightData(typename, gram: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "gram")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.DesLayerType DeserializeNonNullableDesLayerType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _desLayerTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesLayerPropertyData> DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerPropertiesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desLayerPropertys = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesLayerPropertyData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desLayerPropertys.Add(DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties(child));
            }

            return desLayerPropertys;
        }

        private global::Nexar.Client.State.DesLayerPropertyData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesLayerProperty", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesLayerPropertyData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), text: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), size: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "size")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesSizeData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_LayerStack_Stacks_Layers_LayerProperties_Size(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesSize", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesSizeData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPolygonData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPolygon", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPolygonData(typename, vertices: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_VerticesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "vertices")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPosition2DData> DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_VerticesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPosition2Ds = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesPosition2DData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desPosition2Ds.Add(DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices(child));
            }

            return desPosition2Ds;
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Outline_Vertices(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPadData> DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_PadsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPads = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesPadData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desPads.Add(DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads(child));
            }

            return desPads;
        }

        private global::Nexar.Client.State.DesPadData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPad", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPadData(typename, designator: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "designator")), globalDesignator: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "globalDesignator")), padType: DeserializeNonNullableDesPadType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "padType")), shape: DeserializeDesPrimitiveShape(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shape")), net: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "net")), layer: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "layer")), position: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "position")), rotation: DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rotation")), size: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "size")), holeSize: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "holeSize")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.DesPadType DeserializeNonNullableDesPadType(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _desPadTypeParser.Parse(obj.Value.GetString()!);
        }

        private global::Nexar.Client.DesPrimitiveShape? DeserializeDesPrimitiveShape(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _desPrimitiveShapeParser.Parse(obj.Value.GetString()!);
        }

        private global::Nexar.Client.State.DesNetData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Net(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesNet", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesNetData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesLayerData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Layer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesLayerData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Position(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesSize2DData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_Size(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesSize2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesSize2DData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesSizeData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Pads_HoleSize(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesSize", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesSizeData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesNetData> DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_NetsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desNets = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesNetData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desNets.Add(DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets(child));
            }

            return desNets;
        }

        private global::Nexar.Client.State.DesNetData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesNet", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesNetData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), pads: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_PadsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pads")), tracks: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_TracksNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tracks")), vias: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_ViasNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "vias")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPadData> DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_PadsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desPads = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesPadData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desPads.Add(DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads(child));
            }

            return desPads;
        }

        private global::Nexar.Client.State.DesPadData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPad", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPadData(typename, designator: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "designator")), globalDesignator: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "globalDesignator")), padType: DeserializeNonNullableDesPadType(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "padType")), shape: DeserializeDesPrimitiveShape(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shape")), layer: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "layer")), position: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "position")), rotation: DeserializeDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rotation")), size: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "size")), holeSize: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "holeSize")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesLayerData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Layer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesLayerData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Position(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesSize2DData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_Size(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesSize2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesSize2DData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesSizeData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Pads_HoleSize(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesSize", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesSizeData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesTrackData> DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_TracksNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desTracks = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesTrackData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desTracks.Add(DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks(child));
            }

            return desTracks;
        }

        private global::Nexar.Client.State.DesTrackData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesTrack", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesTrackData(typename, layer: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "layer")), width: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "width")), begin: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "begin")), end: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "end")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesLayerData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Layer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesLayerData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesSizeData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Width(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesSize", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesSizeData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_Begin(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Tracks_End(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesViaData> DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_ViasNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desVias = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesViaData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desVias.Add(DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias(child));
            }

            return desVias;
        }

        private global::Nexar.Client.State.DesViaData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesVia", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesViaData(typename, shape: DeserializeDesPrimitiveShape(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "shape")), beginLayer: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "beginLayer")), endLayer: DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endLayer")), position: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "position")), padDiameter: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "padDiameter")), holeDiameter: DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "holeDiameter")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesLayerData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_BeginLayer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesLayerData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesLayerData? DeserializeIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_EndLayer(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesLayer", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesLayerData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_Position(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesSizeData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_PadDiameter(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesSize", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesSizeData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesSizeData DeserializeNonNullableIGetPcbModel_DesProjectById_Design_WorkInProgress_Variants_Pcb_Nets_Vias_HoleDiameter(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesSize", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesSizeData(typename, xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class GetPcbCommentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::Nexar.Client.IGetPcbCommentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetPcbCommentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _iDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetPcbCommentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::Nexar.Client.IGetPcbCommentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _iDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ID") ?? throw new global::System.ArgumentException("No serializer for type `ID` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetPcbCommentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetPcbCommentsResult Result, GetPcbCommentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetPcbCommentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetPcbCommentsResult, GetPcbCommentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? desProjectByIdId = default !;
            _entityStore.Update(session =>
            {
                desProjectByIdId = UpdateIGetPcbComments_DesProjectByIdEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "desProjectById"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetPcbCommentsResultInfo(desProjectByIdId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetPcbComments_DesProjectByIdEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("DesProject", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::Nexar.Client.State.DesProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesProjectEntity(entity.Id, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), entity.ProjectId, entity.PreviewUrl, entity.UpdatedAt, DeserializeNonNullableIGetPcbComments_DesProjectById_Design(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "design"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::Nexar.Client.State.DesProjectEntity(default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), default !, default !, default !, DeserializeNonNullableIGetPcbComments_DesProjectById_Design(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "design"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::Nexar.Client.State.DesDesignData DeserializeNonNullableIGetPcbComments_DesProjectById_Design(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesDesign", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesDesignData(typename, workInProgress: DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "workInProgress")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesWorkInProgressData DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesWorkInProgress", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesWorkInProgressData(typename, variants: DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "variants")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesWipVariantData> DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_VariantsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desWipVariants = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesWipVariantData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desWipVariants.Add(DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants(child));
            }

            return desWipVariants;
        }

        private global::Nexar.Client.State.DesWipVariantData DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesWipVariant", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesWipVariantData(typename, pcb: DeserializeIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pcb")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPcbData? DeserializeIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPcb", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPcbData(typename, documentId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "documentId")), documentName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "documentName")), commentThreads: DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreadsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commentThreads")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesCommentThreadData> DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreadsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desCommentThreads = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesCommentThreadData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desCommentThreads.Add(DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads(child));
            }

            return desCommentThreads;
        }

        private global::Nexar.Client.State.DesCommentThreadData DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesCommentThread", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesCommentThreadData(typename, commentThreadId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commentThreadId")), createdAt: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), modifiedAt: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modifiedAt")), context: DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "context")), comments: DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_CommentsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "comments")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::Nexar.Client.State.DesCommentContextData DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesCommentContext", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesCommentContextData(typename, area: DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "area")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesRectangleData DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesRectangle", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesRectangleData(typename, pos1: DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pos1")), pos2: DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pos2")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos1(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, x: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "x")), y: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "y")), xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::Nexar.Client.State.DesPosition2DData DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Context_Area_Pos2(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesPosition2D", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesPosition2DData(typename, x: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "x")), y: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "y")), xMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "xMm")), yMm: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "yMm")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesCommentData> DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_CommentsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var desComments = new global::System.Collections.Generic.List<global::Nexar.Client.State.DesCommentData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                desComments.Add(DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments(child));
            }

            return desComments;
        }

        private global::Nexar.Client.State.DesCommentData DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesComment", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesCommentData(typename, commentId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commentId")), text: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text")), createdAt: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt")), createdBy: DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdBy")), modifiedAt: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modifiedAt")), modifiedBy: DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "modifiedBy")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesUserData DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_CreatedBy(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesUser", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesUserData(typename, firstName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), lastName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), email: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), pictureUrl: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pictureUrl")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::Nexar.Client.State.DesUserData DeserializeNonNullableIGetPcbComments_DesProjectById_Design_WorkInProgress_Variants_Pcb_CommentThreads_Comments_ModifiedBy(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DesUser", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::Nexar.Client.State.DesUserData(typename, firstName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "firstName")), lastName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastName")), email: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "email")), pictureUrl: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pictureUrl")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesCreateCommentThreadPayloadData
    {
        public DesCreateCommentThreadPayloadData(global::System.String __typename, global::System.String? commentThreadId = default !, global::System.String? commentId = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CommentThreadId = commentThreadId;
            CommentId = commentId;
            Errors = errors;
        }

        public global::System.String __typename { get; }

        public global::System.String? CommentThreadId { get; }

        public global::System.String? CommentId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesPayloadErrorData
    {
        public DesPayloadErrorData(global::System.String __typename, global::System.String? message = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Message = message;
        }

        public global::System.String __typename { get; }

        public global::System.String? Message { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDeleteCommentThreadPayloadData
    {
        public DesDeleteCommentThreadPayloadData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Errors = errors;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesCreateCommentPayloadData
    {
        public DesCreateCommentPayloadData(global::System.String __typename, global::System.String? commentId = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CommentId = commentId;
            Errors = errors;
        }

        public global::System.String __typename { get; }

        public global::System.String? CommentId { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDeleteCommentPayloadData
    {
        public DesDeleteCommentPayloadData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Errors = errors;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesUpdateCommentPayloadData
    {
        public DesUpdateCommentPayloadData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Errors = errors;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPayloadErrorData>? Errors { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesWorkspaceLocationData
    {
        public DesWorkspaceLocationData(global::System.String __typename, global::System.String? name = default !, global::System.String? apiServiceUrl = default !, global::System.String? filesServiceUrl = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            ApiServiceUrl = apiServiceUrl;
            FilesServiceUrl = filesServiceUrl;
        }

        public global::System.String __typename { get; }

        ///<summary>The name of the location.</summary>
        public global::System.String? Name { get; }

        ///<summary>The preferred Nexar API URL to use for this location.</summary>
        public global::System.String? ApiServiceUrl { get; }

        ///<summary>The preferred files service URL to use for this location.</summary>
        public global::System.String? FilesServiceUrl { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesProjectConnectionData
    {
        public DesProjectConnectionData(global::System.String __typename, global::System.Int32? totalCount = default !, global::Nexar.Client.State.PageInfoData? pageInfo = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TotalCount = totalCount;
            PageInfo = pageInfo;
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>Identifies the total count of items in the connection.</summary>
        public global::System.Int32? TotalCount { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::Nexar.Client.State.PageInfoData? PageInfo { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes { get; }
    }

    ///<summary>Information about pagination in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class PageInfoData
    {
        public PageInfoData(global::System.String __typename, global::System.String? endCursor = default !, global::System.Boolean? hasNextPage = default !, global::System.Boolean? hasPreviousPage = default !, global::System.String? startCursor = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            EndCursor = endCursor;
            HasNextPage = hasNextPage;
            HasPreviousPage = hasPreviousPage;
            StartCursor = startCursor;
        }

        public global::System.String __typename { get; }

        ///<summary>When paginating forwards, the cursor to continue.</summary>
        public global::System.String? EndCursor { get; }

        ///<summary>Indicates whether more edges exist following the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasNextPage { get; }

        ///<summary>Indicates whether more edges exist prior the set defined by the clients arguments.</summary>
        public global::System.Boolean? HasPreviousPage { get; }

        ///<summary>When paginating backwards, the cursor to continue.</summary>
        public global::System.String? StartCursor { get; }
    }

    ///<summary>A design manages all of the schematic, PCB, and BOM content for a project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDesignData
    {
        public DesDesignData(global::System.String __typename, global::Nexar.Client.State.DesWorkInProgressData? workInProgress = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            WorkInProgress = workInProgress;
        }

        public global::System.String __typename { get; }

        ///<summary>The most recent version of the design.</summary>
        public global::Nexar.Client.State.DesWorkInProgressData? WorkInProgress { get; }
    }

    ///<summary>The most recent version of a design.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesWorkInProgressData
    {
        public DesWorkInProgressData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesWipVariantData>? variants = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Variants = variants;
        }

        public global::System.String __typename { get; }

        ///<summary>The list of variations contained in this design.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesWipVariantData>? Variants { get; }
    }

    ///<summary>A variant contains a specific configuration of a base design.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesWipVariantData
    {
        public DesWipVariantData(global::System.String __typename, global::Nexar.Client.State.DesPcbData? pcb = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Pcb = pcb;
        }

        public global::System.String __typename { get; }

        ///<summary>The PCB document for this design variant.</summary>
        public global::Nexar.Client.State.DesPcbData? Pcb { get; }
    }

    ///<summary>A PCB contains design details of the physical product.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesPcbData
    {
        public DesPcbData(global::System.String __typename, global::Nexar.Client.State.DesDesignItemConnectionData? designItems = default !, global::System.String? documentId = default !, global::System.String? documentName = default !, global::Nexar.Client.State.DesStackupData? layerStack = default !, global::Nexar.Client.State.DesPolygonData? outline = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPadData>? pads = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesNetData>? nets = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesCommentThreadData>? commentThreads = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            DesignItems = designItems;
            DocumentId = documentId;
            DocumentName = documentName;
            LayerStack = layerStack;
            Outline = outline;
            Pads = pads;
            Nets = nets;
            CommentThreads = commentThreads;
        }

        public global::System.String __typename { get; }

        ///<summary>The list of all part instances used in this PCB grouped into pages.</summary>
        public global::Nexar.Client.State.DesDesignItemConnectionData? DesignItems { get; }

        ///<summary>The reference identifier for this PCB.</summary>
        public global::System.String? DocumentId { get; }

        ///<summary>The document file name.</summary>
        public global::System.String? DocumentName { get; }

        ///<summary>The details of the layer structure of this PCB.</summary>
        public global::Nexar.Client.State.DesStackupData? LayerStack { get; }

        ///<summary>The outline of this PCB.</summary>
        public global::Nexar.Client.State.DesPolygonData? Outline { get; }

        ///<summary>The list of all part connection targets in this PCB.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPadData>? Pads { get; }

        ///<summary>The list of all electrically connected regions in this PCB.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesNetData>? Nets { get; }

        ///<summary>The list of all comment threads related to this PCB.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesCommentThreadData>? CommentThreads { get; }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDesignItemConnectionData
    {
        public DesDesignItemConnectionData(global::System.String __typename, global::System.Int32? totalCount = default !, global::Nexar.Client.State.PageInfoData? pageInfo = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TotalCount = totalCount;
            PageInfo = pageInfo;
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>Identifies the total count of items in the connection.</summary>
        public global::System.Int32? TotalCount { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::Nexar.Client.State.PageInfoData? PageInfo { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesPosition2DData
    {
        public DesPosition2DData(global::System.String __typename, global::System.Int32? x = default !, global::System.Int32? y = default !, global::System.Decimal? xMm = default !, global::System.Decimal? yMm = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            X = x;
            Y = y;
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.String __typename { get; }

        public global::System.Int32? X { get; }

        public global::System.Int32? Y { get; }

        public global::System.Decimal? XMm { get; }

        public global::System.Decimal? YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesRectangleData
    {
        public DesRectangleData(global::System.String __typename, global::Nexar.Client.State.DesPosition2DData? pos1 = default !, global::Nexar.Client.State.DesPosition2DData? pos2 = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Pos1 = pos1;
            Pos2 = pos2;
        }

        public global::System.String __typename { get; }

        public global::Nexar.Client.State.DesPosition2DData? Pos1 { get; }

        public global::Nexar.Client.State.DesPosition2DData? Pos2 { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesMesh3DData
    {
        public DesMesh3DData(global::System.String __typename, global::Nexar.Client.State.DesDownloadableFileData? glbFile = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            GlbFile = glbFile;
        }

        public global::System.String __typename { get; }

        public global::Nexar.Client.State.DesDownloadableFileData? GlbFile { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesDownloadableFileData
    {
        public DesDownloadableFileData(global::System.String __typename, global::System.String? fileName = default !, global::System.String? downloadUrl = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            FileName = fileName;
            DownloadUrl = downloadUrl;
        }

        public global::System.String __typename { get; }

        public global::System.String? FileName { get; }

        public global::System.String? DownloadUrl { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesStackupData
    {
        public DesStackupData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesStackData>? stacks = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Stacks = stacks;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesStackData>? Stacks { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesPolygonData
    {
        public DesPolygonData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPosition2DData>? vertices = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Vertices = vertices;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPosition2DData>? Vertices { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesPadData
    {
        public DesPadData(global::System.String __typename, global::System.String? designator = default !, global::System.String? globalDesignator = default !, global::Nexar.Client.DesPadType? padType = default !, global::Nexar.Client.DesPrimitiveShape? shape = default !, global::Nexar.Client.State.DesNetData? net = default !, global::Nexar.Client.State.DesLayerData? layer = default !, global::Nexar.Client.State.DesPosition2DData? position = default !, global::System.Decimal? rotation = default !, global::Nexar.Client.State.DesSize2DData? size = default !, global::Nexar.Client.State.DesSizeData? holeSize = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Designator = designator;
            GlobalDesignator = globalDesignator;
            PadType = padType;
            Shape = shape;
            Net = net;
            Layer = layer;
            Position = position;
            Rotation = rotation;
            Size = size;
            HoleSize = holeSize;
        }

        public global::System.String __typename { get; }

        public global::System.String? Designator { get; }

        public global::System.String? GlobalDesignator { get; }

        public global::Nexar.Client.DesPadType? PadType { get; }

        public global::Nexar.Client.DesPrimitiveShape? Shape { get; }

        public global::Nexar.Client.State.DesNetData? Net { get; }

        public global::Nexar.Client.State.DesLayerData? Layer { get; }

        public global::Nexar.Client.State.DesPosition2DData? Position { get; }

        public global::System.Decimal? Rotation { get; }

        public global::Nexar.Client.State.DesSize2DData? Size { get; }

        public global::Nexar.Client.State.DesSizeData? HoleSize { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesNetData
    {
        public DesNetData(global::System.String __typename, global::System.String? name = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPadData>? pads = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesTrackData>? tracks = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesViaData>? vias = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            Pads = pads;
            Tracks = tracks;
            Vias = vias;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesPadData>? Pads { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesTrackData>? Tracks { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesViaData>? Vias { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesStackData
    {
        public DesStackData(global::System.String __typename, global::System.String? name = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesLayerData>? layers = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            Layers = layers;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesLayerData>? Layers { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesLayerData
    {
        public DesLayerData(global::System.String __typename, global::System.String? name = default !, global::Nexar.Client.State.DesSizeData? thickness = default !, global::System.Decimal? dielectricConstant = default !, global::Nexar.Client.State.DesWeightData? copperWeight = default !, global::Nexar.Client.DesLayerType? layerType = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesLayerPropertyData>? layerProperties = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            Thickness = thickness;
            DielectricConstant = dielectricConstant;
            CopperWeight = copperWeight;
            LayerType = layerType;
            LayerProperties = layerProperties;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::Nexar.Client.State.DesSizeData? Thickness { get; }

        public global::System.Decimal? DielectricConstant { get; }

        public global::Nexar.Client.State.DesWeightData? CopperWeight { get; }

        public global::Nexar.Client.DesLayerType? LayerType { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesLayerPropertyData>? LayerProperties { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesSize2DData
    {
        public DesSize2DData(global::System.String __typename, global::System.Decimal? xMm = default !, global::System.Decimal? yMm = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            XMm = xMm;
            YMm = yMm;
        }

        public global::System.String __typename { get; }

        public global::System.Decimal? XMm { get; }

        public global::System.Decimal? YMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesSizeData
    {
        public DesSizeData(global::System.String __typename, global::System.Decimal? xMm = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            XMm = xMm;
        }

        public global::System.String __typename { get; }

        public global::System.Decimal? XMm { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesTrackData
    {
        public DesTrackData(global::System.String __typename, global::Nexar.Client.State.DesLayerData? layer = default !, global::Nexar.Client.State.DesSizeData? width = default !, global::Nexar.Client.State.DesPosition2DData? begin = default !, global::Nexar.Client.State.DesPosition2DData? end = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Layer = layer;
            Width = width;
            Begin = begin;
            End = end;
        }

        public global::System.String __typename { get; }

        public global::Nexar.Client.State.DesLayerData? Layer { get; }

        public global::Nexar.Client.State.DesSizeData? Width { get; }

        public global::Nexar.Client.State.DesPosition2DData? Begin { get; }

        public global::Nexar.Client.State.DesPosition2DData? End { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesViaData
    {
        public DesViaData(global::System.String __typename, global::Nexar.Client.DesPrimitiveShape? shape = default !, global::Nexar.Client.State.DesLayerData? beginLayer = default !, global::Nexar.Client.State.DesLayerData? endLayer = default !, global::Nexar.Client.State.DesPosition2DData? position = default !, global::Nexar.Client.State.DesSizeData? padDiameter = default !, global::Nexar.Client.State.DesSizeData? holeDiameter = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Shape = shape;
            BeginLayer = beginLayer;
            EndLayer = endLayer;
            Position = position;
            PadDiameter = padDiameter;
            HoleDiameter = holeDiameter;
        }

        public global::System.String __typename { get; }

        public global::Nexar.Client.DesPrimitiveShape? Shape { get; }

        public global::Nexar.Client.State.DesLayerData? BeginLayer { get; }

        public global::Nexar.Client.State.DesLayerData? EndLayer { get; }

        public global::Nexar.Client.State.DesPosition2DData? Position { get; }

        public global::Nexar.Client.State.DesSizeData? PadDiameter { get; }

        public global::Nexar.Client.State.DesSizeData? HoleDiameter { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesWeightData
    {
        public DesWeightData(global::System.String __typename, global::System.Decimal? gram = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Gram = gram;
        }

        public global::System.String __typename { get; }

        public global::System.Decimal? Gram { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesLayerPropertyData
    {
        public DesLayerPropertyData(global::System.String __typename, global::System.String? name = default !, global::System.String? text = default !, global::Nexar.Client.State.DesSizeData? size = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            Text = text;
            Size = size;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.String? Text { get; }

        public global::Nexar.Client.State.DesSizeData? Size { get; }
    }

    ///<summary>A comment thread contains an initial remark associated with the design and a collection of replies.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesCommentThreadData
    {
        public DesCommentThreadData(global::System.String __typename, global::System.String? commentThreadId = default !, global::System.DateTimeOffset? createdAt = default !, global::System.DateTimeOffset? modifiedAt = default !, global::Nexar.Client.State.DesCommentContextData? context = default !, global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesCommentData>? comments = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CommentThreadId = commentThreadId;
            CreatedAt = createdAt;
            ModifiedAt = modifiedAt;
            Context = context;
            Comments = comments;
        }

        public global::System.String __typename { get; }

        ///<summary>The reference identifier for this comment thread (used by `desCreateComment`, `desDeleteComment`, `desUpdateComment`).</summary>
        public global::System.String? CommentThreadId { get; }

        ///<summary>The `DateTime` for the creation of this comment thread.</summary>
        public global::System.DateTimeOffset? CreatedAt { get; }

        ///<summary>The `DateTime` for the most recent modification of this comment thread.</summary>
        public global::System.DateTimeOffset? ModifiedAt { get; }

        ///<summary>The information about properties related to this comment thread.</summary>
        public global::Nexar.Client.State.DesCommentContextData? Context { get; }

        ///<summary>The list of replies associated with this comment thread.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::Nexar.Client.State.DesCommentData>? Comments { get; }
    }

    ///<summary>A comment context provides additional information about associations for a comment thread.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesCommentContextData
    {
        public DesCommentContextData(global::System.String __typename, global::Nexar.Client.State.DesRectangleData? area = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Area = area;
        }

        public global::System.String __typename { get; }

        ///<summary>The area associated with a comment thread.</summary>
        public global::Nexar.Client.State.DesRectangleData? Area { get; }
    }

    ///<summary>A comment is one of remarks associated with a comment thread or task.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesCommentData
    {
        public DesCommentData(global::System.String __typename, global::System.String? commentId = default !, global::System.String? text = default !, global::System.DateTimeOffset? createdAt = default !, global::Nexar.Client.State.DesUserData? createdBy = default !, global::System.DateTimeOffset? modifiedAt = default !, global::Nexar.Client.State.DesUserData? modifiedBy = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CommentId = commentId;
            Text = text;
            CreatedAt = createdAt;
            CreatedBy = createdBy;
            ModifiedAt = modifiedAt;
            ModifiedBy = modifiedBy;
        }

        public global::System.String __typename { get; }

        ///<summary>The comment reference ID.</summary>
        public global::System.String? CommentId { get; }

        ///<summary>The comment text.</summary>
        public global::System.String? Text { get; }

        ///<summary>The creation date.</summary>
        public global::System.DateTimeOffset? CreatedAt { get; }

        ///<summary>The user who created the comment.</summary>
        public global::Nexar.Client.State.DesUserData? CreatedBy { get; }

        ///<summary>The last modification date.</summary>
        public global::System.DateTimeOffset? ModifiedAt { get; }

        ///<summary>The user who modified the comment.</summary>
        public global::Nexar.Client.State.DesUserData? ModifiedBy { get; }
    }

    ///<summary>User details with the identifier and nullable extra fields.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class DesUserData
    {
        public DesUserData(global::System.String __typename, global::System.String? firstName = default !, global::System.String? lastName = default !, global::System.String? email = default !, global::System.String? pictureUrl = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            FirstName = firstName;
            LastName = lastName;
            Email = email;
            PictureUrl = pictureUrl;
        }

        public global::System.String __typename { get; }

        ///<summary>Null if the user no longer exists.</summary>
        public global::System.String? FirstName { get; }

        ///<summary>Null if the user no longer exists.</summary>
        public global::System.String? LastName { get; }

        ///<summary>Null if the user no longer exists.</summary>
        public global::System.String? Email { get; }

        ///<summary>Null if the user no longer exists.</summary>
        public global::System.String? PictureUrl { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class NexarClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "DesWorkspace" => ParseDesWorkspaceEntityId(obj, __typename),
                "DesProject" => ParseDesProjectEntityId(obj, __typename),
                "DesDesignItem" => ParseDesDesignItemEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "DesWorkspace" => FormatDesWorkspaceEntityId(entityId),
                "DesProject" => FormatDesProjectEntityId(entityId),
                "DesDesignItem" => FormatDesDesignItemEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseDesWorkspaceEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDesWorkspaceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDesProjectEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDesProjectEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDesDesignItemEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDesDesignItemEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.17.0.0")]
    public partial class NexarClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public NexarClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
